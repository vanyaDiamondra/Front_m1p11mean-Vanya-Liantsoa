{"ast":null,"code":"import firebase from '@firebase/app-compat';\nimport { _getChild, uploadBytesResumable, _dataFromString, _UploadTask, _FbsBlob, StringFormat, listAll, list, getMetadata, updateMetadata, getDownloadURL, deleteObject, _invalidRootOperation, _invalidArgument, ref, _Location, connectStorageEmulator, _TaskState, _TaskEvent } from '@firebase/storage';\nimport { Component } from '@firebase/component';\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\nclass UploadTaskSnapshotCompat {\n  constructor(_delegate, task, ref) {\n    this._delegate = _delegate;\n    this.task = task;\n    this.ref = ref;\n  }\n  get bytesTransferred() {\n    return this._delegate.bytesTransferred;\n  }\n  get metadata() {\n    return this._delegate.metadata;\n  }\n  get state() {\n    return this._delegate.state;\n  }\n  get totalBytes() {\n    return this._delegate.totalBytes;\n  }\n}\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\nclass UploadTaskCompat {\n  constructor(_delegate, _ref) {\n    this._delegate = _delegate;\n    this._ref = _ref;\n    this.cancel = this._delegate.cancel.bind(this._delegate);\n    this.catch = this._delegate.catch.bind(this._delegate);\n    this.pause = this._delegate.pause.bind(this._delegate);\n    this.resume = this._delegate.resume.bind(this._delegate);\n  }\n  get snapshot() {\n    return new UploadTaskSnapshotCompat(this._delegate.snapshot, this, this._ref);\n  }\n  then(onFulfilled, onRejected) {\n    return this._delegate.then(snapshot => {\n      if (onFulfilled) {\n        return onFulfilled(new UploadTaskSnapshotCompat(snapshot, this, this._ref));\n      }\n    }, onRejected);\n  }\n  on(type, nextOrObserver, error, completed) {\n    let wrappedNextOrObserver = undefined;\n    if (!!nextOrObserver) {\n      if (typeof nextOrObserver === 'function') {\n        wrappedNextOrObserver = taskSnapshot => nextOrObserver(new UploadTaskSnapshotCompat(taskSnapshot, this, this._ref));\n      } else {\n        wrappedNextOrObserver = {\n          next: !!nextOrObserver.next ? taskSnapshot => nextOrObserver.next(new UploadTaskSnapshotCompat(taskSnapshot, this, this._ref)) : undefined,\n          complete: nextOrObserver.complete || undefined,\n          error: nextOrObserver.error || undefined\n        };\n      }\n    }\n    return this._delegate.on(type, wrappedNextOrObserver, error || undefined, completed || undefined);\n  }\n}\nclass ListResultCompat {\n  constructor(_delegate, _service) {\n    this._delegate = _delegate;\n    this._service = _service;\n  }\n  get prefixes() {\n    return this._delegate.prefixes.map(ref => new ReferenceCompat(ref, this._service));\n  }\n  get items() {\n    return this._delegate.items.map(ref => new ReferenceCompat(ref, this._service));\n  }\n  get nextPageToken() {\n    return this._delegate.nextPageToken || null;\n  }\n}\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *  http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\nclass ReferenceCompat {\n  constructor(_delegate, storage) {\n    this._delegate = _delegate;\n    this.storage = storage;\n  }\n  get name() {\n    return this._delegate.name;\n  }\n  get bucket() {\n    return this._delegate.bucket;\n  }\n  get fullPath() {\n    return this._delegate.fullPath;\n  }\n  toString() {\n    return this._delegate.toString();\n  }\n  /**\r\n   * @returns A reference to the object obtained by\r\n   * appending childPath, removing any duplicate, beginning, or trailing\r\n   * slashes.\r\n   */\n  child(childPath) {\n    const reference = _getChild(this._delegate, childPath);\n    return new ReferenceCompat(reference, this.storage);\n  }\n  get root() {\n    return new ReferenceCompat(this._delegate.root, this.storage);\n  }\n  /**\r\n   * @returns A reference to the parent of the\r\n   * current object, or null if the current object is the root.\r\n   */\n  get parent() {\n    const reference = this._delegate.parent;\n    if (reference == null) {\n      return null;\n    }\n    return new ReferenceCompat(reference, this.storage);\n  }\n  /**\r\n   * Uploads a blob to this object's location.\r\n   * @param data - The blob to upload.\r\n   * @returns An UploadTask that lets you control and\r\n   * observe the upload.\r\n   */\n  put(data, metadata) {\n    this._throwIfRoot('put');\n    return new UploadTaskCompat(uploadBytesResumable(this._delegate, data, metadata), this);\n  }\n  /**\r\n   * Uploads a string to this object's location.\r\n   * @param value - The string to upload.\r\n   * @param format - The format of the string to upload.\r\n   * @returns An UploadTask that lets you control and\r\n   * observe the upload.\r\n   */\n  putString(value, format = StringFormat.RAW, metadata) {\n    this._throwIfRoot('putString');\n    const data = _dataFromString(format, value);\n    const metadataClone = Object.assign({}, metadata);\n    if (metadataClone['contentType'] == null && data.contentType != null) {\n      metadataClone['contentType'] = data.contentType;\n    }\n    return new UploadTaskCompat(new _UploadTask(this._delegate, new _FbsBlob(data.data, true), metadataClone), this);\n  }\n  /**\r\n   * List all items (files) and prefixes (folders) under this storage reference.\r\n   *\r\n   * This is a helper method for calling list() repeatedly until there are\r\n   * no more results. The default pagination size is 1000.\r\n   *\r\n   * Note: The results may not be consistent if objects are changed while this\r\n   * operation is running.\r\n   *\r\n   * Warning: listAll may potentially consume too many resources if there are\r\n   * too many results.\r\n   *\r\n   * @returns A Promise that resolves with all the items and prefixes under\r\n   *  the current storage reference. `prefixes` contains references to\r\n   *  sub-directories and `items` contains references to objects in this\r\n   *  folder. `nextPageToken` is never returned.\r\n   */\n  listAll() {\n    return listAll(this._delegate).then(r => new ListResultCompat(r, this.storage));\n  }\n  /**\r\n   * List items (files) and prefixes (folders) under this storage reference.\r\n   *\r\n   * List API is only available for Firebase Rules Version 2.\r\n   *\r\n   * GCS is a key-blob store. Firebase Storage imposes the semantic of '/'\r\n   * delimited folder structure. Refer to GCS's List API if you want to learn more.\r\n   *\r\n   * To adhere to Firebase Rules's Semantics, Firebase Storage does not\r\n   * support objects whose paths end with \"/\" or contain two consecutive\r\n   * \"/\"s. Firebase Storage List API will filter these unsupported objects.\r\n   * list() may fail if there are too many unsupported objects in the bucket.\r\n   *\r\n   * @param options - See ListOptions for details.\r\n   * @returns A Promise that resolves with the items and prefixes.\r\n   * `prefixes` contains references to sub-folders and `items`\r\n   * contains references to objects in this folder. `nextPageToken`\r\n   * can be used to get the rest of the results.\r\n   */\n  list(options) {\n    return list(this._delegate, options || undefined).then(r => new ListResultCompat(r, this.storage));\n  }\n  /**\r\n   * A `Promise` that resolves with the metadata for this object. If this\r\n   * object doesn't exist or metadata cannot be retreived, the promise is\r\n   * rejected.\r\n   */\n  getMetadata() {\n    return getMetadata(this._delegate);\n  }\n  /**\r\n   * Updates the metadata for this object.\r\n   * @param metadata - The new metadata for the object.\r\n   * Only values that have been explicitly set will be changed. Explicitly\r\n   * setting a value to null will remove the metadata.\r\n   * @returns A `Promise` that resolves\r\n   * with the new metadata for this object.\r\n   * @see firebaseStorage.Reference.prototype.getMetadata\r\n   */\n  updateMetadata(metadata) {\n    return updateMetadata(this._delegate, metadata);\n  }\n  /**\r\n   * @returns A `Promise` that resolves with the download\r\n   * URL for this object.\r\n   */\n  getDownloadURL() {\n    return getDownloadURL(this._delegate);\n  }\n  /**\r\n   * Deletes the object at this location.\r\n   * @returns A `Promise` that resolves if the deletion succeeds.\r\n   */\n  delete() {\n    this._throwIfRoot('delete');\n    return deleteObject(this._delegate);\n  }\n  _throwIfRoot(name) {\n    if (this._delegate._location.path === '') {\n      throw _invalidRootOperation(name);\n    }\n  }\n}\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n/**\r\n * A service that provides firebaseStorage.Reference instances.\r\n * @param opt_url gs:// url to a custom Storage Bucket\r\n */\nclass StorageServiceCompat {\n  constructor(app, _delegate) {\n    this.app = app;\n    this._delegate = _delegate;\n  }\n  get maxOperationRetryTime() {\n    return this._delegate.maxOperationRetryTime;\n  }\n  get maxUploadRetryTime() {\n    return this._delegate.maxUploadRetryTime;\n  }\n  /**\r\n   * Returns a firebaseStorage.Reference for the given path in the default\r\n   * bucket.\r\n   */\n  ref(path) {\n    if (isUrl(path)) {\n      throw _invalidArgument('ref() expected a child path but got a URL, use refFromURL instead.');\n    }\n    return new ReferenceCompat(ref(this._delegate, path), this);\n  }\n  /**\r\n   * Returns a firebaseStorage.Reference object for the given absolute URL,\r\n   * which must be a gs:// or http[s]:// URL.\r\n   */\n  refFromURL(url) {\n    if (!isUrl(url)) {\n      throw _invalidArgument('refFromURL() expected a full URL but got a child path, use ref() instead.');\n    }\n    try {\n      _Location.makeFromUrl(url, this._delegate.host);\n    } catch (e) {\n      throw _invalidArgument('refFromUrl() expected a valid full URL but got an invalid one.');\n    }\n    return new ReferenceCompat(ref(this._delegate, url), this);\n  }\n  setMaxUploadRetryTime(time) {\n    this._delegate.maxUploadRetryTime = time;\n  }\n  setMaxOperationRetryTime(time) {\n    this._delegate.maxOperationRetryTime = time;\n  }\n  useEmulator(host, port, options = {}) {\n    connectStorageEmulator(this._delegate, host, port, options);\n  }\n}\nfunction isUrl(path) {\n  return /^[A-Za-z]+:\\/\\//.test(path);\n}\nconst name = \"@firebase/storage-compat\";\nconst version = \"0.3.4\";\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n/**\r\n * Type constant for Firebase Storage.\r\n */\nconst STORAGE_TYPE = 'storage-compat';\nfunction factory(container, {\n  instanceIdentifier: url\n}) {\n  // Dependencies\n  const app = container.getProvider('app-compat').getImmediate();\n  const storageExp = container.getProvider('storage').getImmediate({\n    identifier: url\n  });\n  const storageServiceCompat = new StorageServiceCompat(app, storageExp);\n  return storageServiceCompat;\n}\nfunction registerStorage(instance) {\n  const namespaceExports = {\n    // no-inline\n    TaskState: _TaskState,\n    TaskEvent: _TaskEvent,\n    StringFormat,\n    Storage: StorageServiceCompat,\n    Reference: ReferenceCompat\n  };\n  instance.INTERNAL.registerComponent(new Component(STORAGE_TYPE, factory, \"PUBLIC\" /* ComponentType.PUBLIC */).setServiceProps(namespaceExports).setMultipleInstances(true));\n  instance.registerVersion(name, version);\n}\nregisterStorage(firebase);\nexport { registerStorage };","map":{"version":3,"names":["firebase","_getChild","uploadBytesResumable","_dataFromString","_UploadTask","_FbsBlob","StringFormat","listAll","list","getMetadata","updateMetadata","getDownloadURL","deleteObject","_invalidRootOperation","_invalidArgument","ref","_Location","connectStorageEmulator","_TaskState","_TaskEvent","Component","UploadTaskSnapshotCompat","constructor","_delegate","task","bytesTransferred","metadata","state","totalBytes","UploadTaskCompat","_ref","cancel","bind","catch","pause","resume","snapshot","then","onFulfilled","onRejected","on","type","nextOrObserver","error","completed","wrappedNextOrObserver","undefined","taskSnapshot","next","complete","ListResultCompat","_service","prefixes","map","ReferenceCompat","items","nextPageToken","storage","name","bucket","fullPath","toString","child","childPath","reference","root","parent","put","data","_throwIfRoot","putString","value","format","RAW","metadataClone","Object","assign","contentType","r","options","delete","_location","path","StorageServiceCompat","app","maxOperationRetryTime","maxUploadRetryTime","isUrl","refFromURL","url","makeFromUrl","host","e","setMaxUploadRetryTime","time","setMaxOperationRetryTime","useEmulator","port","test","version","STORAGE_TYPE","factory","container","instanceIdentifier","getProvider","getImmediate","storageExp","identifier","storageServiceCompat","registerStorage","instance","namespaceExports","TaskState","TaskEvent","Storage","Reference","INTERNAL","registerComponent","setServiceProps","setMultipleInstances","registerVersion"],"sources":["D:/documents/M1/Web Avancée/mean_beautysalon/Front_m1p11mean-Vanya-Liantsoa/node_modules/@firebase/storage-compat/dist/esm/index.esm2017.js"],"sourcesContent":["import firebase from '@firebase/app-compat';\nimport { _getChild, uploadBytesResumable, _dataFromString, _UploadTask, _FbsBlob, StringFormat, listAll, list, getMetadata, updateMetadata, getDownloadURL, deleteObject, _invalidRootOperation, _invalidArgument, ref, _Location, connectStorageEmulator, _TaskState, _TaskEvent } from '@firebase/storage';\nimport { Component } from '@firebase/component';\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nclass UploadTaskSnapshotCompat {\r\n    constructor(_delegate, task, ref) {\r\n        this._delegate = _delegate;\r\n        this.task = task;\r\n        this.ref = ref;\r\n    }\r\n    get bytesTransferred() {\r\n        return this._delegate.bytesTransferred;\r\n    }\r\n    get metadata() {\r\n        return this._delegate.metadata;\r\n    }\r\n    get state() {\r\n        return this._delegate.state;\r\n    }\r\n    get totalBytes() {\r\n        return this._delegate.totalBytes;\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nclass UploadTaskCompat {\r\n    constructor(_delegate, _ref) {\r\n        this._delegate = _delegate;\r\n        this._ref = _ref;\r\n        this.cancel = this._delegate.cancel.bind(this._delegate);\r\n        this.catch = this._delegate.catch.bind(this._delegate);\r\n        this.pause = this._delegate.pause.bind(this._delegate);\r\n        this.resume = this._delegate.resume.bind(this._delegate);\r\n    }\r\n    get snapshot() {\r\n        return new UploadTaskSnapshotCompat(this._delegate.snapshot, this, this._ref);\r\n    }\r\n    then(onFulfilled, onRejected) {\r\n        return this._delegate.then(snapshot => {\r\n            if (onFulfilled) {\r\n                return onFulfilled(new UploadTaskSnapshotCompat(snapshot, this, this._ref));\r\n            }\r\n        }, onRejected);\r\n    }\r\n    on(type, nextOrObserver, error, completed) {\r\n        let wrappedNextOrObserver = undefined;\r\n        if (!!nextOrObserver) {\r\n            if (typeof nextOrObserver === 'function') {\r\n                wrappedNextOrObserver = (taskSnapshot) => nextOrObserver(new UploadTaskSnapshotCompat(taskSnapshot, this, this._ref));\r\n            }\r\n            else {\r\n                wrappedNextOrObserver = {\r\n                    next: !!nextOrObserver.next\r\n                        ? (taskSnapshot) => nextOrObserver.next(new UploadTaskSnapshotCompat(taskSnapshot, this, this._ref))\r\n                        : undefined,\r\n                    complete: nextOrObserver.complete || undefined,\r\n                    error: nextOrObserver.error || undefined\r\n                };\r\n            }\r\n        }\r\n        return this._delegate.on(type, wrappedNextOrObserver, error || undefined, completed || undefined);\r\n    }\r\n}\n\nclass ListResultCompat {\r\n    constructor(_delegate, _service) {\r\n        this._delegate = _delegate;\r\n        this._service = _service;\r\n    }\r\n    get prefixes() {\r\n        return this._delegate.prefixes.map(ref => new ReferenceCompat(ref, this._service));\r\n    }\r\n    get items() {\r\n        return this._delegate.items.map(ref => new ReferenceCompat(ref, this._service));\r\n    }\r\n    get nextPageToken() {\r\n        return this._delegate.nextPageToken || null;\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *  http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nclass ReferenceCompat {\r\n    constructor(_delegate, storage) {\r\n        this._delegate = _delegate;\r\n        this.storage = storage;\r\n    }\r\n    get name() {\r\n        return this._delegate.name;\r\n    }\r\n    get bucket() {\r\n        return this._delegate.bucket;\r\n    }\r\n    get fullPath() {\r\n        return this._delegate.fullPath;\r\n    }\r\n    toString() {\r\n        return this._delegate.toString();\r\n    }\r\n    /**\r\n     * @returns A reference to the object obtained by\r\n     * appending childPath, removing any duplicate, beginning, or trailing\r\n     * slashes.\r\n     */\r\n    child(childPath) {\r\n        const reference = _getChild(this._delegate, childPath);\r\n        return new ReferenceCompat(reference, this.storage);\r\n    }\r\n    get root() {\r\n        return new ReferenceCompat(this._delegate.root, this.storage);\r\n    }\r\n    /**\r\n     * @returns A reference to the parent of the\r\n     * current object, or null if the current object is the root.\r\n     */\r\n    get parent() {\r\n        const reference = this._delegate.parent;\r\n        if (reference == null) {\r\n            return null;\r\n        }\r\n        return new ReferenceCompat(reference, this.storage);\r\n    }\r\n    /**\r\n     * Uploads a blob to this object's location.\r\n     * @param data - The blob to upload.\r\n     * @returns An UploadTask that lets you control and\r\n     * observe the upload.\r\n     */\r\n    put(data, metadata) {\r\n        this._throwIfRoot('put');\r\n        return new UploadTaskCompat(uploadBytesResumable(this._delegate, data, metadata), this);\r\n    }\r\n    /**\r\n     * Uploads a string to this object's location.\r\n     * @param value - The string to upload.\r\n     * @param format - The format of the string to upload.\r\n     * @returns An UploadTask that lets you control and\r\n     * observe the upload.\r\n     */\r\n    putString(value, format = StringFormat.RAW, metadata) {\r\n        this._throwIfRoot('putString');\r\n        const data = _dataFromString(format, value);\r\n        const metadataClone = Object.assign({}, metadata);\r\n        if (metadataClone['contentType'] == null && data.contentType != null) {\r\n            metadataClone['contentType'] = data.contentType;\r\n        }\r\n        return new UploadTaskCompat(new _UploadTask(this._delegate, new _FbsBlob(data.data, true), metadataClone), this);\r\n    }\r\n    /**\r\n     * List all items (files) and prefixes (folders) under this storage reference.\r\n     *\r\n     * This is a helper method for calling list() repeatedly until there are\r\n     * no more results. The default pagination size is 1000.\r\n     *\r\n     * Note: The results may not be consistent if objects are changed while this\r\n     * operation is running.\r\n     *\r\n     * Warning: listAll may potentially consume too many resources if there are\r\n     * too many results.\r\n     *\r\n     * @returns A Promise that resolves with all the items and prefixes under\r\n     *  the current storage reference. `prefixes` contains references to\r\n     *  sub-directories and `items` contains references to objects in this\r\n     *  folder. `nextPageToken` is never returned.\r\n     */\r\n    listAll() {\r\n        return listAll(this._delegate).then(r => new ListResultCompat(r, this.storage));\r\n    }\r\n    /**\r\n     * List items (files) and prefixes (folders) under this storage reference.\r\n     *\r\n     * List API is only available for Firebase Rules Version 2.\r\n     *\r\n     * GCS is a key-blob store. Firebase Storage imposes the semantic of '/'\r\n     * delimited folder structure. Refer to GCS's List API if you want to learn more.\r\n     *\r\n     * To adhere to Firebase Rules's Semantics, Firebase Storage does not\r\n     * support objects whose paths end with \"/\" or contain two consecutive\r\n     * \"/\"s. Firebase Storage List API will filter these unsupported objects.\r\n     * list() may fail if there are too many unsupported objects in the bucket.\r\n     *\r\n     * @param options - See ListOptions for details.\r\n     * @returns A Promise that resolves with the items and prefixes.\r\n     * `prefixes` contains references to sub-folders and `items`\r\n     * contains references to objects in this folder. `nextPageToken`\r\n     * can be used to get the rest of the results.\r\n     */\r\n    list(options) {\r\n        return list(this._delegate, options || undefined).then(r => new ListResultCompat(r, this.storage));\r\n    }\r\n    /**\r\n     * A `Promise` that resolves with the metadata for this object. If this\r\n     * object doesn't exist or metadata cannot be retreived, the promise is\r\n     * rejected.\r\n     */\r\n    getMetadata() {\r\n        return getMetadata(this._delegate);\r\n    }\r\n    /**\r\n     * Updates the metadata for this object.\r\n     * @param metadata - The new metadata for the object.\r\n     * Only values that have been explicitly set will be changed. Explicitly\r\n     * setting a value to null will remove the metadata.\r\n     * @returns A `Promise` that resolves\r\n     * with the new metadata for this object.\r\n     * @see firebaseStorage.Reference.prototype.getMetadata\r\n     */\r\n    updateMetadata(metadata) {\r\n        return updateMetadata(this._delegate, metadata);\r\n    }\r\n    /**\r\n     * @returns A `Promise` that resolves with the download\r\n     * URL for this object.\r\n     */\r\n    getDownloadURL() {\r\n        return getDownloadURL(this._delegate);\r\n    }\r\n    /**\r\n     * Deletes the object at this location.\r\n     * @returns A `Promise` that resolves if the deletion succeeds.\r\n     */\r\n    delete() {\r\n        this._throwIfRoot('delete');\r\n        return deleteObject(this._delegate);\r\n    }\r\n    _throwIfRoot(name) {\r\n        if (this._delegate._location.path === '') {\r\n            throw _invalidRootOperation(name);\r\n        }\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * A service that provides firebaseStorage.Reference instances.\r\n * @param opt_url gs:// url to a custom Storage Bucket\r\n */\r\nclass StorageServiceCompat {\r\n    constructor(app, _delegate) {\r\n        this.app = app;\r\n        this._delegate = _delegate;\r\n    }\r\n    get maxOperationRetryTime() {\r\n        return this._delegate.maxOperationRetryTime;\r\n    }\r\n    get maxUploadRetryTime() {\r\n        return this._delegate.maxUploadRetryTime;\r\n    }\r\n    /**\r\n     * Returns a firebaseStorage.Reference for the given path in the default\r\n     * bucket.\r\n     */\r\n    ref(path) {\r\n        if (isUrl(path)) {\r\n            throw _invalidArgument('ref() expected a child path but got a URL, use refFromURL instead.');\r\n        }\r\n        return new ReferenceCompat(ref(this._delegate, path), this);\r\n    }\r\n    /**\r\n     * Returns a firebaseStorage.Reference object for the given absolute URL,\r\n     * which must be a gs:// or http[s]:// URL.\r\n     */\r\n    refFromURL(url) {\r\n        if (!isUrl(url)) {\r\n            throw _invalidArgument('refFromURL() expected a full URL but got a child path, use ref() instead.');\r\n        }\r\n        try {\r\n            _Location.makeFromUrl(url, this._delegate.host);\r\n        }\r\n        catch (e) {\r\n            throw _invalidArgument('refFromUrl() expected a valid full URL but got an invalid one.');\r\n        }\r\n        return new ReferenceCompat(ref(this._delegate, url), this);\r\n    }\r\n    setMaxUploadRetryTime(time) {\r\n        this._delegate.maxUploadRetryTime = time;\r\n    }\r\n    setMaxOperationRetryTime(time) {\r\n        this._delegate.maxOperationRetryTime = time;\r\n    }\r\n    useEmulator(host, port, options = {}) {\r\n        connectStorageEmulator(this._delegate, host, port, options);\r\n    }\r\n}\r\nfunction isUrl(path) {\r\n    return /^[A-Za-z]+:\\/\\//.test(path);\r\n}\n\nconst name = \"@firebase/storage-compat\";\nconst version = \"0.3.4\";\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Type constant for Firebase Storage.\r\n */\r\nconst STORAGE_TYPE = 'storage-compat';\r\nfunction factory(container, { instanceIdentifier: url }) {\r\n    // Dependencies\r\n    const app = container.getProvider('app-compat').getImmediate();\r\n    const storageExp = container\r\n        .getProvider('storage')\r\n        .getImmediate({ identifier: url });\r\n    const storageServiceCompat = new StorageServiceCompat(app, storageExp);\r\n    return storageServiceCompat;\r\n}\r\nfunction registerStorage(instance) {\r\n    const namespaceExports = {\r\n        // no-inline\r\n        TaskState: _TaskState,\r\n        TaskEvent: _TaskEvent,\r\n        StringFormat,\r\n        Storage: StorageServiceCompat,\r\n        Reference: ReferenceCompat\r\n    };\r\n    instance.INTERNAL.registerComponent(new Component(STORAGE_TYPE, factory, \"PUBLIC\" /* ComponentType.PUBLIC */)\r\n        .setServiceProps(namespaceExports)\r\n        .setMultipleInstances(true));\r\n    instance.registerVersion(name, version);\r\n}\r\nregisterStorage(firebase);\n\nexport { registerStorage };\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}