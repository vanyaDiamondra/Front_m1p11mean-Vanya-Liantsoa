{"ast":null,"code":"import _asyncToGenerator from \"D:/documents/M1/Web Avanc\\xE9e/mean_beautysalon/Front_m1p11mean-Vanya-Liantsoa/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { _getProvider, getApp, _registerComponent, registerVersion, SDK_VERSION } from '@firebase/app';\nimport { FirebaseError, createMockUserToken, getModularInstance, getDefaultEmulatorHostnameAndPort } from '@firebase/util';\nimport { Component } from '@firebase/component';\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n/**\r\n * @fileoverview Constants used in the Firebase Storage library.\r\n */\n/**\r\n * Domain name for firebase storage.\r\n */\nconst DEFAULT_HOST = 'firebasestorage.googleapis.com';\n/**\r\n * The key in Firebase config json for the storage bucket.\r\n */\nconst CONFIG_STORAGE_BUCKET_KEY = 'storageBucket';\n/**\r\n * 2 minutes\r\n *\r\n * The timeout for all operations except upload.\r\n */\nconst DEFAULT_MAX_OPERATION_RETRY_TIME = 2 * 60 * 1000;\n/**\r\n * 10 minutes\r\n *\r\n * The timeout for upload.\r\n */\nconst DEFAULT_MAX_UPLOAD_RETRY_TIME = 10 * 60 * 1000;\n/**\r\n * 1 second\r\n */\nconst DEFAULT_MIN_SLEEP_TIME_MILLIS = 1000;\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n/**\r\n * An error returned by the Firebase Storage SDK.\r\n * @public\r\n */\nclass StorageError extends FirebaseError {\n  /**\r\n   * @param code - A `StorageErrorCode` string to be prefixed with 'storage/' and\r\n   *  added to the end of the message.\r\n   * @param message  - Error message.\r\n   * @param status_ - Corresponding HTTP Status Code\r\n   */\n  constructor(code, message, status_ = 0) {\n    super(prependCode(code), `Firebase Storage: ${message} (${prependCode(code)})`);\n    this.status_ = status_;\n    /**\r\n     * Stores custom error data unique to the `StorageError`.\r\n     */\n    this.customData = {\n      serverResponse: null\n    };\n    this._baseMessage = this.message;\n    // Without this, `instanceof StorageError`, in tests for example,\n    // returns false.\n    Object.setPrototypeOf(this, StorageError.prototype);\n  }\n  get status() {\n    return this.status_;\n  }\n  set status(status) {\n    this.status_ = status;\n  }\n  /**\r\n   * Compares a `StorageErrorCode` against this error's code, filtering out the prefix.\r\n   */\n  _codeEquals(code) {\n    return prependCode(code) === this.code;\n  }\n  /**\r\n   * Optional response message that was added by the server.\r\n   */\n  get serverResponse() {\n    return this.customData.serverResponse;\n  }\n  set serverResponse(serverResponse) {\n    this.customData.serverResponse = serverResponse;\n    if (this.customData.serverResponse) {\n      this.message = `${this._baseMessage}\\n${this.customData.serverResponse}`;\n    } else {\n      this.message = this._baseMessage;\n    }\n  }\n}\n/**\r\n * @public\r\n * Error codes that can be attached to `StorageError` objects.\r\n */\nvar StorageErrorCode;\n(function (StorageErrorCode) {\n  // Shared between all platforms\n  StorageErrorCode[\"UNKNOWN\"] = \"unknown\";\n  StorageErrorCode[\"OBJECT_NOT_FOUND\"] = \"object-not-found\";\n  StorageErrorCode[\"BUCKET_NOT_FOUND\"] = \"bucket-not-found\";\n  StorageErrorCode[\"PROJECT_NOT_FOUND\"] = \"project-not-found\";\n  StorageErrorCode[\"QUOTA_EXCEEDED\"] = \"quota-exceeded\";\n  StorageErrorCode[\"UNAUTHENTICATED\"] = \"unauthenticated\";\n  StorageErrorCode[\"UNAUTHORIZED\"] = \"unauthorized\";\n  StorageErrorCode[\"UNAUTHORIZED_APP\"] = \"unauthorized-app\";\n  StorageErrorCode[\"RETRY_LIMIT_EXCEEDED\"] = \"retry-limit-exceeded\";\n  StorageErrorCode[\"INVALID_CHECKSUM\"] = \"invalid-checksum\";\n  StorageErrorCode[\"CANCELED\"] = \"canceled\";\n  // JS specific\n  StorageErrorCode[\"INVALID_EVENT_NAME\"] = \"invalid-event-name\";\n  StorageErrorCode[\"INVALID_URL\"] = \"invalid-url\";\n  StorageErrorCode[\"INVALID_DEFAULT_BUCKET\"] = \"invalid-default-bucket\";\n  StorageErrorCode[\"NO_DEFAULT_BUCKET\"] = \"no-default-bucket\";\n  StorageErrorCode[\"CANNOT_SLICE_BLOB\"] = \"cannot-slice-blob\";\n  StorageErrorCode[\"SERVER_FILE_WRONG_SIZE\"] = \"server-file-wrong-size\";\n  StorageErrorCode[\"NO_DOWNLOAD_URL\"] = \"no-download-url\";\n  StorageErrorCode[\"INVALID_ARGUMENT\"] = \"invalid-argument\";\n  StorageErrorCode[\"INVALID_ARGUMENT_COUNT\"] = \"invalid-argument-count\";\n  StorageErrorCode[\"APP_DELETED\"] = \"app-deleted\";\n  StorageErrorCode[\"INVALID_ROOT_OPERATION\"] = \"invalid-root-operation\";\n  StorageErrorCode[\"INVALID_FORMAT\"] = \"invalid-format\";\n  StorageErrorCode[\"INTERNAL_ERROR\"] = \"internal-error\";\n  StorageErrorCode[\"UNSUPPORTED_ENVIRONMENT\"] = \"unsupported-environment\";\n})(StorageErrorCode || (StorageErrorCode = {}));\nfunction prependCode(code) {\n  return 'storage/' + code;\n}\nfunction unknown() {\n  const message = 'An unknown error occurred, please check the error payload for ' + 'server response.';\n  return new StorageError(StorageErrorCode.UNKNOWN, message);\n}\nfunction objectNotFound(path) {\n  return new StorageError(StorageErrorCode.OBJECT_NOT_FOUND, \"Object '\" + path + \"' does not exist.\");\n}\nfunction quotaExceeded(bucket) {\n  return new StorageError(StorageErrorCode.QUOTA_EXCEEDED, \"Quota for bucket '\" + bucket + \"' exceeded, please view quota on \" + 'https://firebase.google.com/pricing/.');\n}\nfunction unauthenticated() {\n  const message = 'User is not authenticated, please authenticate using Firebase ' + 'Authentication and try again.';\n  return new StorageError(StorageErrorCode.UNAUTHENTICATED, message);\n}\nfunction unauthorizedApp() {\n  return new StorageError(StorageErrorCode.UNAUTHORIZED_APP, 'This app does not have permission to access Firebase Storage on this project.');\n}\nfunction unauthorized(path) {\n  return new StorageError(StorageErrorCode.UNAUTHORIZED, \"User does not have permission to access '\" + path + \"'.\");\n}\nfunction retryLimitExceeded() {\n  return new StorageError(StorageErrorCode.RETRY_LIMIT_EXCEEDED, 'Max retry time for operation exceeded, please try again.');\n}\nfunction canceled() {\n  return new StorageError(StorageErrorCode.CANCELED, 'User canceled the upload/download.');\n}\nfunction invalidUrl(url) {\n  return new StorageError(StorageErrorCode.INVALID_URL, \"Invalid URL '\" + url + \"'.\");\n}\nfunction invalidDefaultBucket(bucket) {\n  return new StorageError(StorageErrorCode.INVALID_DEFAULT_BUCKET, \"Invalid default bucket '\" + bucket + \"'.\");\n}\nfunction noDefaultBucket() {\n  return new StorageError(StorageErrorCode.NO_DEFAULT_BUCKET, 'No default bucket ' + \"found. Did you set the '\" + CONFIG_STORAGE_BUCKET_KEY + \"' property when initializing the app?\");\n}\nfunction cannotSliceBlob() {\n  return new StorageError(StorageErrorCode.CANNOT_SLICE_BLOB, 'Cannot slice blob for upload. Please retry the upload.');\n}\nfunction serverFileWrongSize() {\n  return new StorageError(StorageErrorCode.SERVER_FILE_WRONG_SIZE, 'Server recorded incorrect upload file size, please retry the upload.');\n}\nfunction noDownloadURL() {\n  return new StorageError(StorageErrorCode.NO_DOWNLOAD_URL, 'The given file does not have any download URLs.');\n}\nfunction missingPolyFill(polyFill) {\n  return new StorageError(StorageErrorCode.UNSUPPORTED_ENVIRONMENT, `${polyFill} is missing. Make sure to install the required polyfills. See https://firebase.google.com/docs/web/environments-js-sdk#polyfills for more information.`);\n}\n/**\r\n * @internal\r\n */\nfunction invalidArgument(message) {\n  return new StorageError(StorageErrorCode.INVALID_ARGUMENT, message);\n}\nfunction appDeleted() {\n  return new StorageError(StorageErrorCode.APP_DELETED, 'The Firebase app was deleted.');\n}\n/**\r\n * @param name - The name of the operation that was invalid.\r\n *\r\n * @internal\r\n */\nfunction invalidRootOperation(name) {\n  return new StorageError(StorageErrorCode.INVALID_ROOT_OPERATION, \"The operation '\" + name + \"' cannot be performed on a root reference, create a non-root \" + \"reference using child, such as .child('file.png').\");\n}\n/**\r\n * @param format - The format that was not valid.\r\n * @param message - A message describing the format violation.\r\n */\nfunction invalidFormat(format, message) {\n  return new StorageError(StorageErrorCode.INVALID_FORMAT, \"String does not match format '\" + format + \"': \" + message);\n}\n/**\r\n * @param message - A message describing the internal error.\r\n */\nfunction internalError(message) {\n  throw new StorageError(StorageErrorCode.INTERNAL_ERROR, 'Internal error: ' + message);\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n/**\r\n * Firebase Storage location data.\r\n *\r\n * @internal\r\n */\nclass Location {\n  constructor(bucket, path) {\n    this.bucket = bucket;\n    this.path_ = path;\n  }\n  get path() {\n    return this.path_;\n  }\n  get isRoot() {\n    return this.path.length === 0;\n  }\n  fullServerUrl() {\n    const encode = encodeURIComponent;\n    return '/b/' + encode(this.bucket) + '/o/' + encode(this.path);\n  }\n  bucketOnlyServerUrl() {\n    const encode = encodeURIComponent;\n    return '/b/' + encode(this.bucket) + '/o';\n  }\n  static makeFromBucketSpec(bucketString, host) {\n    let bucketLocation;\n    try {\n      bucketLocation = Location.makeFromUrl(bucketString, host);\n    } catch (e) {\n      // Not valid URL, use as-is. This lets you put bare bucket names in\n      // config.\n      return new Location(bucketString, '');\n    }\n    if (bucketLocation.path === '') {\n      return bucketLocation;\n    } else {\n      throw invalidDefaultBucket(bucketString);\n    }\n  }\n  static makeFromUrl(url, host) {\n    let location = null;\n    const bucketDomain = '([A-Za-z0-9.\\\\-_]+)';\n    function gsModify(loc) {\n      if (loc.path.charAt(loc.path.length - 1) === '/') {\n        loc.path_ = loc.path_.slice(0, -1);\n      }\n    }\n    const gsPath = '(/(.*))?$';\n    const gsRegex = new RegExp('^gs://' + bucketDomain + gsPath, 'i');\n    const gsIndices = {\n      bucket: 1,\n      path: 3\n    };\n    function httpModify(loc) {\n      loc.path_ = decodeURIComponent(loc.path);\n    }\n    const version = 'v[A-Za-z0-9_]+';\n    const firebaseStorageHost = host.replace(/[.]/g, '\\\\.');\n    const firebaseStoragePath = '(/([^?#]*).*)?$';\n    const firebaseStorageRegExp = new RegExp(`^https?://${firebaseStorageHost}/${version}/b/${bucketDomain}/o${firebaseStoragePath}`, 'i');\n    const firebaseStorageIndices = {\n      bucket: 1,\n      path: 3\n    };\n    const cloudStorageHost = host === DEFAULT_HOST ? '(?:storage.googleapis.com|storage.cloud.google.com)' : host;\n    const cloudStoragePath = '([^?#]*)';\n    const cloudStorageRegExp = new RegExp(`^https?://${cloudStorageHost}/${bucketDomain}/${cloudStoragePath}`, 'i');\n    const cloudStorageIndices = {\n      bucket: 1,\n      path: 2\n    };\n    const groups = [{\n      regex: gsRegex,\n      indices: gsIndices,\n      postModify: gsModify\n    }, {\n      regex: firebaseStorageRegExp,\n      indices: firebaseStorageIndices,\n      postModify: httpModify\n    }, {\n      regex: cloudStorageRegExp,\n      indices: cloudStorageIndices,\n      postModify: httpModify\n    }];\n    for (let i = 0; i < groups.length; i++) {\n      const group = groups[i];\n      const captures = group.regex.exec(url);\n      if (captures) {\n        const bucketValue = captures[group.indices.bucket];\n        let pathValue = captures[group.indices.path];\n        if (!pathValue) {\n          pathValue = '';\n        }\n        location = new Location(bucketValue, pathValue);\n        group.postModify(location);\n        break;\n      }\n    }\n    if (location == null) {\n      throw invalidUrl(url);\n    }\n    return location;\n  }\n}\n\n/**\r\n * A request whose promise always fails.\r\n */\nclass FailRequest {\n  constructor(error) {\n    this.promise_ = Promise.reject(error);\n  }\n  /** @inheritDoc */\n  getPromise() {\n    return this.promise_;\n  }\n  /** @inheritDoc */\n  cancel(_appDelete = false) {}\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n/**\r\n * Accepts a callback for an action to perform (`doRequest`),\r\n * and then a callback for when the backoff has completed (`backoffCompleteCb`).\r\n * The callback sent to start requires an argument to call (`onRequestComplete`).\r\n * When `start` calls `doRequest`, it passes a callback for when the request has\r\n * completed, `onRequestComplete`. Based on this, the backoff continues, with\r\n * another call to `doRequest` and the above loop continues until the timeout\r\n * is hit, or a successful response occurs.\r\n * @description\r\n * @param doRequest Callback to perform request\r\n * @param backoffCompleteCb Callback to call when backoff has been completed\r\n */\nfunction start(doRequest,\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nbackoffCompleteCb, timeout) {\n  // TODO(andysoto): make this code cleaner (probably refactor into an actual\n  // type instead of a bunch of functions with state shared in the closure)\n  let waitSeconds = 1;\n  // Would type this as \"number\" but that doesn't work for Node so ¯\\_(ツ)_/¯\n  // TODO: find a way to exclude Node type definition for storage because storage only works in browser\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  let retryTimeoutId = null;\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  let globalTimeoutId = null;\n  let hitTimeout = false;\n  let cancelState = 0;\n  function canceled() {\n    return cancelState === 2;\n  }\n  let triggeredCallback = false;\n  function triggerCallback(...args) {\n    if (!triggeredCallback) {\n      triggeredCallback = true;\n      backoffCompleteCb.apply(null, args);\n    }\n  }\n  function callWithDelay(millis) {\n    retryTimeoutId = setTimeout(() => {\n      retryTimeoutId = null;\n      doRequest(responseHandler, canceled());\n    }, millis);\n  }\n  function clearGlobalTimeout() {\n    if (globalTimeoutId) {\n      clearTimeout(globalTimeoutId);\n    }\n  }\n  function responseHandler(success, ...args) {\n    if (triggeredCallback) {\n      clearGlobalTimeout();\n      return;\n    }\n    if (success) {\n      clearGlobalTimeout();\n      triggerCallback.call(null, success, ...args);\n      return;\n    }\n    const mustStop = canceled() || hitTimeout;\n    if (mustStop) {\n      clearGlobalTimeout();\n      triggerCallback.call(null, success, ...args);\n      return;\n    }\n    if (waitSeconds < 64) {\n      /* TODO(andysoto): don't back off so quickly if we know we're offline. */\n      waitSeconds *= 2;\n    }\n    let waitMillis;\n    if (cancelState === 1) {\n      cancelState = 2;\n      waitMillis = 0;\n    } else {\n      waitMillis = (waitSeconds + Math.random()) * 1000;\n    }\n    callWithDelay(waitMillis);\n  }\n  let stopped = false;\n  function stop(wasTimeout) {\n    if (stopped) {\n      return;\n    }\n    stopped = true;\n    clearGlobalTimeout();\n    if (triggeredCallback) {\n      return;\n    }\n    if (retryTimeoutId !== null) {\n      if (!wasTimeout) {\n        cancelState = 2;\n      }\n      clearTimeout(retryTimeoutId);\n      callWithDelay(0);\n    } else {\n      if (!wasTimeout) {\n        cancelState = 1;\n      }\n    }\n  }\n  callWithDelay(0);\n  globalTimeoutId = setTimeout(() => {\n    hitTimeout = true;\n    stop(true);\n  }, timeout);\n  return stop;\n}\n/**\r\n * Stops the retry loop from repeating.\r\n * If the function is currently \"in between\" retries, it is invoked immediately\r\n * with the second parameter as \"true\". Otherwise, it will be invoked once more\r\n * after the current invocation finishes iff the current invocation would have\r\n * triggered another retry.\r\n */\nfunction stop(id) {\n  id(false);\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\nfunction isJustDef(p) {\n  return p !== void 0;\n}\n// eslint-disable-next-line @typescript-eslint/ban-types\nfunction isFunction(p) {\n  return typeof p === 'function';\n}\nfunction isNonArrayObject(p) {\n  return typeof p === 'object' && !Array.isArray(p);\n}\nfunction isString(p) {\n  return typeof p === 'string' || p instanceof String;\n}\nfunction isNativeBlob(p) {\n  return isNativeBlobDefined() && p instanceof Blob;\n}\nfunction isNativeBlobDefined() {\n  return typeof Blob !== 'undefined';\n}\nfunction validateNumber(argument, minValue, maxValue, value) {\n  if (value < minValue) {\n    throw invalidArgument(`Invalid value for '${argument}'. Expected ${minValue} or greater.`);\n  }\n  if (value > maxValue) {\n    throw invalidArgument(`Invalid value for '${argument}'. Expected ${maxValue} or less.`);\n  }\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\nfunction makeUrl(urlPart, host, protocol) {\n  let origin = host;\n  if (protocol == null) {\n    origin = `https://${host}`;\n  }\n  return `${protocol}://${origin}/v0${urlPart}`;\n}\nfunction makeQueryString(params) {\n  const encode = encodeURIComponent;\n  let queryPart = '?';\n  for (const key in params) {\n    if (params.hasOwnProperty(key)) {\n      const nextPart = encode(key) + '=' + encode(params[key]);\n      queryPart = queryPart + nextPart + '&';\n    }\n  }\n  // Chop off the extra '&' or '?' on the end\n  queryPart = queryPart.slice(0, -1);\n  return queryPart;\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n/**\r\n * Error codes for requests made by the the XhrIo wrapper.\r\n */\nvar ErrorCode;\n(function (ErrorCode) {\n  ErrorCode[ErrorCode[\"NO_ERROR\"] = 0] = \"NO_ERROR\";\n  ErrorCode[ErrorCode[\"NETWORK_ERROR\"] = 1] = \"NETWORK_ERROR\";\n  ErrorCode[ErrorCode[\"ABORT\"] = 2] = \"ABORT\";\n})(ErrorCode || (ErrorCode = {}));\n\n/**\r\n * @license\r\n * Copyright 2022 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n/**\r\n * Checks the status code to see if the action should be retried.\r\n *\r\n * @param status Current HTTP status code returned by server.\r\n * @param additionalRetryCodes additional retry codes to check against\r\n */\nfunction isRetryStatusCode(status, additionalRetryCodes) {\n  // The codes for which to retry came from this page:\n  // https://cloud.google.com/storage/docs/exponential-backoff\n  const isFiveHundredCode = status >= 500 && status < 600;\n  const extraRetryCodes = [\n  // Request Timeout: web server didn't receive full request in time.\n  408,\n  // Too Many Requests: you're getting rate-limited, basically.\n  429];\n  const isExtraRetryCode = extraRetryCodes.indexOf(status) !== -1;\n  const isAdditionalRetryCode = additionalRetryCodes.indexOf(status) !== -1;\n  return isFiveHundredCode || isExtraRetryCode || isAdditionalRetryCode;\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n/**\r\n * Handles network logic for all Storage Requests, including error reporting and\r\n * retries with backoff.\r\n *\r\n * @param I - the type of the backend's network response.\r\n * @param - O the output type used by the rest of the SDK. The conversion\r\n * happens in the specified `callback_`.\r\n */\nclass NetworkRequest {\n  constructor(url_, method_, headers_, body_, successCodes_, additionalRetryCodes_, callback_, errorCallback_, timeout_, progressCallback_, connectionFactory_, retry = true) {\n    this.url_ = url_;\n    this.method_ = method_;\n    this.headers_ = headers_;\n    this.body_ = body_;\n    this.successCodes_ = successCodes_;\n    this.additionalRetryCodes_ = additionalRetryCodes_;\n    this.callback_ = callback_;\n    this.errorCallback_ = errorCallback_;\n    this.timeout_ = timeout_;\n    this.progressCallback_ = progressCallback_;\n    this.connectionFactory_ = connectionFactory_;\n    this.retry = retry;\n    this.pendingConnection_ = null;\n    this.backoffId_ = null;\n    this.canceled_ = false;\n    this.appDelete_ = false;\n    this.promise_ = new Promise((resolve, reject) => {\n      this.resolve_ = resolve;\n      this.reject_ = reject;\n      this.start_();\n    });\n  }\n  /**\r\n   * Actually starts the retry loop.\r\n   */\n  start_() {\n    const doTheRequest = (backoffCallback, canceled) => {\n      if (canceled) {\n        backoffCallback(false, new RequestEndStatus(false, null, true));\n        return;\n      }\n      const connection = this.connectionFactory_();\n      this.pendingConnection_ = connection;\n      const progressListener = progressEvent => {\n        const loaded = progressEvent.loaded;\n        const total = progressEvent.lengthComputable ? progressEvent.total : -1;\n        if (this.progressCallback_ !== null) {\n          this.progressCallback_(loaded, total);\n        }\n      };\n      if (this.progressCallback_ !== null) {\n        connection.addUploadProgressListener(progressListener);\n      }\n      // connection.send() never rejects, so we don't need to have a error handler or use catch on the returned promise.\n      // eslint-disable-next-line @typescript-eslint/no-floating-promises\n      connection.send(this.url_, this.method_, this.body_, this.headers_).then(() => {\n        if (this.progressCallback_ !== null) {\n          connection.removeUploadProgressListener(progressListener);\n        }\n        this.pendingConnection_ = null;\n        const hitServer = connection.getErrorCode() === ErrorCode.NO_ERROR;\n        const status = connection.getStatus();\n        if (!hitServer || isRetryStatusCode(status, this.additionalRetryCodes_) && this.retry) {\n          const wasCanceled = connection.getErrorCode() === ErrorCode.ABORT;\n          backoffCallback(false, new RequestEndStatus(false, null, wasCanceled));\n          return;\n        }\n        const successCode = this.successCodes_.indexOf(status) !== -1;\n        backoffCallback(true, new RequestEndStatus(successCode, connection));\n      });\n    };\n    /**\r\n     * @param requestWentThrough - True if the request eventually went\r\n     *     through, false if it hit the retry limit or was canceled.\r\n     */\n    const backoffDone = (requestWentThrough, status) => {\n      const resolve = this.resolve_;\n      const reject = this.reject_;\n      const connection = status.connection;\n      if (status.wasSuccessCode) {\n        try {\n          const result = this.callback_(connection, connection.getResponse());\n          if (isJustDef(result)) {\n            resolve(result);\n          } else {\n            resolve();\n          }\n        } catch (e) {\n          reject(e);\n        }\n      } else {\n        if (connection !== null) {\n          const err = unknown();\n          err.serverResponse = connection.getErrorText();\n          if (this.errorCallback_) {\n            reject(this.errorCallback_(connection, err));\n          } else {\n            reject(err);\n          }\n        } else {\n          if (status.canceled) {\n            const err = this.appDelete_ ? appDeleted() : canceled();\n            reject(err);\n          } else {\n            const err = retryLimitExceeded();\n            reject(err);\n          }\n        }\n      }\n    };\n    if (this.canceled_) {\n      backoffDone(false, new RequestEndStatus(false, null, true));\n    } else {\n      this.backoffId_ = start(doTheRequest, backoffDone, this.timeout_);\n    }\n  }\n  /** @inheritDoc */\n  getPromise() {\n    return this.promise_;\n  }\n  /** @inheritDoc */\n  cancel(appDelete) {\n    this.canceled_ = true;\n    this.appDelete_ = appDelete || false;\n    if (this.backoffId_ !== null) {\n      stop(this.backoffId_);\n    }\n    if (this.pendingConnection_ !== null) {\n      this.pendingConnection_.abort();\n    }\n  }\n}\n/**\r\n * A collection of information about the result of a network request.\r\n * @param opt_canceled - Defaults to false.\r\n */\nclass RequestEndStatus {\n  constructor(wasSuccessCode, connection, canceled) {\n    this.wasSuccessCode = wasSuccessCode;\n    this.connection = connection;\n    this.canceled = !!canceled;\n  }\n}\nfunction addAuthHeader_(headers, authToken) {\n  if (authToken !== null && authToken.length > 0) {\n    headers['Authorization'] = 'Firebase ' + authToken;\n  }\n}\nfunction addVersionHeader_(headers, firebaseVersion) {\n  headers['X-Firebase-Storage-Version'] = 'webjs/' + (firebaseVersion !== null && firebaseVersion !== void 0 ? firebaseVersion : 'AppManager');\n}\nfunction addGmpidHeader_(headers, appId) {\n  if (appId) {\n    headers['X-Firebase-GMPID'] = appId;\n  }\n}\nfunction addAppCheckHeader_(headers, appCheckToken) {\n  if (appCheckToken !== null) {\n    headers['X-Firebase-AppCheck'] = appCheckToken;\n  }\n}\nfunction makeRequest(requestInfo, appId, authToken, appCheckToken, requestFactory, firebaseVersion, retry = true) {\n  const queryPart = makeQueryString(requestInfo.urlParams);\n  const url = requestInfo.url + queryPart;\n  const headers = Object.assign({}, requestInfo.headers);\n  addGmpidHeader_(headers, appId);\n  addAuthHeader_(headers, authToken);\n  addVersionHeader_(headers, firebaseVersion);\n  addAppCheckHeader_(headers, appCheckToken);\n  return new NetworkRequest(url, requestInfo.method, headers, requestInfo.body, requestInfo.successCodes, requestInfo.additionalRetryCodes, requestInfo.handler, requestInfo.errorHandler, requestInfo.timeout, requestInfo.progressCallback, requestFactory, retry);\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\nfunction getBlobBuilder() {\n  if (typeof BlobBuilder !== 'undefined') {\n    return BlobBuilder;\n  } else if (typeof WebKitBlobBuilder !== 'undefined') {\n    return WebKitBlobBuilder;\n  } else {\n    return undefined;\n  }\n}\n/**\r\n * Concatenates one or more values together and converts them to a Blob.\r\n *\r\n * @param args The values that will make up the resulting blob.\r\n * @return The blob.\r\n */\nfunction getBlob$1(...args) {\n  const BlobBuilder = getBlobBuilder();\n  if (BlobBuilder !== undefined) {\n    const bb = new BlobBuilder();\n    for (let i = 0; i < args.length; i++) {\n      bb.append(args[i]);\n    }\n    return bb.getBlob();\n  } else {\n    if (isNativeBlobDefined()) {\n      return new Blob(args);\n    } else {\n      throw new StorageError(StorageErrorCode.UNSUPPORTED_ENVIRONMENT, \"This browser doesn't seem to support creating Blobs\");\n    }\n  }\n}\n/**\r\n * Slices the blob. The returned blob contains data from the start byte\r\n * (inclusive) till the end byte (exclusive). Negative indices cannot be used.\r\n *\r\n * @param blob The blob to be sliced.\r\n * @param start Index of the starting byte.\r\n * @param end Index of the ending byte.\r\n * @return The blob slice or null if not supported.\r\n */\nfunction sliceBlob(blob, start, end) {\n  if (blob.webkitSlice) {\n    return blob.webkitSlice(start, end);\n  } else if (blob.mozSlice) {\n    return blob.mozSlice(start, end);\n  } else if (blob.slice) {\n    return blob.slice(start, end);\n  }\n  return null;\n}\n\n/**\r\n * @license\r\n * Copyright 2021 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n/** Converts a Base64 encoded string to a binary string. */\nfunction decodeBase64(encoded) {\n  if (typeof atob === 'undefined') {\n    throw missingPolyFill('base-64');\n  }\n  return atob(encoded);\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n/**\r\n * An enumeration of the possible string formats for upload.\r\n * @public\r\n */\nconst StringFormat = {\n  /**\r\n   * Indicates the string should be interpreted \"raw\", that is, as normal text.\r\n   * The string will be interpreted as UTF-16, then uploaded as a UTF-8 byte\r\n   * sequence.\r\n   * Example: The string 'Hello! \\\\ud83d\\\\ude0a' becomes the byte sequence\r\n   * 48 65 6c 6c 6f 21 20 f0 9f 98 8a\r\n   */\n  RAW: 'raw',\n  /**\r\n   * Indicates the string should be interpreted as base64-encoded data.\r\n   * Padding characters (trailing '='s) are optional.\r\n   * Example: The string 'rWmO++E6t7/rlw==' becomes the byte sequence\r\n   * ad 69 8e fb e1 3a b7 bf eb 97\r\n   */\n  BASE64: 'base64',\n  /**\r\n   * Indicates the string should be interpreted as base64url-encoded data.\r\n   * Padding characters (trailing '='s) are optional.\r\n   * Example: The string 'rWmO--E6t7_rlw==' becomes the byte sequence\r\n   * ad 69 8e fb e1 3a b7 bf eb 97\r\n   */\n  BASE64URL: 'base64url',\n  /**\r\n   * Indicates the string is a data URL, such as one obtained from\r\n   * canvas.toDataURL().\r\n   * Example: the string 'data:application/octet-stream;base64,aaaa'\r\n   * becomes the byte sequence\r\n   * 69 a6 9a\r\n   * (the content-type \"application/octet-stream\" is also applied, but can\r\n   * be overridden in the metadata object).\r\n   */\n  DATA_URL: 'data_url'\n};\nclass StringData {\n  constructor(data, contentType) {\n    this.data = data;\n    this.contentType = contentType || null;\n  }\n}\n/**\r\n * @internal\r\n */\nfunction dataFromString(format, stringData) {\n  switch (format) {\n    case StringFormat.RAW:\n      return new StringData(utf8Bytes_(stringData));\n    case StringFormat.BASE64:\n    case StringFormat.BASE64URL:\n      return new StringData(base64Bytes_(format, stringData));\n    case StringFormat.DATA_URL:\n      return new StringData(dataURLBytes_(stringData), dataURLContentType_(stringData));\n    // do nothing\n  }\n  // assert(false);\n  throw unknown();\n}\nfunction utf8Bytes_(value) {\n  const b = [];\n  for (let i = 0; i < value.length; i++) {\n    let c = value.charCodeAt(i);\n    if (c <= 127) {\n      b.push(c);\n    } else {\n      if (c <= 2047) {\n        b.push(192 | c >> 6, 128 | c & 63);\n      } else {\n        if ((c & 64512) === 55296) {\n          // The start of a surrogate pair.\n          const valid = i < value.length - 1 && (value.charCodeAt(i + 1) & 64512) === 56320;\n          if (!valid) {\n            // The second surrogate wasn't there.\n            b.push(239, 191, 189);\n          } else {\n            const hi = c;\n            const lo = value.charCodeAt(++i);\n            c = 65536 | (hi & 1023) << 10 | lo & 1023;\n            b.push(240 | c >> 18, 128 | c >> 12 & 63, 128 | c >> 6 & 63, 128 | c & 63);\n          }\n        } else {\n          if ((c & 64512) === 56320) {\n            // Invalid low surrogate.\n            b.push(239, 191, 189);\n          } else {\n            b.push(224 | c >> 12, 128 | c >> 6 & 63, 128 | c & 63);\n          }\n        }\n      }\n    }\n  }\n  return new Uint8Array(b);\n}\nfunction percentEncodedBytes_(value) {\n  let decoded;\n  try {\n    decoded = decodeURIComponent(value);\n  } catch (e) {\n    throw invalidFormat(StringFormat.DATA_URL, 'Malformed data URL.');\n  }\n  return utf8Bytes_(decoded);\n}\nfunction base64Bytes_(format, value) {\n  switch (format) {\n    case StringFormat.BASE64:\n      {\n        const hasMinus = value.indexOf('-') !== -1;\n        const hasUnder = value.indexOf('_') !== -1;\n        if (hasMinus || hasUnder) {\n          const invalidChar = hasMinus ? '-' : '_';\n          throw invalidFormat(format, \"Invalid character '\" + invalidChar + \"' found: is it base64url encoded?\");\n        }\n        break;\n      }\n    case StringFormat.BASE64URL:\n      {\n        const hasPlus = value.indexOf('+') !== -1;\n        const hasSlash = value.indexOf('/') !== -1;\n        if (hasPlus || hasSlash) {\n          const invalidChar = hasPlus ? '+' : '/';\n          throw invalidFormat(format, \"Invalid character '\" + invalidChar + \"' found: is it base64 encoded?\");\n        }\n        value = value.replace(/-/g, '+').replace(/_/g, '/');\n        break;\n      }\n    // do nothing\n  }\n  let bytes;\n  try {\n    bytes = decodeBase64(value);\n  } catch (e) {\n    if (e.message.includes('polyfill')) {\n      throw e;\n    }\n    throw invalidFormat(format, 'Invalid character found');\n  }\n  const array = new Uint8Array(bytes.length);\n  for (let i = 0; i < bytes.length; i++) {\n    array[i] = bytes.charCodeAt(i);\n  }\n  return array;\n}\nclass DataURLParts {\n  constructor(dataURL) {\n    this.base64 = false;\n    this.contentType = null;\n    const matches = dataURL.match(/^data:([^,]+)?,/);\n    if (matches === null) {\n      throw invalidFormat(StringFormat.DATA_URL, \"Must be formatted 'data:[<mediatype>][;base64],<data>\");\n    }\n    const middle = matches[1] || null;\n    if (middle != null) {\n      this.base64 = endsWith(middle, ';base64');\n      this.contentType = this.base64 ? middle.substring(0, middle.length - ';base64'.length) : middle;\n    }\n    this.rest = dataURL.substring(dataURL.indexOf(',') + 1);\n  }\n}\nfunction dataURLBytes_(dataUrl) {\n  const parts = new DataURLParts(dataUrl);\n  if (parts.base64) {\n    return base64Bytes_(StringFormat.BASE64, parts.rest);\n  } else {\n    return percentEncodedBytes_(parts.rest);\n  }\n}\nfunction dataURLContentType_(dataUrl) {\n  const parts = new DataURLParts(dataUrl);\n  return parts.contentType;\n}\nfunction endsWith(s, end) {\n  const longEnough = s.length >= end.length;\n  if (!longEnough) {\n    return false;\n  }\n  return s.substring(s.length - end.length) === end;\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n/**\r\n * @param opt_elideCopy - If true, doesn't copy mutable input data\r\n *     (e.g. Uint8Arrays). Pass true only if you know the objects will not be\r\n *     modified after this blob's construction.\r\n *\r\n * @internal\r\n */\nclass FbsBlob {\n  constructor(data, elideCopy) {\n    let size = 0;\n    let blobType = '';\n    if (isNativeBlob(data)) {\n      this.data_ = data;\n      size = data.size;\n      blobType = data.type;\n    } else if (data instanceof ArrayBuffer) {\n      if (elideCopy) {\n        this.data_ = new Uint8Array(data);\n      } else {\n        this.data_ = new Uint8Array(data.byteLength);\n        this.data_.set(new Uint8Array(data));\n      }\n      size = this.data_.length;\n    } else if (data instanceof Uint8Array) {\n      if (elideCopy) {\n        this.data_ = data;\n      } else {\n        this.data_ = new Uint8Array(data.length);\n        this.data_.set(data);\n      }\n      size = data.length;\n    }\n    this.size_ = size;\n    this.type_ = blobType;\n  }\n  size() {\n    return this.size_;\n  }\n  type() {\n    return this.type_;\n  }\n  slice(startByte, endByte) {\n    if (isNativeBlob(this.data_)) {\n      const realBlob = this.data_;\n      const sliced = sliceBlob(realBlob, startByte, endByte);\n      if (sliced === null) {\n        return null;\n      }\n      return new FbsBlob(sliced);\n    } else {\n      const slice = new Uint8Array(this.data_.buffer, startByte, endByte - startByte);\n      return new FbsBlob(slice, true);\n    }\n  }\n  static getBlob(...args) {\n    if (isNativeBlobDefined()) {\n      const blobby = args.map(val => {\n        if (val instanceof FbsBlob) {\n          return val.data_;\n        } else {\n          return val;\n        }\n      });\n      return new FbsBlob(getBlob$1.apply(null, blobby));\n    } else {\n      const uint8Arrays = args.map(val => {\n        if (isString(val)) {\n          return dataFromString(StringFormat.RAW, val).data;\n        } else {\n          // Blobs don't exist, so this has to be a Uint8Array.\n          return val.data_;\n        }\n      });\n      let finalLength = 0;\n      uint8Arrays.forEach(array => {\n        finalLength += array.byteLength;\n      });\n      const merged = new Uint8Array(finalLength);\n      let index = 0;\n      uint8Arrays.forEach(array => {\n        for (let i = 0; i < array.length; i++) {\n          merged[index++] = array[i];\n        }\n      });\n      return new FbsBlob(merged, true);\n    }\n  }\n  uploadData() {\n    return this.data_;\n  }\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n/**\r\n * Returns the Object resulting from parsing the given JSON, or null if the\r\n * given string does not represent a JSON object.\r\n */\nfunction jsonObjectOrNull(s) {\n  let obj;\n  try {\n    obj = JSON.parse(s);\n  } catch (e) {\n    return null;\n  }\n  if (isNonArrayObject(obj)) {\n    return obj;\n  } else {\n    return null;\n  }\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n/**\r\n * @fileoverview Contains helper methods for manipulating paths.\r\n */\n/**\r\n * @return Null if the path is already at the root.\r\n */\nfunction parent(path) {\n  if (path.length === 0) {\n    return null;\n  }\n  const index = path.lastIndexOf('/');\n  if (index === -1) {\n    return '';\n  }\n  const newPath = path.slice(0, index);\n  return newPath;\n}\nfunction child(path, childPath) {\n  const canonicalChildPath = childPath.split('/').filter(component => component.length > 0).join('/');\n  if (path.length === 0) {\n    return canonicalChildPath;\n  } else {\n    return path + '/' + canonicalChildPath;\n  }\n}\n/**\r\n * Returns the last component of a path.\r\n * '/foo/bar' -> 'bar'\r\n * '/foo/bar/baz/' -> 'baz/'\r\n * '/a' -> 'a'\r\n */\nfunction lastComponent(path) {\n  const index = path.lastIndexOf('/', path.length - 2);\n  if (index === -1) {\n    return path;\n  } else {\n    return path.slice(index + 1);\n  }\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\nfunction noXform_(metadata, value) {\n  return value;\n}\nclass Mapping {\n  constructor(server, local, writable, xform) {\n    this.server = server;\n    this.local = local || server;\n    this.writable = !!writable;\n    this.xform = xform || noXform_;\n  }\n}\nlet mappings_ = null;\nfunction xformPath(fullPath) {\n  if (!isString(fullPath) || fullPath.length < 2) {\n    return fullPath;\n  } else {\n    return lastComponent(fullPath);\n  }\n}\nfunction getMappings() {\n  if (mappings_) {\n    return mappings_;\n  }\n  const mappings = [];\n  mappings.push(new Mapping('bucket'));\n  mappings.push(new Mapping('generation'));\n  mappings.push(new Mapping('metageneration'));\n  mappings.push(new Mapping('name', 'fullPath', true));\n  function mappingsXformPath(_metadata, fullPath) {\n    return xformPath(fullPath);\n  }\n  const nameMapping = new Mapping('name');\n  nameMapping.xform = mappingsXformPath;\n  mappings.push(nameMapping);\n  /**\r\n   * Coerces the second param to a number, if it is defined.\r\n   */\n  function xformSize(_metadata, size) {\n    if (size !== undefined) {\n      return Number(size);\n    } else {\n      return size;\n    }\n  }\n  const sizeMapping = new Mapping('size');\n  sizeMapping.xform = xformSize;\n  mappings.push(sizeMapping);\n  mappings.push(new Mapping('timeCreated'));\n  mappings.push(new Mapping('updated'));\n  mappings.push(new Mapping('md5Hash', null, true));\n  mappings.push(new Mapping('cacheControl', null, true));\n  mappings.push(new Mapping('contentDisposition', null, true));\n  mappings.push(new Mapping('contentEncoding', null, true));\n  mappings.push(new Mapping('contentLanguage', null, true));\n  mappings.push(new Mapping('contentType', null, true));\n  mappings.push(new Mapping('metadata', 'customMetadata', true));\n  mappings_ = mappings;\n  return mappings_;\n}\nfunction addRef(metadata, service) {\n  function generateRef() {\n    const bucket = metadata['bucket'];\n    const path = metadata['fullPath'];\n    const loc = new Location(bucket, path);\n    return service._makeStorageReference(loc);\n  }\n  Object.defineProperty(metadata, 'ref', {\n    get: generateRef\n  });\n}\nfunction fromResource(service, resource, mappings) {\n  const metadata = {};\n  metadata['type'] = 'file';\n  const len = mappings.length;\n  for (let i = 0; i < len; i++) {\n    const mapping = mappings[i];\n    metadata[mapping.local] = mapping.xform(metadata, resource[mapping.server]);\n  }\n  addRef(metadata, service);\n  return metadata;\n}\nfunction fromResourceString(service, resourceString, mappings) {\n  const obj = jsonObjectOrNull(resourceString);\n  if (obj === null) {\n    return null;\n  }\n  const resource = obj;\n  return fromResource(service, resource, mappings);\n}\nfunction downloadUrlFromResourceString(metadata, resourceString, host, protocol) {\n  const obj = jsonObjectOrNull(resourceString);\n  if (obj === null) {\n    return null;\n  }\n  if (!isString(obj['downloadTokens'])) {\n    // This can happen if objects are uploaded through GCS and retrieved\n    // through list, so we don't want to throw an Error.\n    return null;\n  }\n  const tokens = obj['downloadTokens'];\n  if (tokens.length === 0) {\n    return null;\n  }\n  const encode = encodeURIComponent;\n  const tokensList = tokens.split(',');\n  const urls = tokensList.map(token => {\n    const bucket = metadata['bucket'];\n    const path = metadata['fullPath'];\n    const urlPart = '/b/' + encode(bucket) + '/o/' + encode(path);\n    const base = makeUrl(urlPart, host, protocol);\n    const queryString = makeQueryString({\n      alt: 'media',\n      token\n    });\n    return base + queryString;\n  });\n  return urls[0];\n}\nfunction toResourceString(metadata, mappings) {\n  const resource = {};\n  const len = mappings.length;\n  for (let i = 0; i < len; i++) {\n    const mapping = mappings[i];\n    if (mapping.writable) {\n      resource[mapping.server] = metadata[mapping.local];\n    }\n  }\n  return JSON.stringify(resource);\n}\n\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\nconst PREFIXES_KEY = 'prefixes';\nconst ITEMS_KEY = 'items';\nfunction fromBackendResponse(service, bucket, resource) {\n  const listResult = {\n    prefixes: [],\n    items: [],\n    nextPageToken: resource['nextPageToken']\n  };\n  if (resource[PREFIXES_KEY]) {\n    for (const path of resource[PREFIXES_KEY]) {\n      const pathWithoutTrailingSlash = path.replace(/\\/$/, '');\n      const reference = service._makeStorageReference(new Location(bucket, pathWithoutTrailingSlash));\n      listResult.prefixes.push(reference);\n    }\n  }\n  if (resource[ITEMS_KEY]) {\n    for (const item of resource[ITEMS_KEY]) {\n      const reference = service._makeStorageReference(new Location(bucket, item['name']));\n      listResult.items.push(reference);\n    }\n  }\n  return listResult;\n}\nfunction fromResponseString(service, bucket, resourceString) {\n  const obj = jsonObjectOrNull(resourceString);\n  if (obj === null) {\n    return null;\n  }\n  const resource = obj;\n  return fromBackendResponse(service, bucket, resource);\n}\n\n/**\r\n * Contains a fully specified request.\r\n *\r\n * @param I - the type of the backend's network response.\r\n * @param O - the output response type used by the rest of the SDK.\r\n */\nclass RequestInfo {\n  constructor(url, method,\n  /**\r\n   * Returns the value with which to resolve the request's promise. Only called\r\n   * if the request is successful. Throw from this function to reject the\r\n   * returned Request's promise with the thrown error.\r\n   * Note: The XhrIo passed to this function may be reused after this callback\r\n   * returns. Do not keep a reference to it in any way.\r\n   */\n  handler, timeout) {\n    this.url = url;\n    this.method = method;\n    this.handler = handler;\n    this.timeout = timeout;\n    this.urlParams = {};\n    this.headers = {};\n    this.body = null;\n    this.errorHandler = null;\n    /**\r\n     * Called with the current number of bytes uploaded and total size (-1 if not\r\n     * computable) of the request body (i.e. used to report upload progress).\r\n     */\n    this.progressCallback = null;\n    this.successCodes = [200];\n    this.additionalRetryCodes = [];\n  }\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n/**\r\n * Throws the UNKNOWN StorageError if cndn is false.\r\n */\nfunction handlerCheck(cndn) {\n  if (!cndn) {\n    throw unknown();\n  }\n}\nfunction metadataHandler(service, mappings) {\n  function handler(xhr, text) {\n    const metadata = fromResourceString(service, text, mappings);\n    handlerCheck(metadata !== null);\n    return metadata;\n  }\n  return handler;\n}\nfunction listHandler(service, bucket) {\n  function handler(xhr, text) {\n    const listResult = fromResponseString(service, bucket, text);\n    handlerCheck(listResult !== null);\n    return listResult;\n  }\n  return handler;\n}\nfunction downloadUrlHandler(service, mappings) {\n  function handler(xhr, text) {\n    const metadata = fromResourceString(service, text, mappings);\n    handlerCheck(metadata !== null);\n    return downloadUrlFromResourceString(metadata, text, service.host, service._protocol);\n  }\n  return handler;\n}\nfunction sharedErrorHandler(location) {\n  function errorHandler(xhr, err) {\n    let newErr;\n    if (xhr.getStatus() === 401) {\n      if (\n      // This exact message string is the only consistent part of the\n      // server's error response that identifies it as an App Check error.\n      xhr.getErrorText().includes('Firebase App Check token is invalid')) {\n        newErr = unauthorizedApp();\n      } else {\n        newErr = unauthenticated();\n      }\n    } else {\n      if (xhr.getStatus() === 402) {\n        newErr = quotaExceeded(location.bucket);\n      } else {\n        if (xhr.getStatus() === 403) {\n          newErr = unauthorized(location.path);\n        } else {\n          newErr = err;\n        }\n      }\n    }\n    newErr.status = xhr.getStatus();\n    newErr.serverResponse = err.serverResponse;\n    return newErr;\n  }\n  return errorHandler;\n}\nfunction objectErrorHandler(location) {\n  const shared = sharedErrorHandler(location);\n  function errorHandler(xhr, err) {\n    let newErr = shared(xhr, err);\n    if (xhr.getStatus() === 404) {\n      newErr = objectNotFound(location.path);\n    }\n    newErr.serverResponse = err.serverResponse;\n    return newErr;\n  }\n  return errorHandler;\n}\nfunction getMetadata$2(service, location, mappings) {\n  const urlPart = location.fullServerUrl();\n  const url = makeUrl(urlPart, service.host, service._protocol);\n  const method = 'GET';\n  const timeout = service.maxOperationRetryTime;\n  const requestInfo = new RequestInfo(url, method, metadataHandler(service, mappings), timeout);\n  requestInfo.errorHandler = objectErrorHandler(location);\n  return requestInfo;\n}\nfunction list$2(service, location, delimiter, pageToken, maxResults) {\n  const urlParams = {};\n  if (location.isRoot) {\n    urlParams['prefix'] = '';\n  } else {\n    urlParams['prefix'] = location.path + '/';\n  }\n  if (delimiter && delimiter.length > 0) {\n    urlParams['delimiter'] = delimiter;\n  }\n  if (pageToken) {\n    urlParams['pageToken'] = pageToken;\n  }\n  if (maxResults) {\n    urlParams['maxResults'] = maxResults;\n  }\n  const urlPart = location.bucketOnlyServerUrl();\n  const url = makeUrl(urlPart, service.host, service._protocol);\n  const method = 'GET';\n  const timeout = service.maxOperationRetryTime;\n  const requestInfo = new RequestInfo(url, method, listHandler(service, location.bucket), timeout);\n  requestInfo.urlParams = urlParams;\n  requestInfo.errorHandler = sharedErrorHandler(location);\n  return requestInfo;\n}\nfunction getBytes$1(service, location, maxDownloadSizeBytes) {\n  const urlPart = location.fullServerUrl();\n  const url = makeUrl(urlPart, service.host, service._protocol) + '?alt=media';\n  const method = 'GET';\n  const timeout = service.maxOperationRetryTime;\n  const requestInfo = new RequestInfo(url, method, (_, data) => data, timeout);\n  requestInfo.errorHandler = objectErrorHandler(location);\n  if (maxDownloadSizeBytes !== undefined) {\n    requestInfo.headers['Range'] = `bytes=0-${maxDownloadSizeBytes}`;\n    requestInfo.successCodes = [200 /* OK */, 206 /* Partial Content */];\n  }\n  return requestInfo;\n}\nfunction getDownloadUrl(service, location, mappings) {\n  const urlPart = location.fullServerUrl();\n  const url = makeUrl(urlPart, service.host, service._protocol);\n  const method = 'GET';\n  const timeout = service.maxOperationRetryTime;\n  const requestInfo = new RequestInfo(url, method, downloadUrlHandler(service, mappings), timeout);\n  requestInfo.errorHandler = objectErrorHandler(location);\n  return requestInfo;\n}\nfunction updateMetadata$2(service, location, metadata, mappings) {\n  const urlPart = location.fullServerUrl();\n  const url = makeUrl(urlPart, service.host, service._protocol);\n  const method = 'PATCH';\n  const body = toResourceString(metadata, mappings);\n  const headers = {\n    'Content-Type': 'application/json; charset=utf-8'\n  };\n  const timeout = service.maxOperationRetryTime;\n  const requestInfo = new RequestInfo(url, method, metadataHandler(service, mappings), timeout);\n  requestInfo.headers = headers;\n  requestInfo.body = body;\n  requestInfo.errorHandler = objectErrorHandler(location);\n  return requestInfo;\n}\nfunction deleteObject$2(service, location) {\n  const urlPart = location.fullServerUrl();\n  const url = makeUrl(urlPart, service.host, service._protocol);\n  const method = 'DELETE';\n  const timeout = service.maxOperationRetryTime;\n  function handler(_xhr, _text) {}\n  const requestInfo = new RequestInfo(url, method, handler, timeout);\n  requestInfo.successCodes = [200, 204];\n  requestInfo.errorHandler = objectErrorHandler(location);\n  return requestInfo;\n}\nfunction determineContentType_(metadata, blob) {\n  return metadata && metadata['contentType'] || blob && blob.type() || 'application/octet-stream';\n}\nfunction metadataForUpload_(location, blob, metadata) {\n  const metadataClone = Object.assign({}, metadata);\n  metadataClone['fullPath'] = location.path;\n  metadataClone['size'] = blob.size();\n  if (!metadataClone['contentType']) {\n    metadataClone['contentType'] = determineContentType_(null, blob);\n  }\n  return metadataClone;\n}\n/**\r\n * Prepare RequestInfo for uploads as Content-Type: multipart.\r\n */\nfunction multipartUpload(service, location, mappings, blob, metadata) {\n  const urlPart = location.bucketOnlyServerUrl();\n  const headers = {\n    'X-Goog-Upload-Protocol': 'multipart'\n  };\n  function genBoundary() {\n    let str = '';\n    for (let i = 0; i < 2; i++) {\n      str = str + Math.random().toString().slice(2);\n    }\n    return str;\n  }\n  const boundary = genBoundary();\n  headers['Content-Type'] = 'multipart/related; boundary=' + boundary;\n  const metadata_ = metadataForUpload_(location, blob, metadata);\n  const metadataString = toResourceString(metadata_, mappings);\n  const preBlobPart = '--' + boundary + '\\r\\n' + 'Content-Type: application/json; charset=utf-8\\r\\n\\r\\n' + metadataString + '\\r\\n--' + boundary + '\\r\\n' + 'Content-Type: ' + metadata_['contentType'] + '\\r\\n\\r\\n';\n  const postBlobPart = '\\r\\n--' + boundary + '--';\n  const body = FbsBlob.getBlob(preBlobPart, blob, postBlobPart);\n  if (body === null) {\n    throw cannotSliceBlob();\n  }\n  const urlParams = {\n    name: metadata_['fullPath']\n  };\n  const url = makeUrl(urlPart, service.host, service._protocol);\n  const method = 'POST';\n  const timeout = service.maxUploadRetryTime;\n  const requestInfo = new RequestInfo(url, method, metadataHandler(service, mappings), timeout);\n  requestInfo.urlParams = urlParams;\n  requestInfo.headers = headers;\n  requestInfo.body = body.uploadData();\n  requestInfo.errorHandler = sharedErrorHandler(location);\n  return requestInfo;\n}\n/**\r\n * @param current The number of bytes that have been uploaded so far.\r\n * @param total The total number of bytes in the upload.\r\n * @param opt_finalized True if the server has finished the upload.\r\n * @param opt_metadata The upload metadata, should\r\n *     only be passed if opt_finalized is true.\r\n */\nclass ResumableUploadStatus {\n  constructor(current, total, finalized, metadata) {\n    this.current = current;\n    this.total = total;\n    this.finalized = !!finalized;\n    this.metadata = metadata || null;\n  }\n}\nfunction checkResumeHeader_(xhr, allowed) {\n  let status = null;\n  try {\n    status = xhr.getResponseHeader('X-Goog-Upload-Status');\n  } catch (e) {\n    handlerCheck(false);\n  }\n  const allowedStatus = allowed || ['active'];\n  handlerCheck(!!status && allowedStatus.indexOf(status) !== -1);\n  return status;\n}\nfunction createResumableUpload(service, location, mappings, blob, metadata) {\n  const urlPart = location.bucketOnlyServerUrl();\n  const metadataForUpload = metadataForUpload_(location, blob, metadata);\n  const urlParams = {\n    name: metadataForUpload['fullPath']\n  };\n  const url = makeUrl(urlPart, service.host, service._protocol);\n  const method = 'POST';\n  const headers = {\n    'X-Goog-Upload-Protocol': 'resumable',\n    'X-Goog-Upload-Command': 'start',\n    'X-Goog-Upload-Header-Content-Length': `${blob.size()}`,\n    'X-Goog-Upload-Header-Content-Type': metadataForUpload['contentType'],\n    'Content-Type': 'application/json; charset=utf-8'\n  };\n  const body = toResourceString(metadataForUpload, mappings);\n  const timeout = service.maxUploadRetryTime;\n  function handler(xhr) {\n    checkResumeHeader_(xhr);\n    let url;\n    try {\n      url = xhr.getResponseHeader('X-Goog-Upload-URL');\n    } catch (e) {\n      handlerCheck(false);\n    }\n    handlerCheck(isString(url));\n    return url;\n  }\n  const requestInfo = new RequestInfo(url, method, handler, timeout);\n  requestInfo.urlParams = urlParams;\n  requestInfo.headers = headers;\n  requestInfo.body = body;\n  requestInfo.errorHandler = sharedErrorHandler(location);\n  return requestInfo;\n}\n/**\r\n * @param url From a call to fbs.requests.createResumableUpload.\r\n */\nfunction getResumableUploadStatus(service, location, url, blob) {\n  const headers = {\n    'X-Goog-Upload-Command': 'query'\n  };\n  function handler(xhr) {\n    const status = checkResumeHeader_(xhr, ['active', 'final']);\n    let sizeString = null;\n    try {\n      sizeString = xhr.getResponseHeader('X-Goog-Upload-Size-Received');\n    } catch (e) {\n      handlerCheck(false);\n    }\n    if (!sizeString) {\n      // null or empty string\n      handlerCheck(false);\n    }\n    const size = Number(sizeString);\n    handlerCheck(!isNaN(size));\n    return new ResumableUploadStatus(size, blob.size(), status === 'final');\n  }\n  const method = 'POST';\n  const timeout = service.maxUploadRetryTime;\n  const requestInfo = new RequestInfo(url, method, handler, timeout);\n  requestInfo.headers = headers;\n  requestInfo.errorHandler = sharedErrorHandler(location);\n  return requestInfo;\n}\n/**\r\n * Any uploads via the resumable upload API must transfer a number of bytes\r\n * that is a multiple of this number.\r\n */\nconst RESUMABLE_UPLOAD_CHUNK_SIZE = 256 * 1024;\n/**\r\n * @param url From a call to fbs.requests.createResumableUpload.\r\n * @param chunkSize Number of bytes to upload.\r\n * @param status The previous status.\r\n *     If not passed or null, we start from the beginning.\r\n * @throws fbs.Error If the upload is already complete, the passed in status\r\n *     has a final size inconsistent with the blob, or the blob cannot be sliced\r\n *     for upload.\r\n */\nfunction continueResumableUpload(location, service, url, blob, chunkSize, mappings, status, progressCallback) {\n  // TODO(andysoto): standardize on internal asserts\n  // assert(!(opt_status && opt_status.finalized));\n  const status_ = new ResumableUploadStatus(0, 0);\n  if (status) {\n    status_.current = status.current;\n    status_.total = status.total;\n  } else {\n    status_.current = 0;\n    status_.total = blob.size();\n  }\n  if (blob.size() !== status_.total) {\n    throw serverFileWrongSize();\n  }\n  const bytesLeft = status_.total - status_.current;\n  let bytesToUpload = bytesLeft;\n  if (chunkSize > 0) {\n    bytesToUpload = Math.min(bytesToUpload, chunkSize);\n  }\n  const startByte = status_.current;\n  const endByte = startByte + bytesToUpload;\n  let uploadCommand = '';\n  if (bytesToUpload === 0) {\n    uploadCommand = 'finalize';\n  } else if (bytesLeft === bytesToUpload) {\n    uploadCommand = 'upload, finalize';\n  } else {\n    uploadCommand = 'upload';\n  }\n  const headers = {\n    'X-Goog-Upload-Command': uploadCommand,\n    'X-Goog-Upload-Offset': `${status_.current}`\n  };\n  const body = blob.slice(startByte, endByte);\n  if (body === null) {\n    throw cannotSliceBlob();\n  }\n  function handler(xhr, text) {\n    // TODO(andysoto): Verify the MD5 of each uploaded range:\n    // the 'x-range-md5' header comes back with status code 308 responses.\n    // We'll only be able to bail out though, because you can't re-upload a\n    // range that you previously uploaded.\n    const uploadStatus = checkResumeHeader_(xhr, ['active', 'final']);\n    const newCurrent = status_.current + bytesToUpload;\n    const size = blob.size();\n    let metadata;\n    if (uploadStatus === 'final') {\n      metadata = metadataHandler(service, mappings)(xhr, text);\n    } else {\n      metadata = null;\n    }\n    return new ResumableUploadStatus(newCurrent, size, uploadStatus === 'final', metadata);\n  }\n  const method = 'POST';\n  const timeout = service.maxUploadRetryTime;\n  const requestInfo = new RequestInfo(url, method, handler, timeout);\n  requestInfo.headers = headers;\n  requestInfo.body = body.uploadData();\n  requestInfo.progressCallback = progressCallback || null;\n  requestInfo.errorHandler = sharedErrorHandler(location);\n  return requestInfo;\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n/**\r\n * An event that is triggered on a task.\r\n * @internal\r\n */\nconst TaskEvent = {\n  /**\r\n   * For this event,\r\n   * <ul>\r\n   *   <li>The `next` function is triggered on progress updates and when the\r\n   *       task is paused/resumed with an `UploadTaskSnapshot` as the first\r\n   *       argument.</li>\r\n   *   <li>The `error` function is triggered if the upload is canceled or fails\r\n   *       for another reason.</li>\r\n   *   <li>The `complete` function is triggered if the upload completes\r\n   *       successfully.</li>\r\n   * </ul>\r\n   */\n  STATE_CHANGED: 'state_changed'\n};\n// type keys = keyof TaskState\n/**\r\n * Represents the current state of a running upload.\r\n * @internal\r\n */\nconst TaskState = {\n  /** The task is currently transferring data. */\n  RUNNING: 'running',\n  /** The task was paused by the user. */\n  PAUSED: 'paused',\n  /** The task completed successfully. */\n  SUCCESS: 'success',\n  /** The task was canceled. */\n  CANCELED: 'canceled',\n  /** The task failed with an error. */\n  ERROR: 'error'\n};\nfunction taskStateFromInternalTaskState(state) {\n  switch (state) {\n    case \"running\" /* InternalTaskState.RUNNING */:\n    case \"pausing\" /* InternalTaskState.PAUSING */:\n    case \"canceling\" /* InternalTaskState.CANCELING */:\n      return TaskState.RUNNING;\n    case \"paused\" /* InternalTaskState.PAUSED */:\n      return TaskState.PAUSED;\n    case \"success\" /* InternalTaskState.SUCCESS */:\n      return TaskState.SUCCESS;\n    case \"canceled\" /* InternalTaskState.CANCELED */:\n      return TaskState.CANCELED;\n    case \"error\" /* InternalTaskState.ERROR */:\n      return TaskState.ERROR;\n    default:\n      // TODO(andysoto): assert(false);\n      return TaskState.ERROR;\n  }\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\nclass Observer {\n  constructor(nextOrObserver, error, complete) {\n    const asFunctions = isFunction(nextOrObserver) || error != null || complete != null;\n    if (asFunctions) {\n      this.next = nextOrObserver;\n      this.error = error !== null && error !== void 0 ? error : undefined;\n      this.complete = complete !== null && complete !== void 0 ? complete : undefined;\n    } else {\n      const observer = nextOrObserver;\n      this.next = observer.next;\n      this.error = observer.error;\n      this.complete = observer.complete;\n    }\n  }\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n/**\r\n * Returns a function that invokes f with its arguments asynchronously as a\r\n * microtask, i.e. as soon as possible after the current script returns back\r\n * into browser code.\r\n */\n// eslint-disable-next-line @typescript-eslint/ban-types\nfunction async(f) {\n  return (...argsToForward) => {\n    // eslint-disable-next-line @typescript-eslint/no-floating-promises\n    Promise.resolve().then(() => f(...argsToForward));\n  };\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n/** An override for the text-based Connection. Used in tests. */\nlet textFactoryOverride = null;\n/**\r\n * Network layer for browsers. We use this instead of goog.net.XhrIo because\r\n * goog.net.XhrIo is hyuuuuge and doesn't work in React Native on Android.\r\n */\nclass XhrConnection {\n  constructor() {\n    this.sent_ = false;\n    this.xhr_ = new XMLHttpRequest();\n    this.initXhr();\n    this.errorCode_ = ErrorCode.NO_ERROR;\n    this.sendPromise_ = new Promise(resolve => {\n      this.xhr_.addEventListener('abort', () => {\n        this.errorCode_ = ErrorCode.ABORT;\n        resolve();\n      });\n      this.xhr_.addEventListener('error', () => {\n        this.errorCode_ = ErrorCode.NETWORK_ERROR;\n        resolve();\n      });\n      this.xhr_.addEventListener('load', () => {\n        resolve();\n      });\n    });\n  }\n  send(url, method, body, headers) {\n    if (this.sent_) {\n      throw internalError('cannot .send() more than once');\n    }\n    this.sent_ = true;\n    this.xhr_.open(method, url, true);\n    if (headers !== undefined) {\n      for (const key in headers) {\n        if (headers.hasOwnProperty(key)) {\n          this.xhr_.setRequestHeader(key, headers[key].toString());\n        }\n      }\n    }\n    if (body !== undefined) {\n      this.xhr_.send(body);\n    } else {\n      this.xhr_.send();\n    }\n    return this.sendPromise_;\n  }\n  getErrorCode() {\n    if (!this.sent_) {\n      throw internalError('cannot .getErrorCode() before sending');\n    }\n    return this.errorCode_;\n  }\n  getStatus() {\n    if (!this.sent_) {\n      throw internalError('cannot .getStatus() before sending');\n    }\n    try {\n      return this.xhr_.status;\n    } catch (e) {\n      return -1;\n    }\n  }\n  getResponse() {\n    if (!this.sent_) {\n      throw internalError('cannot .getResponse() before sending');\n    }\n    return this.xhr_.response;\n  }\n  getErrorText() {\n    if (!this.sent_) {\n      throw internalError('cannot .getErrorText() before sending');\n    }\n    return this.xhr_.statusText;\n  }\n  /** Aborts the request. */\n  abort() {\n    this.xhr_.abort();\n  }\n  getResponseHeader(header) {\n    return this.xhr_.getResponseHeader(header);\n  }\n  addUploadProgressListener(listener) {\n    if (this.xhr_.upload != null) {\n      this.xhr_.upload.addEventListener('progress', listener);\n    }\n  }\n  removeUploadProgressListener(listener) {\n    if (this.xhr_.upload != null) {\n      this.xhr_.upload.removeEventListener('progress', listener);\n    }\n  }\n}\nclass XhrTextConnection extends XhrConnection {\n  initXhr() {\n    this.xhr_.responseType = 'text';\n  }\n}\nfunction newTextConnection() {\n  return textFactoryOverride ? textFactoryOverride() : new XhrTextConnection();\n}\nclass XhrBytesConnection extends XhrConnection {\n  initXhr() {\n    this.xhr_.responseType = 'arraybuffer';\n  }\n}\nfunction newBytesConnection() {\n  return new XhrBytesConnection();\n}\nclass XhrBlobConnection extends XhrConnection {\n  initXhr() {\n    this.xhr_.responseType = 'blob';\n  }\n}\nfunction newBlobConnection() {\n  return new XhrBlobConnection();\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n/**\r\n * Represents a blob being uploaded. Can be used to pause/resume/cancel the\r\n * upload and manage callbacks for various events.\r\n * @internal\r\n */\nclass UploadTask {\n  /**\r\n   * @param ref - The firebaseStorage.Reference object this task came\r\n   *     from, untyped to avoid cyclic dependencies.\r\n   * @param blob - The blob to upload.\r\n   */\n  constructor(ref, blob, metadata = null) {\n    /**\r\n     * Number of bytes transferred so far.\r\n     */\n    this._transferred = 0;\n    this._needToFetchStatus = false;\n    this._needToFetchMetadata = false;\n    this._observers = [];\n    this._error = undefined;\n    this._uploadUrl = undefined;\n    this._request = undefined;\n    this._chunkMultiplier = 1;\n    this._resolve = undefined;\n    this._reject = undefined;\n    this._ref = ref;\n    this._blob = blob;\n    this._metadata = metadata;\n    this._mappings = getMappings();\n    this._resumable = this._shouldDoResumable(this._blob);\n    this._state = \"running\" /* InternalTaskState.RUNNING */;\n    this._errorHandler = error => {\n      this._request = undefined;\n      this._chunkMultiplier = 1;\n      if (error._codeEquals(StorageErrorCode.CANCELED)) {\n        this._needToFetchStatus = true;\n        this.completeTransitions_();\n      } else {\n        const backoffExpired = this.isExponentialBackoffExpired();\n        if (isRetryStatusCode(error.status, [])) {\n          if (backoffExpired) {\n            error = retryLimitExceeded();\n          } else {\n            this.sleepTime = Math.max(this.sleepTime * 2, DEFAULT_MIN_SLEEP_TIME_MILLIS);\n            this._needToFetchStatus = true;\n            this.completeTransitions_();\n            return;\n          }\n        }\n        this._error = error;\n        this._transition(\"error\" /* InternalTaskState.ERROR */);\n      }\n    };\n    this._metadataErrorHandler = error => {\n      this._request = undefined;\n      if (error._codeEquals(StorageErrorCode.CANCELED)) {\n        this.completeTransitions_();\n      } else {\n        this._error = error;\n        this._transition(\"error\" /* InternalTaskState.ERROR */);\n      }\n    };\n    this.sleepTime = 0;\n    this.maxSleepTime = this._ref.storage.maxUploadRetryTime;\n    this._promise = new Promise((resolve, reject) => {\n      this._resolve = resolve;\n      this._reject = reject;\n      this._start();\n    });\n    // Prevent uncaught rejections on the internal promise from bubbling out\n    // to the top level with a dummy handler.\n    this._promise.then(null, () => {});\n  }\n  isExponentialBackoffExpired() {\n    return this.sleepTime > this.maxSleepTime;\n  }\n  _makeProgressCallback() {\n    const sizeBefore = this._transferred;\n    return loaded => this._updateProgress(sizeBefore + loaded);\n  }\n  _shouldDoResumable(blob) {\n    return blob.size() > 256 * 1024;\n  }\n  _start() {\n    if (this._state !== \"running\" /* InternalTaskState.RUNNING */) {\n      // This can happen if someone pauses us in a resume callback, for example.\n      return;\n    }\n    if (this._request !== undefined) {\n      return;\n    }\n    if (this._resumable) {\n      if (this._uploadUrl === undefined) {\n        this._createResumable();\n      } else {\n        if (this._needToFetchStatus) {\n          this._fetchStatus();\n        } else {\n          if (this._needToFetchMetadata) {\n            // Happens if we miss the metadata on upload completion.\n            this._fetchMetadata();\n          } else {\n            this.pendingTimeout = setTimeout(() => {\n              this.pendingTimeout = undefined;\n              this._continueUpload();\n            }, this.sleepTime);\n          }\n        }\n      }\n    } else {\n      this._oneShotUpload();\n    }\n  }\n  _resolveToken(callback) {\n    // eslint-disable-next-line @typescript-eslint/no-floating-promises\n    Promise.all([this._ref.storage._getAuthToken(), this._ref.storage._getAppCheckToken()]).then(([authToken, appCheckToken]) => {\n      switch (this._state) {\n        case \"running\" /* InternalTaskState.RUNNING */:\n          callback(authToken, appCheckToken);\n          break;\n        case \"canceling\" /* InternalTaskState.CANCELING */:\n          this._transition(\"canceled\" /* InternalTaskState.CANCELED */);\n          break;\n        case \"pausing\" /* InternalTaskState.PAUSING */:\n          this._transition(\"paused\" /* InternalTaskState.PAUSED */);\n          break;\n      }\n    });\n  }\n  // TODO(andysoto): assert false\n  _createResumable() {\n    this._resolveToken((authToken, appCheckToken) => {\n      const requestInfo = createResumableUpload(this._ref.storage, this._ref._location, this._mappings, this._blob, this._metadata);\n      const createRequest = this._ref.storage._makeRequest(requestInfo, newTextConnection, authToken, appCheckToken);\n      this._request = createRequest;\n      createRequest.getPromise().then(url => {\n        this._request = undefined;\n        this._uploadUrl = url;\n        this._needToFetchStatus = false;\n        this.completeTransitions_();\n      }, this._errorHandler);\n    });\n  }\n  _fetchStatus() {\n    // TODO(andysoto): assert(this.uploadUrl_ !== null);\n    const url = this._uploadUrl;\n    this._resolveToken((authToken, appCheckToken) => {\n      const requestInfo = getResumableUploadStatus(this._ref.storage, this._ref._location, url, this._blob);\n      const statusRequest = this._ref.storage._makeRequest(requestInfo, newTextConnection, authToken, appCheckToken);\n      this._request = statusRequest;\n      statusRequest.getPromise().then(status => {\n        status = status;\n        this._request = undefined;\n        this._updateProgress(status.current);\n        this._needToFetchStatus = false;\n        if (status.finalized) {\n          this._needToFetchMetadata = true;\n        }\n        this.completeTransitions_();\n      }, this._errorHandler);\n    });\n  }\n  _continueUpload() {\n    const chunkSize = RESUMABLE_UPLOAD_CHUNK_SIZE * this._chunkMultiplier;\n    const status = new ResumableUploadStatus(this._transferred, this._blob.size());\n    // TODO(andysoto): assert(this.uploadUrl_ !== null);\n    const url = this._uploadUrl;\n    this._resolveToken((authToken, appCheckToken) => {\n      let requestInfo;\n      try {\n        requestInfo = continueResumableUpload(this._ref._location, this._ref.storage, url, this._blob, chunkSize, this._mappings, status, this._makeProgressCallback());\n      } catch (e) {\n        this._error = e;\n        this._transition(\"error\" /* InternalTaskState.ERROR */);\n        return;\n      }\n      const uploadRequest = this._ref.storage._makeRequest(requestInfo, newTextConnection, authToken, appCheckToken, /*retry=*/false // Upload requests should not be retried as each retry should be preceded by another query request. Which is handled in this file.\n      );\n      this._request = uploadRequest;\n      uploadRequest.getPromise().then(newStatus => {\n        this._increaseMultiplier();\n        this._request = undefined;\n        this._updateProgress(newStatus.current);\n        if (newStatus.finalized) {\n          this._metadata = newStatus.metadata;\n          this._transition(\"success\" /* InternalTaskState.SUCCESS */);\n        } else {\n          this.completeTransitions_();\n        }\n      }, this._errorHandler);\n    });\n  }\n  _increaseMultiplier() {\n    const currentSize = RESUMABLE_UPLOAD_CHUNK_SIZE * this._chunkMultiplier;\n    // Max chunk size is 32M.\n    if (currentSize * 2 < 32 * 1024 * 1024) {\n      this._chunkMultiplier *= 2;\n    }\n  }\n  _fetchMetadata() {\n    this._resolveToken((authToken, appCheckToken) => {\n      const requestInfo = getMetadata$2(this._ref.storage, this._ref._location, this._mappings);\n      const metadataRequest = this._ref.storage._makeRequest(requestInfo, newTextConnection, authToken, appCheckToken);\n      this._request = metadataRequest;\n      metadataRequest.getPromise().then(metadata => {\n        this._request = undefined;\n        this._metadata = metadata;\n        this._transition(\"success\" /* InternalTaskState.SUCCESS */);\n      }, this._metadataErrorHandler);\n    });\n  }\n  _oneShotUpload() {\n    this._resolveToken((authToken, appCheckToken) => {\n      const requestInfo = multipartUpload(this._ref.storage, this._ref._location, this._mappings, this._blob, this._metadata);\n      const multipartRequest = this._ref.storage._makeRequest(requestInfo, newTextConnection, authToken, appCheckToken);\n      this._request = multipartRequest;\n      multipartRequest.getPromise().then(metadata => {\n        this._request = undefined;\n        this._metadata = metadata;\n        this._updateProgress(this._blob.size());\n        this._transition(\"success\" /* InternalTaskState.SUCCESS */);\n      }, this._errorHandler);\n    });\n  }\n  _updateProgress(transferred) {\n    const old = this._transferred;\n    this._transferred = transferred;\n    // A progress update can make the \"transferred\" value smaller (e.g. a\n    // partial upload not completed by server, after which the \"transferred\"\n    // value may reset to the value at the beginning of the request).\n    if (this._transferred !== old) {\n      this._notifyObservers();\n    }\n  }\n  _transition(state) {\n    if (this._state === state) {\n      return;\n    }\n    switch (state) {\n      case \"canceling\" /* InternalTaskState.CANCELING */:\n      case \"pausing\" /* InternalTaskState.PAUSING */:\n        // TODO(andysoto):\n        // assert(this.state_ === InternalTaskState.RUNNING ||\n        //        this.state_ === InternalTaskState.PAUSING);\n        this._state = state;\n        if (this._request !== undefined) {\n          this._request.cancel();\n        } else if (this.pendingTimeout) {\n          clearTimeout(this.pendingTimeout);\n          this.pendingTimeout = undefined;\n          this.completeTransitions_();\n        }\n        break;\n      case \"running\" /* InternalTaskState.RUNNING */:\n        // TODO(andysoto):\n        // assert(this.state_ === InternalTaskState.PAUSED ||\n        //        this.state_ === InternalTaskState.PAUSING);\n        const wasPaused = this._state === \"paused\" /* InternalTaskState.PAUSED */;\n        this._state = state;\n        if (wasPaused) {\n          this._notifyObservers();\n          this._start();\n        }\n        break;\n      case \"paused\" /* InternalTaskState.PAUSED */:\n        // TODO(andysoto):\n        // assert(this.state_ === InternalTaskState.PAUSING);\n        this._state = state;\n        this._notifyObservers();\n        break;\n      case \"canceled\" /* InternalTaskState.CANCELED */:\n        // TODO(andysoto):\n        // assert(this.state_ === InternalTaskState.PAUSED ||\n        //        this.state_ === InternalTaskState.CANCELING);\n        this._error = canceled();\n        this._state = state;\n        this._notifyObservers();\n        break;\n      case \"error\" /* InternalTaskState.ERROR */:\n        // TODO(andysoto):\n        // assert(this.state_ === InternalTaskState.RUNNING ||\n        //        this.state_ === InternalTaskState.PAUSING ||\n        //        this.state_ === InternalTaskState.CANCELING);\n        this._state = state;\n        this._notifyObservers();\n        break;\n      case \"success\" /* InternalTaskState.SUCCESS */:\n        // TODO(andysoto):\n        // assert(this.state_ === InternalTaskState.RUNNING ||\n        //        this.state_ === InternalTaskState.PAUSING ||\n        //        this.state_ === InternalTaskState.CANCELING);\n        this._state = state;\n        this._notifyObservers();\n        break;\n    }\n  }\n  completeTransitions_() {\n    switch (this._state) {\n      case \"pausing\" /* InternalTaskState.PAUSING */:\n        this._transition(\"paused\" /* InternalTaskState.PAUSED */);\n        break;\n      case \"canceling\" /* InternalTaskState.CANCELING */:\n        this._transition(\"canceled\" /* InternalTaskState.CANCELED */);\n        break;\n      case \"running\" /* InternalTaskState.RUNNING */:\n        this._start();\n        break;\n    }\n  }\n  /**\r\n   * A snapshot of the current task state.\r\n   */\n  get snapshot() {\n    const externalState = taskStateFromInternalTaskState(this._state);\n    return {\n      bytesTransferred: this._transferred,\n      totalBytes: this._blob.size(),\n      state: externalState,\n      metadata: this._metadata,\n      task: this,\n      ref: this._ref\n    };\n  }\n  /**\r\n   * Adds a callback for an event.\r\n   * @param type - The type of event to listen for.\r\n   * @param nextOrObserver -\r\n   *     The `next` function, which gets called for each item in\r\n   *     the event stream, or an observer object with some or all of these three\r\n   *     properties (`next`, `error`, `complete`).\r\n   * @param error - A function that gets called with a `StorageError`\r\n   *     if the event stream ends due to an error.\r\n   * @param completed - A function that gets called if the\r\n   *     event stream ends normally.\r\n   * @returns\r\n   *     If only the event argument is passed, returns a function you can use to\r\n   *     add callbacks (see the examples above). If more than just the event\r\n   *     argument is passed, returns a function you can call to unregister the\r\n   *     callbacks.\r\n   */\n  on(type, nextOrObserver, error, completed) {\n    // Note: `type` isn't being used. Its type is also incorrect. TaskEvent should not be a string.\n    const observer = new Observer(nextOrObserver || undefined, error || undefined, completed || undefined);\n    this._addObserver(observer);\n    return () => {\n      this._removeObserver(observer);\n    };\n  }\n  /**\r\n   * This object behaves like a Promise, and resolves with its snapshot data\r\n   * when the upload completes.\r\n   * @param onFulfilled - The fulfillment callback. Promise chaining works as normal.\r\n   * @param onRejected - The rejection callback.\r\n   */\n  then(onFulfilled, onRejected) {\n    // These casts are needed so that TypeScript can infer the types of the\n    // resulting Promise.\n    return this._promise.then(onFulfilled, onRejected);\n  }\n  /**\r\n   * Equivalent to calling `then(null, onRejected)`.\r\n   */\n  catch(onRejected) {\n    return this.then(null, onRejected);\n  }\n  /**\r\n   * Adds the given observer.\r\n   */\n  _addObserver(observer) {\n    this._observers.push(observer);\n    this._notifyObserver(observer);\n  }\n  /**\r\n   * Removes the given observer.\r\n   */\n  _removeObserver(observer) {\n    const i = this._observers.indexOf(observer);\n    if (i !== -1) {\n      this._observers.splice(i, 1);\n    }\n  }\n  _notifyObservers() {\n    this._finishPromise();\n    const observers = this._observers.slice();\n    observers.forEach(observer => {\n      this._notifyObserver(observer);\n    });\n  }\n  _finishPromise() {\n    if (this._resolve !== undefined) {\n      let triggered = true;\n      switch (taskStateFromInternalTaskState(this._state)) {\n        case TaskState.SUCCESS:\n          async(this._resolve.bind(null, this.snapshot))();\n          break;\n        case TaskState.CANCELED:\n        case TaskState.ERROR:\n          const toCall = this._reject;\n          async(toCall.bind(null, this._error))();\n          break;\n        default:\n          triggered = false;\n          break;\n      }\n      if (triggered) {\n        this._resolve = undefined;\n        this._reject = undefined;\n      }\n    }\n  }\n  _notifyObserver(observer) {\n    const externalState = taskStateFromInternalTaskState(this._state);\n    switch (externalState) {\n      case TaskState.RUNNING:\n      case TaskState.PAUSED:\n        if (observer.next) {\n          async(observer.next.bind(observer, this.snapshot))();\n        }\n        break;\n      case TaskState.SUCCESS:\n        if (observer.complete) {\n          async(observer.complete.bind(observer))();\n        }\n        break;\n      case TaskState.CANCELED:\n      case TaskState.ERROR:\n        if (observer.error) {\n          async(observer.error.bind(observer, this._error))();\n        }\n        break;\n      default:\n        // TODO(andysoto): assert(false);\n        if (observer.error) {\n          async(observer.error.bind(observer, this._error))();\n        }\n    }\n  }\n  /**\r\n   * Resumes a paused task. Has no effect on a currently running or failed task.\r\n   * @returns True if the operation took effect, false if ignored.\r\n   */\n  resume() {\n    const valid = this._state === \"paused\" /* InternalTaskState.PAUSED */ || this._state === \"pausing\" /* InternalTaskState.PAUSING */;\n    if (valid) {\n      this._transition(\"running\" /* InternalTaskState.RUNNING */);\n    }\n    return valid;\n  }\n  /**\r\n   * Pauses a currently running task. Has no effect on a paused or failed task.\r\n   * @returns True if the operation took effect, false if ignored.\r\n   */\n  pause() {\n    const valid = this._state === \"running\" /* InternalTaskState.RUNNING */;\n    if (valid) {\n      this._transition(\"pausing\" /* InternalTaskState.PAUSING */);\n    }\n    return valid;\n  }\n  /**\r\n   * Cancels a currently running or paused task. Has no effect on a complete or\r\n   * failed task.\r\n   * @returns True if the operation took effect, false if ignored.\r\n   */\n  cancel() {\n    const valid = this._state === \"running\" /* InternalTaskState.RUNNING */ || this._state === \"pausing\" /* InternalTaskState.PAUSING */;\n    if (valid) {\n      this._transition(\"canceling\" /* InternalTaskState.CANCELING */);\n    }\n    return valid;\n  }\n}\n\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n/**\r\n * Provides methods to interact with a bucket in the Firebase Storage service.\r\n * @internal\r\n * @param _location - An fbs.location, or the URL at\r\n *     which to base this object, in one of the following forms:\r\n *         gs://<bucket>/<object-path>\r\n *         http[s]://firebasestorage.googleapis.com/\r\n *                     <api-version>/b/<bucket>/o/<object-path>\r\n *     Any query or fragment strings will be ignored in the http[s]\r\n *     format. If no value is passed, the storage object will use a URL based on\r\n *     the project ID of the base firebase.App instance.\r\n */\nclass Reference {\n  constructor(_service, location) {\n    this._service = _service;\n    if (location instanceof Location) {\n      this._location = location;\n    } else {\n      this._location = Location.makeFromUrl(location, _service.host);\n    }\n  }\n  /**\r\n   * Returns the URL for the bucket and path this object references,\r\n   *     in the form gs://<bucket>/<object-path>\r\n   * @override\r\n   */\n  toString() {\n    return 'gs://' + this._location.bucket + '/' + this._location.path;\n  }\n  _newRef(service, location) {\n    return new Reference(service, location);\n  }\n  /**\r\n   * A reference to the root of this object's bucket.\r\n   */\n  get root() {\n    const location = new Location(this._location.bucket, '');\n    return this._newRef(this._service, location);\n  }\n  /**\r\n   * The name of the bucket containing this reference's object.\r\n   */\n  get bucket() {\n    return this._location.bucket;\n  }\n  /**\r\n   * The full path of this object.\r\n   */\n  get fullPath() {\n    return this._location.path;\n  }\n  /**\r\n   * The short name of this object, which is the last component of the full path.\r\n   * For example, if fullPath is 'full/path/image.png', name is 'image.png'.\r\n   */\n  get name() {\n    return lastComponent(this._location.path);\n  }\n  /**\r\n   * The `StorageService` instance this `StorageReference` is associated with.\r\n   */\n  get storage() {\n    return this._service;\n  }\n  /**\r\n   * A `StorageReference` pointing to the parent location of this `StorageReference`, or null if\r\n   * this reference is the root.\r\n   */\n  get parent() {\n    const newPath = parent(this._location.path);\n    if (newPath === null) {\n      return null;\n    }\n    const location = new Location(this._location.bucket, newPath);\n    return new Reference(this._service, location);\n  }\n  /**\r\n   * Utility function to throw an error in methods that do not accept a root reference.\r\n   */\n  _throwIfRoot(name) {\n    if (this._location.path === '') {\n      throw invalidRootOperation(name);\n    }\n  }\n}\n/**\r\n * Download the bytes at the object's location.\r\n * @returns A Promise containing the downloaded bytes.\r\n */\nfunction getBytesInternal(ref, maxDownloadSizeBytes) {\n  ref._throwIfRoot('getBytes');\n  const requestInfo = getBytes$1(ref.storage, ref._location, maxDownloadSizeBytes);\n  return ref.storage.makeRequestWithTokens(requestInfo, newBytesConnection).then(bytes => maxDownloadSizeBytes !== undefined ?\n  // GCS may not honor the Range header for small files\n  bytes.slice(0, maxDownloadSizeBytes) : bytes);\n}\n/**\r\n * Download the bytes at the object's location.\r\n * @returns A Promise containing the downloaded blob.\r\n */\nfunction getBlobInternal(ref, maxDownloadSizeBytes) {\n  ref._throwIfRoot('getBlob');\n  const requestInfo = getBytes$1(ref.storage, ref._location, maxDownloadSizeBytes);\n  return ref.storage.makeRequestWithTokens(requestInfo, newBlobConnection).then(blob => maxDownloadSizeBytes !== undefined ?\n  // GCS may not honor the Range header for small files\n  blob.slice(0, maxDownloadSizeBytes) : blob);\n}\n/**\r\n * Uploads data to this object's location.\r\n * The upload is not resumable.\r\n *\r\n * @param ref - StorageReference where data should be uploaded.\r\n * @param data - The data to upload.\r\n * @param metadata - Metadata for the newly uploaded data.\r\n * @returns A Promise containing an UploadResult\r\n */\nfunction uploadBytes$1(ref, data, metadata) {\n  ref._throwIfRoot('uploadBytes');\n  const requestInfo = multipartUpload(ref.storage, ref._location, getMappings(), new FbsBlob(data, true), metadata);\n  return ref.storage.makeRequestWithTokens(requestInfo, newTextConnection).then(finalMetadata => {\n    return {\n      metadata: finalMetadata,\n      ref\n    };\n  });\n}\n/**\r\n * Uploads data to this object's location.\r\n * The upload can be paused and resumed, and exposes progress updates.\r\n * @public\r\n * @param ref - StorageReference where data should be uploaded.\r\n * @param data - The data to upload.\r\n * @param metadata - Metadata for the newly uploaded data.\r\n * @returns An UploadTask\r\n */\nfunction uploadBytesResumable$1(ref, data, metadata) {\n  ref._throwIfRoot('uploadBytesResumable');\n  return new UploadTask(ref, new FbsBlob(data), metadata);\n}\n/**\r\n * Uploads a string to this object's location.\r\n * The upload is not resumable.\r\n * @public\r\n * @param ref - StorageReference where string should be uploaded.\r\n * @param value - The string to upload.\r\n * @param format - The format of the string to upload.\r\n * @param metadata - Metadata for the newly uploaded string.\r\n * @returns A Promise containing an UploadResult\r\n */\nfunction uploadString$1(ref, value, format = StringFormat.RAW, metadata) {\n  ref._throwIfRoot('uploadString');\n  const data = dataFromString(format, value);\n  const metadataClone = Object.assign({}, metadata);\n  if (metadataClone['contentType'] == null && data.contentType != null) {\n    metadataClone['contentType'] = data.contentType;\n  }\n  return uploadBytes$1(ref, data.data, metadataClone);\n}\n/**\r\n * List all items (files) and prefixes (folders) under this storage reference.\r\n *\r\n * This is a helper method for calling list() repeatedly until there are\r\n * no more results. The default pagination size is 1000.\r\n *\r\n * Note: The results may not be consistent if objects are changed while this\r\n * operation is running.\r\n *\r\n * Warning: listAll may potentially consume too many resources if there are\r\n * too many results.\r\n * @public\r\n * @param ref - StorageReference to get list from.\r\n *\r\n * @returns A Promise that resolves with all the items and prefixes under\r\n *      the current storage reference. `prefixes` contains references to\r\n *      sub-directories and `items` contains references to objects in this\r\n *      folder. `nextPageToken` is never returned.\r\n */\nfunction listAll$1(ref) {\n  const accumulator = {\n    prefixes: [],\n    items: []\n  };\n  return listAllHelper(ref, accumulator).then(() => accumulator);\n}\n/**\r\n * Separated from listAll because async functions can't use \"arguments\".\r\n * @param ref\r\n * @param accumulator\r\n * @param pageToken\r\n */\nfunction listAllHelper(_x, _x2, _x3) {\n  return _listAllHelper.apply(this, arguments);\n}\n/**\r\n * List items (files) and prefixes (folders) under this storage reference.\r\n *\r\n * List API is only available for Firebase Rules Version 2.\r\n *\r\n * GCS is a key-blob store. Firebase Storage imposes the semantic of '/'\r\n * delimited folder structure.\r\n * Refer to GCS's List API if you want to learn more.\r\n *\r\n * To adhere to Firebase Rules's Semantics, Firebase Storage does not\r\n * support objects whose paths end with \"/\" or contain two consecutive\r\n * \"/\"s. Firebase Storage List API will filter these unsupported objects.\r\n * list() may fail if there are too many unsupported objects in the bucket.\r\n * @public\r\n *\r\n * @param ref - StorageReference to get list from.\r\n * @param options - See ListOptions for details.\r\n * @returns A Promise that resolves with the items and prefixes.\r\n *      `prefixes` contains references to sub-folders and `items`\r\n *      contains references to objects in this folder. `nextPageToken`\r\n *      can be used to get the rest of the results.\r\n */\nfunction _listAllHelper() {\n  _listAllHelper = _asyncToGenerator(function* (ref, accumulator, pageToken) {\n    const opt = {\n      // maxResults is 1000 by default.\n      pageToken\n    };\n    const nextPage = yield list$1(ref, opt);\n    accumulator.prefixes.push(...nextPage.prefixes);\n    accumulator.items.push(...nextPage.items);\n    if (nextPage.nextPageToken != null) {\n      yield listAllHelper(ref, accumulator, nextPage.nextPageToken);\n    }\n  });\n  return _listAllHelper.apply(this, arguments);\n}\nfunction list$1(ref, options) {\n  if (options != null) {\n    if (typeof options.maxResults === 'number') {\n      validateNumber('options.maxResults', /* minValue= */1, /* maxValue= */1000, options.maxResults);\n    }\n  }\n  const op = options || {};\n  const requestInfo = list$2(ref.storage, ref._location, /*delimiter= */'/', op.pageToken, op.maxResults);\n  return ref.storage.makeRequestWithTokens(requestInfo, newTextConnection);\n}\n/**\r\n * A `Promise` that resolves with the metadata for this object. If this\r\n * object doesn't exist or metadata cannot be retreived, the promise is\r\n * rejected.\r\n * @public\r\n * @param ref - StorageReference to get metadata from.\r\n */\nfunction getMetadata$1(ref) {\n  ref._throwIfRoot('getMetadata');\n  const requestInfo = getMetadata$2(ref.storage, ref._location, getMappings());\n  return ref.storage.makeRequestWithTokens(requestInfo, newTextConnection);\n}\n/**\r\n * Updates the metadata for this object.\r\n * @public\r\n * @param ref - StorageReference to update metadata for.\r\n * @param metadata - The new metadata for the object.\r\n *     Only values that have been explicitly set will be changed. Explicitly\r\n *     setting a value to null will remove the metadata.\r\n * @returns A `Promise` that resolves\r\n *     with the new metadata for this object.\r\n *     See `firebaseStorage.Reference.prototype.getMetadata`\r\n */\nfunction updateMetadata$1(ref, metadata) {\n  ref._throwIfRoot('updateMetadata');\n  const requestInfo = updateMetadata$2(ref.storage, ref._location, metadata, getMappings());\n  return ref.storage.makeRequestWithTokens(requestInfo, newTextConnection);\n}\n/**\r\n * Returns the download URL for the given Reference.\r\n * @public\r\n * @returns A `Promise` that resolves with the download\r\n *     URL for this object.\r\n */\nfunction getDownloadURL$1(ref) {\n  ref._throwIfRoot('getDownloadURL');\n  const requestInfo = getDownloadUrl(ref.storage, ref._location, getMappings());\n  return ref.storage.makeRequestWithTokens(requestInfo, newTextConnection).then(url => {\n    if (url === null) {\n      throw noDownloadURL();\n    }\n    return url;\n  });\n}\n/**\r\n * Deletes the object at this location.\r\n * @public\r\n * @param ref - StorageReference for object to delete.\r\n * @returns A `Promise` that resolves if the deletion succeeds.\r\n */\nfunction deleteObject$1(ref) {\n  ref._throwIfRoot('deleteObject');\n  const requestInfo = deleteObject$2(ref.storage, ref._location);\n  return ref.storage.makeRequestWithTokens(requestInfo, newTextConnection);\n}\n/**\r\n * Returns reference for object obtained by appending `childPath` to `ref`.\r\n *\r\n * @param ref - StorageReference to get child of.\r\n * @param childPath - Child path from provided ref.\r\n * @returns A reference to the object obtained by\r\n * appending childPath, removing any duplicate, beginning, or trailing\r\n * slashes.\r\n *\r\n */\nfunction _getChild$1(ref, childPath) {\n  const newPath = child(ref._location.path, childPath);\n  const location = new Location(ref._location.bucket, newPath);\n  return new Reference(ref.storage, location);\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\nfunction isUrl(path) {\n  return /^[A-Za-z]+:\\/\\//.test(path);\n}\n/**\r\n * Returns a firebaseStorage.Reference for the given url.\r\n */\nfunction refFromURL(service, url) {\n  return new Reference(service, url);\n}\n/**\r\n * Returns a firebaseStorage.Reference for the given path in the default\r\n * bucket.\r\n */\nfunction refFromPath(ref, path) {\n  if (ref instanceof FirebaseStorageImpl) {\n    const service = ref;\n    if (service._bucket == null) {\n      throw noDefaultBucket();\n    }\n    const reference = new Reference(service, service._bucket);\n    if (path != null) {\n      return refFromPath(reference, path);\n    } else {\n      return reference;\n    }\n  } else {\n    // ref is a Reference\n    if (path !== undefined) {\n      return _getChild$1(ref, path);\n    } else {\n      return ref;\n    }\n  }\n}\nfunction ref$1(serviceOrRef, pathOrUrl) {\n  if (pathOrUrl && isUrl(pathOrUrl)) {\n    if (serviceOrRef instanceof FirebaseStorageImpl) {\n      return refFromURL(serviceOrRef, pathOrUrl);\n    } else {\n      throw invalidArgument('To use ref(service, url), the first argument must be a Storage instance.');\n    }\n  } else {\n    return refFromPath(serviceOrRef, pathOrUrl);\n  }\n}\nfunction extractBucket(host, config) {\n  const bucketString = config === null || config === void 0 ? void 0 : config[CONFIG_STORAGE_BUCKET_KEY];\n  if (bucketString == null) {\n    return null;\n  }\n  return Location.makeFromBucketSpec(bucketString, host);\n}\nfunction connectStorageEmulator$1(storage, host, port, options = {}) {\n  storage.host = `${host}:${port}`;\n  storage._protocol = 'http';\n  const {\n    mockUserToken\n  } = options;\n  if (mockUserToken) {\n    storage._overrideAuthToken = typeof mockUserToken === 'string' ? mockUserToken : createMockUserToken(mockUserToken, storage.app.options.projectId);\n  }\n}\n/**\r\n * A service that provides Firebase Storage Reference instances.\r\n * @param opt_url - gs:// url to a custom Storage Bucket\r\n *\r\n * @internal\r\n */\nclass FirebaseStorageImpl {\n  constructor(\n  /**\r\n   * FirebaseApp associated with this StorageService instance.\r\n   */\n  app, _authProvider,\n  /**\r\n   * @internal\r\n   */\n  _appCheckProvider,\n  /**\r\n   * @internal\r\n   */\n  _url, _firebaseVersion) {\n    this.app = app;\n    this._authProvider = _authProvider;\n    this._appCheckProvider = _appCheckProvider;\n    this._url = _url;\n    this._firebaseVersion = _firebaseVersion;\n    this._bucket = null;\n    /**\r\n     * This string can be in the formats:\r\n     * - host\r\n     * - host:port\r\n     */\n    this._host = DEFAULT_HOST;\n    this._protocol = 'https';\n    this._appId = null;\n    this._deleted = false;\n    this._maxOperationRetryTime = DEFAULT_MAX_OPERATION_RETRY_TIME;\n    this._maxUploadRetryTime = DEFAULT_MAX_UPLOAD_RETRY_TIME;\n    this._requests = new Set();\n    if (_url != null) {\n      this._bucket = Location.makeFromBucketSpec(_url, this._host);\n    } else {\n      this._bucket = extractBucket(this._host, this.app.options);\n    }\n  }\n  /**\r\n   * The host string for this service, in the form of `host` or\r\n   * `host:port`.\r\n   */\n  get host() {\n    return this._host;\n  }\n  set host(host) {\n    this._host = host;\n    if (this._url != null) {\n      this._bucket = Location.makeFromBucketSpec(this._url, host);\n    } else {\n      this._bucket = extractBucket(host, this.app.options);\n    }\n  }\n  /**\r\n   * The maximum time to retry uploads in milliseconds.\r\n   */\n  get maxUploadRetryTime() {\n    return this._maxUploadRetryTime;\n  }\n  set maxUploadRetryTime(time) {\n    validateNumber('time', /* minValue=*/0, /* maxValue= */Number.POSITIVE_INFINITY, time);\n    this._maxUploadRetryTime = time;\n  }\n  /**\r\n   * The maximum time to retry operations other than uploads or downloads in\r\n   * milliseconds.\r\n   */\n  get maxOperationRetryTime() {\n    return this._maxOperationRetryTime;\n  }\n  set maxOperationRetryTime(time) {\n    validateNumber('time', /* minValue=*/0, /* maxValue= */Number.POSITIVE_INFINITY, time);\n    this._maxOperationRetryTime = time;\n  }\n  _getAuthToken() {\n    var _this = this;\n    return _asyncToGenerator(function* () {\n      if (_this._overrideAuthToken) {\n        return _this._overrideAuthToken;\n      }\n      const auth = _this._authProvider.getImmediate({\n        optional: true\n      });\n      if (auth) {\n        const tokenData = yield auth.getToken();\n        if (tokenData !== null) {\n          return tokenData.accessToken;\n        }\n      }\n      return null;\n    })();\n  }\n  _getAppCheckToken() {\n    var _this2 = this;\n    return _asyncToGenerator(function* () {\n      const appCheck = _this2._appCheckProvider.getImmediate({\n        optional: true\n      });\n      if (appCheck) {\n        const result = yield appCheck.getToken();\n        // TODO: What do we want to do if there is an error getting the token?\n        // Context: appCheck.getToken() will never throw even if an error happened. In the error case, a dummy token will be\n        // returned along with an error field describing the error. In general, we shouldn't care about the error condition and just use\n        // the token (actual or dummy) to send requests.\n        return result.token;\n      }\n      return null;\n    })();\n  }\n  /**\r\n   * Stop running requests and prevent more from being created.\r\n   */\n  _delete() {\n    if (!this._deleted) {\n      this._deleted = true;\n      this._requests.forEach(request => request.cancel());\n      this._requests.clear();\n    }\n    return Promise.resolve();\n  }\n  /**\r\n   * Returns a new firebaseStorage.Reference object referencing this StorageService\r\n   * at the given Location.\r\n   */\n  _makeStorageReference(loc) {\n    return new Reference(this, loc);\n  }\n  /**\r\n   * @param requestInfo - HTTP RequestInfo object\r\n   * @param authToken - Firebase auth token\r\n   */\n  _makeRequest(requestInfo, requestFactory, authToken, appCheckToken, retry = true) {\n    if (!this._deleted) {\n      const request = makeRequest(requestInfo, this._appId, authToken, appCheckToken, requestFactory, this._firebaseVersion, retry);\n      this._requests.add(request);\n      // Request removes itself from set when complete.\n      request.getPromise().then(() => this._requests.delete(request), () => this._requests.delete(request));\n      return request;\n    } else {\n      return new FailRequest(appDeleted());\n    }\n  }\n  makeRequestWithTokens(requestInfo, requestFactory) {\n    var _this3 = this;\n    return _asyncToGenerator(function* () {\n      const [authToken, appCheckToken] = yield Promise.all([_this3._getAuthToken(), _this3._getAppCheckToken()]);\n      return _this3._makeRequest(requestInfo, requestFactory, authToken, appCheckToken).getPromise();\n    })();\n  }\n}\nconst name = \"@firebase/storage\";\nconst version = \"0.12.1\";\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n/**\r\n * Type constant for Firebase Storage.\r\n */\nconst STORAGE_TYPE = 'storage';\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n/**\r\n * Downloads the data at the object's location. Returns an error if the object\r\n * is not found.\r\n *\r\n * To use this functionality, you have to whitelist your app's origin in your\r\n * Cloud Storage bucket. See also\r\n * https://cloud.google.com/storage/docs/configuring-cors\r\n *\r\n * @public\r\n * @param ref - StorageReference where data should be downloaded.\r\n * @param maxDownloadSizeBytes - If set, the maximum allowed size in bytes to\r\n * retrieve.\r\n * @returns A Promise containing the object's bytes\r\n */\nfunction getBytes(ref, maxDownloadSizeBytes) {\n  ref = getModularInstance(ref);\n  return getBytesInternal(ref, maxDownloadSizeBytes);\n}\n/**\r\n * Uploads data to this object's location.\r\n * The upload is not resumable.\r\n * @public\r\n * @param ref - {@link StorageReference} where data should be uploaded.\r\n * @param data - The data to upload.\r\n * @param metadata - Metadata for the data to upload.\r\n * @returns A Promise containing an UploadResult\r\n */\nfunction uploadBytes(ref, data, metadata) {\n  ref = getModularInstance(ref);\n  return uploadBytes$1(ref, data, metadata);\n}\n/**\r\n * Uploads a string to this object's location.\r\n * The upload is not resumable.\r\n * @public\r\n * @param ref - {@link StorageReference} where string should be uploaded.\r\n * @param value - The string to upload.\r\n * @param format - The format of the string to upload.\r\n * @param metadata - Metadata for the string to upload.\r\n * @returns A Promise containing an UploadResult\r\n */\nfunction uploadString(ref, value, format, metadata) {\n  ref = getModularInstance(ref);\n  return uploadString$1(ref, value, format, metadata);\n}\n/**\r\n * Uploads data to this object's location.\r\n * The upload can be paused and resumed, and exposes progress updates.\r\n * @public\r\n * @param ref - {@link StorageReference} where data should be uploaded.\r\n * @param data - The data to upload.\r\n * @param metadata - Metadata for the data to upload.\r\n * @returns An UploadTask\r\n */\nfunction uploadBytesResumable(ref, data, metadata) {\n  ref = getModularInstance(ref);\n  return uploadBytesResumable$1(ref, data, metadata);\n}\n/**\r\n * A `Promise` that resolves with the metadata for this object. If this\r\n * object doesn't exist or metadata cannot be retreived, the promise is\r\n * rejected.\r\n * @public\r\n * @param ref - {@link StorageReference} to get metadata from.\r\n */\nfunction getMetadata(ref) {\n  ref = getModularInstance(ref);\n  return getMetadata$1(ref);\n}\n/**\r\n * Updates the metadata for this object.\r\n * @public\r\n * @param ref - {@link StorageReference} to update metadata for.\r\n * @param metadata - The new metadata for the object.\r\n *     Only values that have been explicitly set will be changed. Explicitly\r\n *     setting a value to null will remove the metadata.\r\n * @returns A `Promise` that resolves with the new metadata for this object.\r\n */\nfunction updateMetadata(ref, metadata) {\n  ref = getModularInstance(ref);\n  return updateMetadata$1(ref, metadata);\n}\n/**\r\n * List items (files) and prefixes (folders) under this storage reference.\r\n *\r\n * List API is only available for Firebase Rules Version 2.\r\n *\r\n * GCS is a key-blob store. Firebase Storage imposes the semantic of '/'\r\n * delimited folder structure.\r\n * Refer to GCS's List API if you want to learn more.\r\n *\r\n * To adhere to Firebase Rules's Semantics, Firebase Storage does not\r\n * support objects whose paths end with \"/\" or contain two consecutive\r\n * \"/\"s. Firebase Storage List API will filter these unsupported objects.\r\n * list() may fail if there are too many unsupported objects in the bucket.\r\n * @public\r\n *\r\n * @param ref - {@link StorageReference} to get list from.\r\n * @param options - See {@link ListOptions} for details.\r\n * @returns A `Promise` that resolves with the items and prefixes.\r\n *      `prefixes` contains references to sub-folders and `items`\r\n *      contains references to objects in this folder. `nextPageToken`\r\n *      can be used to get the rest of the results.\r\n */\nfunction list(ref, options) {\n  ref = getModularInstance(ref);\n  return list$1(ref, options);\n}\n/**\r\n * List all items (files) and prefixes (folders) under this storage reference.\r\n *\r\n * This is a helper method for calling list() repeatedly until there are\r\n * no more results. The default pagination size is 1000.\r\n *\r\n * Note: The results may not be consistent if objects are changed while this\r\n * operation is running.\r\n *\r\n * Warning: `listAll` may potentially consume too many resources if there are\r\n * too many results.\r\n * @public\r\n * @param ref - {@link StorageReference} to get list from.\r\n *\r\n * @returns A `Promise` that resolves with all the items and prefixes under\r\n *      the current storage reference. `prefixes` contains references to\r\n *      sub-directories and `items` contains references to objects in this\r\n *      folder. `nextPageToken` is never returned.\r\n */\nfunction listAll(ref) {\n  ref = getModularInstance(ref);\n  return listAll$1(ref);\n}\n/**\r\n * Returns the download URL for the given {@link StorageReference}.\r\n * @public\r\n * @param ref - {@link StorageReference} to get the download URL for.\r\n * @returns A `Promise` that resolves with the download\r\n *     URL for this object.\r\n */\nfunction getDownloadURL(ref) {\n  ref = getModularInstance(ref);\n  return getDownloadURL$1(ref);\n}\n/**\r\n * Deletes the object at this location.\r\n * @public\r\n * @param ref - {@link StorageReference} for object to delete.\r\n * @returns A `Promise` that resolves if the deletion succeeds.\r\n */\nfunction deleteObject(ref) {\n  ref = getModularInstance(ref);\n  return deleteObject$1(ref);\n}\nfunction ref(serviceOrRef, pathOrUrl) {\n  serviceOrRef = getModularInstance(serviceOrRef);\n  return ref$1(serviceOrRef, pathOrUrl);\n}\n/**\r\n * @internal\r\n */\nfunction _getChild(ref, childPath) {\n  return _getChild$1(ref, childPath);\n}\n/**\r\n * Gets a {@link FirebaseStorage} instance for the given Firebase app.\r\n * @public\r\n * @param app - Firebase app to get {@link FirebaseStorage} instance for.\r\n * @param bucketUrl - The gs:// url to your Firebase Storage Bucket.\r\n * If not passed, uses the app's default Storage Bucket.\r\n * @returns A {@link FirebaseStorage} instance.\r\n */\nfunction getStorage(app = getApp(), bucketUrl) {\n  app = getModularInstance(app);\n  const storageProvider = _getProvider(app, STORAGE_TYPE);\n  const storageInstance = storageProvider.getImmediate({\n    identifier: bucketUrl\n  });\n  const emulator = getDefaultEmulatorHostnameAndPort('storage');\n  if (emulator) {\n    connectStorageEmulator(storageInstance, ...emulator);\n  }\n  return storageInstance;\n}\n/**\r\n * Modify this {@link FirebaseStorage} instance to communicate with the Cloud Storage emulator.\r\n *\r\n * @param storage - The {@link FirebaseStorage} instance\r\n * @param host - The emulator host (ex: localhost)\r\n * @param port - The emulator port (ex: 5001)\r\n * @param options - Emulator options. `options.mockUserToken` is the mock auth\r\n * token to use for unit testing Security Rules.\r\n * @public\r\n */\nfunction connectStorageEmulator(storage, host, port, options = {}) {\n  connectStorageEmulator$1(storage, host, port, options);\n}\n\n/**\r\n * @license\r\n * Copyright 2021 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n/**\r\n * Downloads the data at the object's location. Returns an error if the object\r\n * is not found.\r\n *\r\n * To use this functionality, you have to whitelist your app's origin in your\r\n * Cloud Storage bucket. See also\r\n * https://cloud.google.com/storage/docs/configuring-cors\r\n *\r\n * This API is not available in Node.\r\n *\r\n * @public\r\n * @param ref - StorageReference where data should be downloaded.\r\n * @param maxDownloadSizeBytes - If set, the maximum allowed size in bytes to\r\n * retrieve.\r\n * @returns A Promise that resolves with a Blob containing the object's bytes\r\n */\nfunction getBlob(ref, maxDownloadSizeBytes) {\n  ref = getModularInstance(ref);\n  return getBlobInternal(ref, maxDownloadSizeBytes);\n}\n/**\r\n * Downloads the data at the object's location. Raises an error event if the\r\n * object is not found.\r\n *\r\n * This API is only available in Node.\r\n *\r\n * @public\r\n * @param ref - StorageReference where data should be downloaded.\r\n * @param maxDownloadSizeBytes - If set, the maximum allowed size in bytes to\r\n * retrieve.\r\n * @returns A stream with the object's data as bytes\r\n */\nfunction getStream(ref, maxDownloadSizeBytes) {\n  throw new Error('getStream() is only supported by NodeJS builds');\n}\n\n/**\r\n * Cloud Storage for Firebase\r\n *\r\n * @packageDocumentation\r\n */\nfunction factory(container, {\n  instanceIdentifier: url\n}) {\n  const app = container.getProvider('app').getImmediate();\n  const authProvider = container.getProvider('auth-internal');\n  const appCheckProvider = container.getProvider('app-check-internal');\n  return new FirebaseStorageImpl(app, authProvider, appCheckProvider, url, SDK_VERSION);\n}\nfunction registerStorage() {\n  _registerComponent(new Component(STORAGE_TYPE, factory, \"PUBLIC\" /* ComponentType.PUBLIC */).setMultipleInstances(true));\n  //RUNTIME_ENV will be replaced during the compilation to \"node\" for nodejs and an empty string for browser\n  registerVersion(name, version, '');\n  // BUILD_TARGET will be replaced by values like esm5, esm2017, cjs5, etc during the compilation\n  registerVersion(name, version, 'esm2017');\n}\nregisterStorage();\nexport { StorageError, StorageErrorCode, StringFormat, FbsBlob as _FbsBlob, Location as _Location, TaskEvent as _TaskEvent, TaskState as _TaskState, UploadTask as _UploadTask, dataFromString as _dataFromString, _getChild, invalidArgument as _invalidArgument, invalidRootOperation as _invalidRootOperation, connectStorageEmulator, deleteObject, getBlob, getBytes, getDownloadURL, getMetadata, getStorage, getStream, list, listAll, ref, updateMetadata, uploadBytes, uploadBytesResumable, uploadString };","map":{"version":3,"names":["_getProvider","getApp","_registerComponent","registerVersion","SDK_VERSION","FirebaseError","createMockUserToken","getModularInstance","getDefaultEmulatorHostnameAndPort","Component","DEFAULT_HOST","CONFIG_STORAGE_BUCKET_KEY","DEFAULT_MAX_OPERATION_RETRY_TIME","DEFAULT_MAX_UPLOAD_RETRY_TIME","DEFAULT_MIN_SLEEP_TIME_MILLIS","StorageError","constructor","code","message","status_","prependCode","customData","serverResponse","_baseMessage","Object","setPrototypeOf","prototype","status","_codeEquals","StorageErrorCode","unknown","UNKNOWN","objectNotFound","path","OBJECT_NOT_FOUND","quotaExceeded","bucket","QUOTA_EXCEEDED","unauthenticated","UNAUTHENTICATED","unauthorizedApp","UNAUTHORIZED_APP","unauthorized","UNAUTHORIZED","retryLimitExceeded","RETRY_LIMIT_EXCEEDED","canceled","CANCELED","invalidUrl","url","INVALID_URL","invalidDefaultBucket","INVALID_DEFAULT_BUCKET","noDefaultBucket","NO_DEFAULT_BUCKET","cannotSliceBlob","CANNOT_SLICE_BLOB","serverFileWrongSize","SERVER_FILE_WRONG_SIZE","noDownloadURL","NO_DOWNLOAD_URL","missingPolyFill","polyFill","UNSUPPORTED_ENVIRONMENT","invalidArgument","INVALID_ARGUMENT","appDeleted","APP_DELETED","invalidRootOperation","name","INVALID_ROOT_OPERATION","invalidFormat","format","INVALID_FORMAT","internalError","INTERNAL_ERROR","Location","path_","isRoot","length","fullServerUrl","encode","encodeURIComponent","bucketOnlyServerUrl","makeFromBucketSpec","bucketString","host","bucketLocation","makeFromUrl","e","location","bucketDomain","gsModify","loc","charAt","slice","gsPath","gsRegex","RegExp","gsIndices","httpModify","decodeURIComponent","version","firebaseStorageHost","replace","firebaseStoragePath","firebaseStorageRegExp","firebaseStorageIndices","cloudStorageHost","cloudStoragePath","cloudStorageRegExp","cloudStorageIndices","groups","regex","indices","postModify","i","group","captures","exec","bucketValue","pathValue","FailRequest","error","promise_","Promise","reject","getPromise","cancel","_appDelete","start","doRequest","backoffCompleteCb","timeout","waitSeconds","retryTimeoutId","globalTimeoutId","hitTimeout","cancelState","triggeredCallback","triggerCallback","args","apply","callWithDelay","millis","setTimeout","responseHandler","clearGlobalTimeout","clearTimeout","success","call","mustStop","waitMillis","Math","random","stopped","stop","wasTimeout","id","isJustDef","p","isFunction","isNonArrayObject","Array","isArray","isString","String","isNativeBlob","isNativeBlobDefined","Blob","validateNumber","argument","minValue","maxValue","value","makeUrl","urlPart","protocol","origin","makeQueryString","params","queryPart","key","hasOwnProperty","nextPart","ErrorCode","isRetryStatusCode","additionalRetryCodes","isFiveHundredCode","extraRetryCodes","isExtraRetryCode","indexOf","isAdditionalRetryCode","NetworkRequest","url_","method_","headers_","body_","successCodes_","additionalRetryCodes_","callback_","errorCallback_","timeout_","progressCallback_","connectionFactory_","retry","pendingConnection_","backoffId_","canceled_","appDelete_","resolve","resolve_","reject_","start_","doTheRequest","backoffCallback","RequestEndStatus","connection","progressListener","progressEvent","loaded","total","lengthComputable","addUploadProgressListener","send","then","removeUploadProgressListener","hitServer","getErrorCode","NO_ERROR","getStatus","wasCanceled","ABORT","successCode","backoffDone","requestWentThrough","wasSuccessCode","result","getResponse","err","getErrorText","appDelete","abort","addAuthHeader_","headers","authToken","addVersionHeader_","firebaseVersion","addGmpidHeader_","appId","addAppCheckHeader_","appCheckToken","makeRequest","requestInfo","requestFactory","urlParams","assign","method","body","successCodes","handler","errorHandler","progressCallback","getBlobBuilder","BlobBuilder","WebKitBlobBuilder","undefined","getBlob$1","bb","append","getBlob","sliceBlob","blob","end","webkitSlice","mozSlice","decodeBase64","encoded","atob","StringFormat","RAW","BASE64","BASE64URL","DATA_URL","StringData","data","contentType","dataFromString","stringData","utf8Bytes_","base64Bytes_","dataURLBytes_","dataURLContentType_","b","c","charCodeAt","push","valid","hi","lo","Uint8Array","percentEncodedBytes_","decoded","hasMinus","hasUnder","invalidChar","hasPlus","hasSlash","bytes","includes","array","DataURLParts","dataURL","base64","matches","match","middle","endsWith","substring","rest","dataUrl","parts","s","longEnough","FbsBlob","elideCopy","size","blobType","data_","type","ArrayBuffer","byteLength","set","size_","type_","startByte","endByte","realBlob","sliced","buffer","blobby","map","val","uint8Arrays","finalLength","forEach","merged","index","uploadData","jsonObjectOrNull","obj","JSON","parse","parent","lastIndexOf","newPath","child","childPath","canonicalChildPath","split","filter","component","join","lastComponent","noXform_","metadata","Mapping","server","local","writable","xform","mappings_","xformPath","fullPath","getMappings","mappings","mappingsXformPath","_metadata","nameMapping","xformSize","Number","sizeMapping","addRef","service","generateRef","_makeStorageReference","defineProperty","get","fromResource","resource","len","mapping","fromResourceString","resourceString","downloadUrlFromResourceString","tokens","tokensList","urls","token","base","queryString","alt","toResourceString","stringify","PREFIXES_KEY","ITEMS_KEY","fromBackendResponse","listResult","prefixes","items","nextPageToken","pathWithoutTrailingSlash","reference","item","fromResponseString","RequestInfo","handlerCheck","cndn","metadataHandler","xhr","text","listHandler","downloadUrlHandler","_protocol","sharedErrorHandler","newErr","objectErrorHandler","shared","getMetadata$2","maxOperationRetryTime","list$2","delimiter","pageToken","maxResults","getBytes$1","maxDownloadSizeBytes","_","getDownloadUrl","updateMetadata$2","deleteObject$2","_xhr","_text","determineContentType_","metadataForUpload_","metadataClone","multipartUpload","genBoundary","str","toString","boundary","metadata_","metadataString","preBlobPart","postBlobPart","maxUploadRetryTime","ResumableUploadStatus","current","finalized","checkResumeHeader_","allowed","getResponseHeader","allowedStatus","createResumableUpload","metadataForUpload","getResumableUploadStatus","sizeString","isNaN","RESUMABLE_UPLOAD_CHUNK_SIZE","continueResumableUpload","chunkSize","bytesLeft","bytesToUpload","min","uploadCommand","uploadStatus","newCurrent","TaskEvent","STATE_CHANGED","TaskState","RUNNING","PAUSED","SUCCESS","ERROR","taskStateFromInternalTaskState","state","Observer","nextOrObserver","complete","asFunctions","next","observer","async","f","argsToForward","textFactoryOverride","XhrConnection","sent_","xhr_","XMLHttpRequest","initXhr","errorCode_","sendPromise_","addEventListener","NETWORK_ERROR","open","setRequestHeader","response","statusText","header","listener","upload","removeEventListener","XhrTextConnection","responseType","newTextConnection","XhrBytesConnection","newBytesConnection","XhrBlobConnection","newBlobConnection","UploadTask","ref","_transferred","_needToFetchStatus","_needToFetchMetadata","_observers","_error","_uploadUrl","_request","_chunkMultiplier","_resolve","_reject","_ref","_blob","_mappings","_resumable","_shouldDoResumable","_state","_errorHandler","completeTransitions_","backoffExpired","isExponentialBackoffExpired","sleepTime","max","_transition","_metadataErrorHandler","maxSleepTime","storage","_promise","_start","_makeProgressCallback","sizeBefore","_updateProgress","_createResumable","_fetchStatus","_fetchMetadata","pendingTimeout","_continueUpload","_oneShotUpload","_resolveToken","callback","all","_getAuthToken","_getAppCheckToken","_location","createRequest","_makeRequest","statusRequest","uploadRequest","newStatus","_increaseMultiplier","currentSize","metadataRequest","multipartRequest","transferred","old","_notifyObservers","wasPaused","snapshot","externalState","bytesTransferred","totalBytes","task","on","completed","_addObserver","_removeObserver","onFulfilled","onRejected","catch","_notifyObserver","splice","_finishPromise","observers","triggered","bind","toCall","resume","pause","Reference","_service","_newRef","root","_throwIfRoot","getBytesInternal","makeRequestWithTokens","getBlobInternal","uploadBytes$1","finalMetadata","uploadBytesResumable$1","uploadString$1","listAll$1","accumulator","listAllHelper","_x","_x2","_x3","_listAllHelper","arguments","_asyncToGenerator","opt","nextPage","list$1","options","op","getMetadata$1","updateMetadata$1","getDownloadURL$1","deleteObject$1","_getChild$1","isUrl","test","refFromURL","refFromPath","FirebaseStorageImpl","_bucket","ref$1","serviceOrRef","pathOrUrl","extractBucket","config","connectStorageEmulator$1","port","mockUserToken","_overrideAuthToken","app","projectId","_authProvider","_appCheckProvider","_url","_firebaseVersion","_host","_appId","_deleted","_maxOperationRetryTime","_maxUploadRetryTime","_requests","Set","time","POSITIVE_INFINITY","_this","auth","getImmediate","optional","tokenData","getToken","accessToken","_this2","appCheck","_delete","request","clear","add","delete","_this3","STORAGE_TYPE","getBytes","uploadBytes","uploadString","uploadBytesResumable","getMetadata","updateMetadata","list","listAll","getDownloadURL","deleteObject","_getChild","getStorage","bucketUrl","storageProvider","storageInstance","identifier","emulator","connectStorageEmulator","getStream","Error","factory","container","instanceIdentifier","getProvider","authProvider","appCheckProvider","registerStorage","setMultipleInstances","_FbsBlob","_Location","_TaskEvent","_TaskState","_UploadTask","_dataFromString","_invalidArgument","_invalidRootOperation"],"sources":["D:/documents/M1/Web Avancée/mean_beautysalon/Front_m1p11mean-Vanya-Liantsoa/node_modules/@firebase/storage/dist/index.esm2017.js"],"sourcesContent":["import { _getProvider, getApp, _registerComponent, registerVersion, SDK_VERSION } from '@firebase/app';\nimport { FirebaseError, createMockUserToken, getModularInstance, getDefaultEmulatorHostnameAndPort } from '@firebase/util';\nimport { Component } from '@firebase/component';\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * @fileoverview Constants used in the Firebase Storage library.\r\n */\r\n/**\r\n * Domain name for firebase storage.\r\n */\r\nconst DEFAULT_HOST = 'firebasestorage.googleapis.com';\r\n/**\r\n * The key in Firebase config json for the storage bucket.\r\n */\r\nconst CONFIG_STORAGE_BUCKET_KEY = 'storageBucket';\r\n/**\r\n * 2 minutes\r\n *\r\n * The timeout for all operations except upload.\r\n */\r\nconst DEFAULT_MAX_OPERATION_RETRY_TIME = 2 * 60 * 1000;\r\n/**\r\n * 10 minutes\r\n *\r\n * The timeout for upload.\r\n */\r\nconst DEFAULT_MAX_UPLOAD_RETRY_TIME = 10 * 60 * 1000;\r\n/**\r\n * 1 second\r\n */\r\nconst DEFAULT_MIN_SLEEP_TIME_MILLIS = 1000;\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * An error returned by the Firebase Storage SDK.\r\n * @public\r\n */\r\nclass StorageError extends FirebaseError {\r\n    /**\r\n     * @param code - A `StorageErrorCode` string to be prefixed with 'storage/' and\r\n     *  added to the end of the message.\r\n     * @param message  - Error message.\r\n     * @param status_ - Corresponding HTTP Status Code\r\n     */\r\n    constructor(code, message, status_ = 0) {\r\n        super(prependCode(code), `Firebase Storage: ${message} (${prependCode(code)})`);\r\n        this.status_ = status_;\r\n        /**\r\n         * Stores custom error data unique to the `StorageError`.\r\n         */\r\n        this.customData = { serverResponse: null };\r\n        this._baseMessage = this.message;\r\n        // Without this, `instanceof StorageError`, in tests for example,\r\n        // returns false.\r\n        Object.setPrototypeOf(this, StorageError.prototype);\r\n    }\r\n    get status() {\r\n        return this.status_;\r\n    }\r\n    set status(status) {\r\n        this.status_ = status;\r\n    }\r\n    /**\r\n     * Compares a `StorageErrorCode` against this error's code, filtering out the prefix.\r\n     */\r\n    _codeEquals(code) {\r\n        return prependCode(code) === this.code;\r\n    }\r\n    /**\r\n     * Optional response message that was added by the server.\r\n     */\r\n    get serverResponse() {\r\n        return this.customData.serverResponse;\r\n    }\r\n    set serverResponse(serverResponse) {\r\n        this.customData.serverResponse = serverResponse;\r\n        if (this.customData.serverResponse) {\r\n            this.message = `${this._baseMessage}\\n${this.customData.serverResponse}`;\r\n        }\r\n        else {\r\n            this.message = this._baseMessage;\r\n        }\r\n    }\r\n}\r\n/**\r\n * @public\r\n * Error codes that can be attached to `StorageError` objects.\r\n */\r\nvar StorageErrorCode;\r\n(function (StorageErrorCode) {\r\n    // Shared between all platforms\r\n    StorageErrorCode[\"UNKNOWN\"] = \"unknown\";\r\n    StorageErrorCode[\"OBJECT_NOT_FOUND\"] = \"object-not-found\";\r\n    StorageErrorCode[\"BUCKET_NOT_FOUND\"] = \"bucket-not-found\";\r\n    StorageErrorCode[\"PROJECT_NOT_FOUND\"] = \"project-not-found\";\r\n    StorageErrorCode[\"QUOTA_EXCEEDED\"] = \"quota-exceeded\";\r\n    StorageErrorCode[\"UNAUTHENTICATED\"] = \"unauthenticated\";\r\n    StorageErrorCode[\"UNAUTHORIZED\"] = \"unauthorized\";\r\n    StorageErrorCode[\"UNAUTHORIZED_APP\"] = \"unauthorized-app\";\r\n    StorageErrorCode[\"RETRY_LIMIT_EXCEEDED\"] = \"retry-limit-exceeded\";\r\n    StorageErrorCode[\"INVALID_CHECKSUM\"] = \"invalid-checksum\";\r\n    StorageErrorCode[\"CANCELED\"] = \"canceled\";\r\n    // JS specific\r\n    StorageErrorCode[\"INVALID_EVENT_NAME\"] = \"invalid-event-name\";\r\n    StorageErrorCode[\"INVALID_URL\"] = \"invalid-url\";\r\n    StorageErrorCode[\"INVALID_DEFAULT_BUCKET\"] = \"invalid-default-bucket\";\r\n    StorageErrorCode[\"NO_DEFAULT_BUCKET\"] = \"no-default-bucket\";\r\n    StorageErrorCode[\"CANNOT_SLICE_BLOB\"] = \"cannot-slice-blob\";\r\n    StorageErrorCode[\"SERVER_FILE_WRONG_SIZE\"] = \"server-file-wrong-size\";\r\n    StorageErrorCode[\"NO_DOWNLOAD_URL\"] = \"no-download-url\";\r\n    StorageErrorCode[\"INVALID_ARGUMENT\"] = \"invalid-argument\";\r\n    StorageErrorCode[\"INVALID_ARGUMENT_COUNT\"] = \"invalid-argument-count\";\r\n    StorageErrorCode[\"APP_DELETED\"] = \"app-deleted\";\r\n    StorageErrorCode[\"INVALID_ROOT_OPERATION\"] = \"invalid-root-operation\";\r\n    StorageErrorCode[\"INVALID_FORMAT\"] = \"invalid-format\";\r\n    StorageErrorCode[\"INTERNAL_ERROR\"] = \"internal-error\";\r\n    StorageErrorCode[\"UNSUPPORTED_ENVIRONMENT\"] = \"unsupported-environment\";\r\n})(StorageErrorCode || (StorageErrorCode = {}));\r\nfunction prependCode(code) {\r\n    return 'storage/' + code;\r\n}\r\nfunction unknown() {\r\n    const message = 'An unknown error occurred, please check the error payload for ' +\r\n        'server response.';\r\n    return new StorageError(StorageErrorCode.UNKNOWN, message);\r\n}\r\nfunction objectNotFound(path) {\r\n    return new StorageError(StorageErrorCode.OBJECT_NOT_FOUND, \"Object '\" + path + \"' does not exist.\");\r\n}\r\nfunction quotaExceeded(bucket) {\r\n    return new StorageError(StorageErrorCode.QUOTA_EXCEEDED, \"Quota for bucket '\" +\r\n        bucket +\r\n        \"' exceeded, please view quota on \" +\r\n        'https://firebase.google.com/pricing/.');\r\n}\r\nfunction unauthenticated() {\r\n    const message = 'User is not authenticated, please authenticate using Firebase ' +\r\n        'Authentication and try again.';\r\n    return new StorageError(StorageErrorCode.UNAUTHENTICATED, message);\r\n}\r\nfunction unauthorizedApp() {\r\n    return new StorageError(StorageErrorCode.UNAUTHORIZED_APP, 'This app does not have permission to access Firebase Storage on this project.');\r\n}\r\nfunction unauthorized(path) {\r\n    return new StorageError(StorageErrorCode.UNAUTHORIZED, \"User does not have permission to access '\" + path + \"'.\");\r\n}\r\nfunction retryLimitExceeded() {\r\n    return new StorageError(StorageErrorCode.RETRY_LIMIT_EXCEEDED, 'Max retry time for operation exceeded, please try again.');\r\n}\r\nfunction canceled() {\r\n    return new StorageError(StorageErrorCode.CANCELED, 'User canceled the upload/download.');\r\n}\r\nfunction invalidUrl(url) {\r\n    return new StorageError(StorageErrorCode.INVALID_URL, \"Invalid URL '\" + url + \"'.\");\r\n}\r\nfunction invalidDefaultBucket(bucket) {\r\n    return new StorageError(StorageErrorCode.INVALID_DEFAULT_BUCKET, \"Invalid default bucket '\" + bucket + \"'.\");\r\n}\r\nfunction noDefaultBucket() {\r\n    return new StorageError(StorageErrorCode.NO_DEFAULT_BUCKET, 'No default bucket ' +\r\n        \"found. Did you set the '\" +\r\n        CONFIG_STORAGE_BUCKET_KEY +\r\n        \"' property when initializing the app?\");\r\n}\r\nfunction cannotSliceBlob() {\r\n    return new StorageError(StorageErrorCode.CANNOT_SLICE_BLOB, 'Cannot slice blob for upload. Please retry the upload.');\r\n}\r\nfunction serverFileWrongSize() {\r\n    return new StorageError(StorageErrorCode.SERVER_FILE_WRONG_SIZE, 'Server recorded incorrect upload file size, please retry the upload.');\r\n}\r\nfunction noDownloadURL() {\r\n    return new StorageError(StorageErrorCode.NO_DOWNLOAD_URL, 'The given file does not have any download URLs.');\r\n}\r\nfunction missingPolyFill(polyFill) {\r\n    return new StorageError(StorageErrorCode.UNSUPPORTED_ENVIRONMENT, `${polyFill} is missing. Make sure to install the required polyfills. See https://firebase.google.com/docs/web/environments-js-sdk#polyfills for more information.`);\r\n}\r\n/**\r\n * @internal\r\n */\r\nfunction invalidArgument(message) {\r\n    return new StorageError(StorageErrorCode.INVALID_ARGUMENT, message);\r\n}\r\nfunction appDeleted() {\r\n    return new StorageError(StorageErrorCode.APP_DELETED, 'The Firebase app was deleted.');\r\n}\r\n/**\r\n * @param name - The name of the operation that was invalid.\r\n *\r\n * @internal\r\n */\r\nfunction invalidRootOperation(name) {\r\n    return new StorageError(StorageErrorCode.INVALID_ROOT_OPERATION, \"The operation '\" +\r\n        name +\r\n        \"' cannot be performed on a root reference, create a non-root \" +\r\n        \"reference using child, such as .child('file.png').\");\r\n}\r\n/**\r\n * @param format - The format that was not valid.\r\n * @param message - A message describing the format violation.\r\n */\r\nfunction invalidFormat(format, message) {\r\n    return new StorageError(StorageErrorCode.INVALID_FORMAT, \"String does not match format '\" + format + \"': \" + message);\r\n}\r\n/**\r\n * @param message - A message describing the internal error.\r\n */\r\nfunction internalError(message) {\r\n    throw new StorageError(StorageErrorCode.INTERNAL_ERROR, 'Internal error: ' + message);\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Firebase Storage location data.\r\n *\r\n * @internal\r\n */\r\nclass Location {\r\n    constructor(bucket, path) {\r\n        this.bucket = bucket;\r\n        this.path_ = path;\r\n    }\r\n    get path() {\r\n        return this.path_;\r\n    }\r\n    get isRoot() {\r\n        return this.path.length === 0;\r\n    }\r\n    fullServerUrl() {\r\n        const encode = encodeURIComponent;\r\n        return '/b/' + encode(this.bucket) + '/o/' + encode(this.path);\r\n    }\r\n    bucketOnlyServerUrl() {\r\n        const encode = encodeURIComponent;\r\n        return '/b/' + encode(this.bucket) + '/o';\r\n    }\r\n    static makeFromBucketSpec(bucketString, host) {\r\n        let bucketLocation;\r\n        try {\r\n            bucketLocation = Location.makeFromUrl(bucketString, host);\r\n        }\r\n        catch (e) {\r\n            // Not valid URL, use as-is. This lets you put bare bucket names in\r\n            // config.\r\n            return new Location(bucketString, '');\r\n        }\r\n        if (bucketLocation.path === '') {\r\n            return bucketLocation;\r\n        }\r\n        else {\r\n            throw invalidDefaultBucket(bucketString);\r\n        }\r\n    }\r\n    static makeFromUrl(url, host) {\r\n        let location = null;\r\n        const bucketDomain = '([A-Za-z0-9.\\\\-_]+)';\r\n        function gsModify(loc) {\r\n            if (loc.path.charAt(loc.path.length - 1) === '/') {\r\n                loc.path_ = loc.path_.slice(0, -1);\r\n            }\r\n        }\r\n        const gsPath = '(/(.*))?$';\r\n        const gsRegex = new RegExp('^gs://' + bucketDomain + gsPath, 'i');\r\n        const gsIndices = { bucket: 1, path: 3 };\r\n        function httpModify(loc) {\r\n            loc.path_ = decodeURIComponent(loc.path);\r\n        }\r\n        const version = 'v[A-Za-z0-9_]+';\r\n        const firebaseStorageHost = host.replace(/[.]/g, '\\\\.');\r\n        const firebaseStoragePath = '(/([^?#]*).*)?$';\r\n        const firebaseStorageRegExp = new RegExp(`^https?://${firebaseStorageHost}/${version}/b/${bucketDomain}/o${firebaseStoragePath}`, 'i');\r\n        const firebaseStorageIndices = { bucket: 1, path: 3 };\r\n        const cloudStorageHost = host === DEFAULT_HOST\r\n            ? '(?:storage.googleapis.com|storage.cloud.google.com)'\r\n            : host;\r\n        const cloudStoragePath = '([^?#]*)';\r\n        const cloudStorageRegExp = new RegExp(`^https?://${cloudStorageHost}/${bucketDomain}/${cloudStoragePath}`, 'i');\r\n        const cloudStorageIndices = { bucket: 1, path: 2 };\r\n        const groups = [\r\n            { regex: gsRegex, indices: gsIndices, postModify: gsModify },\r\n            {\r\n                regex: firebaseStorageRegExp,\r\n                indices: firebaseStorageIndices,\r\n                postModify: httpModify\r\n            },\r\n            {\r\n                regex: cloudStorageRegExp,\r\n                indices: cloudStorageIndices,\r\n                postModify: httpModify\r\n            }\r\n        ];\r\n        for (let i = 0; i < groups.length; i++) {\r\n            const group = groups[i];\r\n            const captures = group.regex.exec(url);\r\n            if (captures) {\r\n                const bucketValue = captures[group.indices.bucket];\r\n                let pathValue = captures[group.indices.path];\r\n                if (!pathValue) {\r\n                    pathValue = '';\r\n                }\r\n                location = new Location(bucketValue, pathValue);\r\n                group.postModify(location);\r\n                break;\r\n            }\r\n        }\r\n        if (location == null) {\r\n            throw invalidUrl(url);\r\n        }\r\n        return location;\r\n    }\r\n}\n\n/**\r\n * A request whose promise always fails.\r\n */\r\nclass FailRequest {\r\n    constructor(error) {\r\n        this.promise_ = Promise.reject(error);\r\n    }\r\n    /** @inheritDoc */\r\n    getPromise() {\r\n        return this.promise_;\r\n    }\r\n    /** @inheritDoc */\r\n    cancel(_appDelete = false) { }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Accepts a callback for an action to perform (`doRequest`),\r\n * and then a callback for when the backoff has completed (`backoffCompleteCb`).\r\n * The callback sent to start requires an argument to call (`onRequestComplete`).\r\n * When `start` calls `doRequest`, it passes a callback for when the request has\r\n * completed, `onRequestComplete`. Based on this, the backoff continues, with\r\n * another call to `doRequest` and the above loop continues until the timeout\r\n * is hit, or a successful response occurs.\r\n * @description\r\n * @param doRequest Callback to perform request\r\n * @param backoffCompleteCb Callback to call when backoff has been completed\r\n */\r\nfunction start(doRequest, \r\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\r\nbackoffCompleteCb, timeout) {\r\n    // TODO(andysoto): make this code cleaner (probably refactor into an actual\r\n    // type instead of a bunch of functions with state shared in the closure)\r\n    let waitSeconds = 1;\r\n    // Would type this as \"number\" but that doesn't work for Node so ¯\\_(ツ)_/¯\r\n    // TODO: find a way to exclude Node type definition for storage because storage only works in browser\r\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n    let retryTimeoutId = null;\r\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n    let globalTimeoutId = null;\r\n    let hitTimeout = false;\r\n    let cancelState = 0;\r\n    function canceled() {\r\n        return cancelState === 2;\r\n    }\r\n    let triggeredCallback = false;\r\n    function triggerCallback(...args) {\r\n        if (!triggeredCallback) {\r\n            triggeredCallback = true;\r\n            backoffCompleteCb.apply(null, args);\r\n        }\r\n    }\r\n    function callWithDelay(millis) {\r\n        retryTimeoutId = setTimeout(() => {\r\n            retryTimeoutId = null;\r\n            doRequest(responseHandler, canceled());\r\n        }, millis);\r\n    }\r\n    function clearGlobalTimeout() {\r\n        if (globalTimeoutId) {\r\n            clearTimeout(globalTimeoutId);\r\n        }\r\n    }\r\n    function responseHandler(success, ...args) {\r\n        if (triggeredCallback) {\r\n            clearGlobalTimeout();\r\n            return;\r\n        }\r\n        if (success) {\r\n            clearGlobalTimeout();\r\n            triggerCallback.call(null, success, ...args);\r\n            return;\r\n        }\r\n        const mustStop = canceled() || hitTimeout;\r\n        if (mustStop) {\r\n            clearGlobalTimeout();\r\n            triggerCallback.call(null, success, ...args);\r\n            return;\r\n        }\r\n        if (waitSeconds < 64) {\r\n            /* TODO(andysoto): don't back off so quickly if we know we're offline. */\r\n            waitSeconds *= 2;\r\n        }\r\n        let waitMillis;\r\n        if (cancelState === 1) {\r\n            cancelState = 2;\r\n            waitMillis = 0;\r\n        }\r\n        else {\r\n            waitMillis = (waitSeconds + Math.random()) * 1000;\r\n        }\r\n        callWithDelay(waitMillis);\r\n    }\r\n    let stopped = false;\r\n    function stop(wasTimeout) {\r\n        if (stopped) {\r\n            return;\r\n        }\r\n        stopped = true;\r\n        clearGlobalTimeout();\r\n        if (triggeredCallback) {\r\n            return;\r\n        }\r\n        if (retryTimeoutId !== null) {\r\n            if (!wasTimeout) {\r\n                cancelState = 2;\r\n            }\r\n            clearTimeout(retryTimeoutId);\r\n            callWithDelay(0);\r\n        }\r\n        else {\r\n            if (!wasTimeout) {\r\n                cancelState = 1;\r\n            }\r\n        }\r\n    }\r\n    callWithDelay(0);\r\n    globalTimeoutId = setTimeout(() => {\r\n        hitTimeout = true;\r\n        stop(true);\r\n    }, timeout);\r\n    return stop;\r\n}\r\n/**\r\n * Stops the retry loop from repeating.\r\n * If the function is currently \"in between\" retries, it is invoked immediately\r\n * with the second parameter as \"true\". Otherwise, it will be invoked once more\r\n * after the current invocation finishes iff the current invocation would have\r\n * triggered another retry.\r\n */\r\nfunction stop(id) {\r\n    id(false);\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nfunction isJustDef(p) {\r\n    return p !== void 0;\r\n}\r\n// eslint-disable-next-line @typescript-eslint/ban-types\r\nfunction isFunction(p) {\r\n    return typeof p === 'function';\r\n}\r\nfunction isNonArrayObject(p) {\r\n    return typeof p === 'object' && !Array.isArray(p);\r\n}\r\nfunction isString(p) {\r\n    return typeof p === 'string' || p instanceof String;\r\n}\r\nfunction isNativeBlob(p) {\r\n    return isNativeBlobDefined() && p instanceof Blob;\r\n}\r\nfunction isNativeBlobDefined() {\r\n    return typeof Blob !== 'undefined';\r\n}\r\nfunction validateNumber(argument, minValue, maxValue, value) {\r\n    if (value < minValue) {\r\n        throw invalidArgument(`Invalid value for '${argument}'. Expected ${minValue} or greater.`);\r\n    }\r\n    if (value > maxValue) {\r\n        throw invalidArgument(`Invalid value for '${argument}'. Expected ${maxValue} or less.`);\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nfunction makeUrl(urlPart, host, protocol) {\r\n    let origin = host;\r\n    if (protocol == null) {\r\n        origin = `https://${host}`;\r\n    }\r\n    return `${protocol}://${origin}/v0${urlPart}`;\r\n}\r\nfunction makeQueryString(params) {\r\n    const encode = encodeURIComponent;\r\n    let queryPart = '?';\r\n    for (const key in params) {\r\n        if (params.hasOwnProperty(key)) {\r\n            const nextPart = encode(key) + '=' + encode(params[key]);\r\n            queryPart = queryPart + nextPart + '&';\r\n        }\r\n    }\r\n    // Chop off the extra '&' or '?' on the end\r\n    queryPart = queryPart.slice(0, -1);\r\n    return queryPart;\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Error codes for requests made by the the XhrIo wrapper.\r\n */\r\nvar ErrorCode;\r\n(function (ErrorCode) {\r\n    ErrorCode[ErrorCode[\"NO_ERROR\"] = 0] = \"NO_ERROR\";\r\n    ErrorCode[ErrorCode[\"NETWORK_ERROR\"] = 1] = \"NETWORK_ERROR\";\r\n    ErrorCode[ErrorCode[\"ABORT\"] = 2] = \"ABORT\";\r\n})(ErrorCode || (ErrorCode = {}));\n\n/**\r\n * @license\r\n * Copyright 2022 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Checks the status code to see if the action should be retried.\r\n *\r\n * @param status Current HTTP status code returned by server.\r\n * @param additionalRetryCodes additional retry codes to check against\r\n */\r\nfunction isRetryStatusCode(status, additionalRetryCodes) {\r\n    // The codes for which to retry came from this page:\r\n    // https://cloud.google.com/storage/docs/exponential-backoff\r\n    const isFiveHundredCode = status >= 500 && status < 600;\r\n    const extraRetryCodes = [\r\n        // Request Timeout: web server didn't receive full request in time.\r\n        408,\r\n        // Too Many Requests: you're getting rate-limited, basically.\r\n        429\r\n    ];\r\n    const isExtraRetryCode = extraRetryCodes.indexOf(status) !== -1;\r\n    const isAdditionalRetryCode = additionalRetryCodes.indexOf(status) !== -1;\r\n    return isFiveHundredCode || isExtraRetryCode || isAdditionalRetryCode;\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Handles network logic for all Storage Requests, including error reporting and\r\n * retries with backoff.\r\n *\r\n * @param I - the type of the backend's network response.\r\n * @param - O the output type used by the rest of the SDK. The conversion\r\n * happens in the specified `callback_`.\r\n */\r\nclass NetworkRequest {\r\n    constructor(url_, method_, headers_, body_, successCodes_, additionalRetryCodes_, callback_, errorCallback_, timeout_, progressCallback_, connectionFactory_, retry = true) {\r\n        this.url_ = url_;\r\n        this.method_ = method_;\r\n        this.headers_ = headers_;\r\n        this.body_ = body_;\r\n        this.successCodes_ = successCodes_;\r\n        this.additionalRetryCodes_ = additionalRetryCodes_;\r\n        this.callback_ = callback_;\r\n        this.errorCallback_ = errorCallback_;\r\n        this.timeout_ = timeout_;\r\n        this.progressCallback_ = progressCallback_;\r\n        this.connectionFactory_ = connectionFactory_;\r\n        this.retry = retry;\r\n        this.pendingConnection_ = null;\r\n        this.backoffId_ = null;\r\n        this.canceled_ = false;\r\n        this.appDelete_ = false;\r\n        this.promise_ = new Promise((resolve, reject) => {\r\n            this.resolve_ = resolve;\r\n            this.reject_ = reject;\r\n            this.start_();\r\n        });\r\n    }\r\n    /**\r\n     * Actually starts the retry loop.\r\n     */\r\n    start_() {\r\n        const doTheRequest = (backoffCallback, canceled) => {\r\n            if (canceled) {\r\n                backoffCallback(false, new RequestEndStatus(false, null, true));\r\n                return;\r\n            }\r\n            const connection = this.connectionFactory_();\r\n            this.pendingConnection_ = connection;\r\n            const progressListener = progressEvent => {\r\n                const loaded = progressEvent.loaded;\r\n                const total = progressEvent.lengthComputable ? progressEvent.total : -1;\r\n                if (this.progressCallback_ !== null) {\r\n                    this.progressCallback_(loaded, total);\r\n                }\r\n            };\r\n            if (this.progressCallback_ !== null) {\r\n                connection.addUploadProgressListener(progressListener);\r\n            }\r\n            // connection.send() never rejects, so we don't need to have a error handler or use catch on the returned promise.\r\n            // eslint-disable-next-line @typescript-eslint/no-floating-promises\r\n            connection\r\n                .send(this.url_, this.method_, this.body_, this.headers_)\r\n                .then(() => {\r\n                if (this.progressCallback_ !== null) {\r\n                    connection.removeUploadProgressListener(progressListener);\r\n                }\r\n                this.pendingConnection_ = null;\r\n                const hitServer = connection.getErrorCode() === ErrorCode.NO_ERROR;\r\n                const status = connection.getStatus();\r\n                if (!hitServer ||\r\n                    (isRetryStatusCode(status, this.additionalRetryCodes_) &&\r\n                        this.retry)) {\r\n                    const wasCanceled = connection.getErrorCode() === ErrorCode.ABORT;\r\n                    backoffCallback(false, new RequestEndStatus(false, null, wasCanceled));\r\n                    return;\r\n                }\r\n                const successCode = this.successCodes_.indexOf(status) !== -1;\r\n                backoffCallback(true, new RequestEndStatus(successCode, connection));\r\n            });\r\n        };\r\n        /**\r\n         * @param requestWentThrough - True if the request eventually went\r\n         *     through, false if it hit the retry limit or was canceled.\r\n         */\r\n        const backoffDone = (requestWentThrough, status) => {\r\n            const resolve = this.resolve_;\r\n            const reject = this.reject_;\r\n            const connection = status.connection;\r\n            if (status.wasSuccessCode) {\r\n                try {\r\n                    const result = this.callback_(connection, connection.getResponse());\r\n                    if (isJustDef(result)) {\r\n                        resolve(result);\r\n                    }\r\n                    else {\r\n                        resolve();\r\n                    }\r\n                }\r\n                catch (e) {\r\n                    reject(e);\r\n                }\r\n            }\r\n            else {\r\n                if (connection !== null) {\r\n                    const err = unknown();\r\n                    err.serverResponse = connection.getErrorText();\r\n                    if (this.errorCallback_) {\r\n                        reject(this.errorCallback_(connection, err));\r\n                    }\r\n                    else {\r\n                        reject(err);\r\n                    }\r\n                }\r\n                else {\r\n                    if (status.canceled) {\r\n                        const err = this.appDelete_ ? appDeleted() : canceled();\r\n                        reject(err);\r\n                    }\r\n                    else {\r\n                        const err = retryLimitExceeded();\r\n                        reject(err);\r\n                    }\r\n                }\r\n            }\r\n        };\r\n        if (this.canceled_) {\r\n            backoffDone(false, new RequestEndStatus(false, null, true));\r\n        }\r\n        else {\r\n            this.backoffId_ = start(doTheRequest, backoffDone, this.timeout_);\r\n        }\r\n    }\r\n    /** @inheritDoc */\r\n    getPromise() {\r\n        return this.promise_;\r\n    }\r\n    /** @inheritDoc */\r\n    cancel(appDelete) {\r\n        this.canceled_ = true;\r\n        this.appDelete_ = appDelete || false;\r\n        if (this.backoffId_ !== null) {\r\n            stop(this.backoffId_);\r\n        }\r\n        if (this.pendingConnection_ !== null) {\r\n            this.pendingConnection_.abort();\r\n        }\r\n    }\r\n}\r\n/**\r\n * A collection of information about the result of a network request.\r\n * @param opt_canceled - Defaults to false.\r\n */\r\nclass RequestEndStatus {\r\n    constructor(wasSuccessCode, connection, canceled) {\r\n        this.wasSuccessCode = wasSuccessCode;\r\n        this.connection = connection;\r\n        this.canceled = !!canceled;\r\n    }\r\n}\r\nfunction addAuthHeader_(headers, authToken) {\r\n    if (authToken !== null && authToken.length > 0) {\r\n        headers['Authorization'] = 'Firebase ' + authToken;\r\n    }\r\n}\r\nfunction addVersionHeader_(headers, firebaseVersion) {\r\n    headers['X-Firebase-Storage-Version'] =\r\n        'webjs/' + (firebaseVersion !== null && firebaseVersion !== void 0 ? firebaseVersion : 'AppManager');\r\n}\r\nfunction addGmpidHeader_(headers, appId) {\r\n    if (appId) {\r\n        headers['X-Firebase-GMPID'] = appId;\r\n    }\r\n}\r\nfunction addAppCheckHeader_(headers, appCheckToken) {\r\n    if (appCheckToken !== null) {\r\n        headers['X-Firebase-AppCheck'] = appCheckToken;\r\n    }\r\n}\r\nfunction makeRequest(requestInfo, appId, authToken, appCheckToken, requestFactory, firebaseVersion, retry = true) {\r\n    const queryPart = makeQueryString(requestInfo.urlParams);\r\n    const url = requestInfo.url + queryPart;\r\n    const headers = Object.assign({}, requestInfo.headers);\r\n    addGmpidHeader_(headers, appId);\r\n    addAuthHeader_(headers, authToken);\r\n    addVersionHeader_(headers, firebaseVersion);\r\n    addAppCheckHeader_(headers, appCheckToken);\r\n    return new NetworkRequest(url, requestInfo.method, headers, requestInfo.body, requestInfo.successCodes, requestInfo.additionalRetryCodes, requestInfo.handler, requestInfo.errorHandler, requestInfo.timeout, requestInfo.progressCallback, requestFactory, retry);\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nfunction getBlobBuilder() {\r\n    if (typeof BlobBuilder !== 'undefined') {\r\n        return BlobBuilder;\r\n    }\r\n    else if (typeof WebKitBlobBuilder !== 'undefined') {\r\n        return WebKitBlobBuilder;\r\n    }\r\n    else {\r\n        return undefined;\r\n    }\r\n}\r\n/**\r\n * Concatenates one or more values together and converts them to a Blob.\r\n *\r\n * @param args The values that will make up the resulting blob.\r\n * @return The blob.\r\n */\r\nfunction getBlob$1(...args) {\r\n    const BlobBuilder = getBlobBuilder();\r\n    if (BlobBuilder !== undefined) {\r\n        const bb = new BlobBuilder();\r\n        for (let i = 0; i < args.length; i++) {\r\n            bb.append(args[i]);\r\n        }\r\n        return bb.getBlob();\r\n    }\r\n    else {\r\n        if (isNativeBlobDefined()) {\r\n            return new Blob(args);\r\n        }\r\n        else {\r\n            throw new StorageError(StorageErrorCode.UNSUPPORTED_ENVIRONMENT, \"This browser doesn't seem to support creating Blobs\");\r\n        }\r\n    }\r\n}\r\n/**\r\n * Slices the blob. The returned blob contains data from the start byte\r\n * (inclusive) till the end byte (exclusive). Negative indices cannot be used.\r\n *\r\n * @param blob The blob to be sliced.\r\n * @param start Index of the starting byte.\r\n * @param end Index of the ending byte.\r\n * @return The blob slice or null if not supported.\r\n */\r\nfunction sliceBlob(blob, start, end) {\r\n    if (blob.webkitSlice) {\r\n        return blob.webkitSlice(start, end);\r\n    }\r\n    else if (blob.mozSlice) {\r\n        return blob.mozSlice(start, end);\r\n    }\r\n    else if (blob.slice) {\r\n        return blob.slice(start, end);\r\n    }\r\n    return null;\r\n}\n\n/**\r\n * @license\r\n * Copyright 2021 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/** Converts a Base64 encoded string to a binary string. */\r\nfunction decodeBase64(encoded) {\r\n    if (typeof atob === 'undefined') {\r\n        throw missingPolyFill('base-64');\r\n    }\r\n    return atob(encoded);\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * An enumeration of the possible string formats for upload.\r\n * @public\r\n */\r\nconst StringFormat = {\r\n    /**\r\n     * Indicates the string should be interpreted \"raw\", that is, as normal text.\r\n     * The string will be interpreted as UTF-16, then uploaded as a UTF-8 byte\r\n     * sequence.\r\n     * Example: The string 'Hello! \\\\ud83d\\\\ude0a' becomes the byte sequence\r\n     * 48 65 6c 6c 6f 21 20 f0 9f 98 8a\r\n     */\r\n    RAW: 'raw',\r\n    /**\r\n     * Indicates the string should be interpreted as base64-encoded data.\r\n     * Padding characters (trailing '='s) are optional.\r\n     * Example: The string 'rWmO++E6t7/rlw==' becomes the byte sequence\r\n     * ad 69 8e fb e1 3a b7 bf eb 97\r\n     */\r\n    BASE64: 'base64',\r\n    /**\r\n     * Indicates the string should be interpreted as base64url-encoded data.\r\n     * Padding characters (trailing '='s) are optional.\r\n     * Example: The string 'rWmO--E6t7_rlw==' becomes the byte sequence\r\n     * ad 69 8e fb e1 3a b7 bf eb 97\r\n     */\r\n    BASE64URL: 'base64url',\r\n    /**\r\n     * Indicates the string is a data URL, such as one obtained from\r\n     * canvas.toDataURL().\r\n     * Example: the string 'data:application/octet-stream;base64,aaaa'\r\n     * becomes the byte sequence\r\n     * 69 a6 9a\r\n     * (the content-type \"application/octet-stream\" is also applied, but can\r\n     * be overridden in the metadata object).\r\n     */\r\n    DATA_URL: 'data_url'\r\n};\r\nclass StringData {\r\n    constructor(data, contentType) {\r\n        this.data = data;\r\n        this.contentType = contentType || null;\r\n    }\r\n}\r\n/**\r\n * @internal\r\n */\r\nfunction dataFromString(format, stringData) {\r\n    switch (format) {\r\n        case StringFormat.RAW:\r\n            return new StringData(utf8Bytes_(stringData));\r\n        case StringFormat.BASE64:\r\n        case StringFormat.BASE64URL:\r\n            return new StringData(base64Bytes_(format, stringData));\r\n        case StringFormat.DATA_URL:\r\n            return new StringData(dataURLBytes_(stringData), dataURLContentType_(stringData));\r\n        // do nothing\r\n    }\r\n    // assert(false);\r\n    throw unknown();\r\n}\r\nfunction utf8Bytes_(value) {\r\n    const b = [];\r\n    for (let i = 0; i < value.length; i++) {\r\n        let c = value.charCodeAt(i);\r\n        if (c <= 127) {\r\n            b.push(c);\r\n        }\r\n        else {\r\n            if (c <= 2047) {\r\n                b.push(192 | (c >> 6), 128 | (c & 63));\r\n            }\r\n            else {\r\n                if ((c & 64512) === 55296) {\r\n                    // The start of a surrogate pair.\r\n                    const valid = i < value.length - 1 && (value.charCodeAt(i + 1) & 64512) === 56320;\r\n                    if (!valid) {\r\n                        // The second surrogate wasn't there.\r\n                        b.push(239, 191, 189);\r\n                    }\r\n                    else {\r\n                        const hi = c;\r\n                        const lo = value.charCodeAt(++i);\r\n                        c = 65536 | ((hi & 1023) << 10) | (lo & 1023);\r\n                        b.push(240 | (c >> 18), 128 | ((c >> 12) & 63), 128 | ((c >> 6) & 63), 128 | (c & 63));\r\n                    }\r\n                }\r\n                else {\r\n                    if ((c & 64512) === 56320) {\r\n                        // Invalid low surrogate.\r\n                        b.push(239, 191, 189);\r\n                    }\r\n                    else {\r\n                        b.push(224 | (c >> 12), 128 | ((c >> 6) & 63), 128 | (c & 63));\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n    return new Uint8Array(b);\r\n}\r\nfunction percentEncodedBytes_(value) {\r\n    let decoded;\r\n    try {\r\n        decoded = decodeURIComponent(value);\r\n    }\r\n    catch (e) {\r\n        throw invalidFormat(StringFormat.DATA_URL, 'Malformed data URL.');\r\n    }\r\n    return utf8Bytes_(decoded);\r\n}\r\nfunction base64Bytes_(format, value) {\r\n    switch (format) {\r\n        case StringFormat.BASE64: {\r\n            const hasMinus = value.indexOf('-') !== -1;\r\n            const hasUnder = value.indexOf('_') !== -1;\r\n            if (hasMinus || hasUnder) {\r\n                const invalidChar = hasMinus ? '-' : '_';\r\n                throw invalidFormat(format, \"Invalid character '\" +\r\n                    invalidChar +\r\n                    \"' found: is it base64url encoded?\");\r\n            }\r\n            break;\r\n        }\r\n        case StringFormat.BASE64URL: {\r\n            const hasPlus = value.indexOf('+') !== -1;\r\n            const hasSlash = value.indexOf('/') !== -1;\r\n            if (hasPlus || hasSlash) {\r\n                const invalidChar = hasPlus ? '+' : '/';\r\n                throw invalidFormat(format, \"Invalid character '\" + invalidChar + \"' found: is it base64 encoded?\");\r\n            }\r\n            value = value.replace(/-/g, '+').replace(/_/g, '/');\r\n            break;\r\n        }\r\n        // do nothing\r\n    }\r\n    let bytes;\r\n    try {\r\n        bytes = decodeBase64(value);\r\n    }\r\n    catch (e) {\r\n        if (e.message.includes('polyfill')) {\r\n            throw e;\r\n        }\r\n        throw invalidFormat(format, 'Invalid character found');\r\n    }\r\n    const array = new Uint8Array(bytes.length);\r\n    for (let i = 0; i < bytes.length; i++) {\r\n        array[i] = bytes.charCodeAt(i);\r\n    }\r\n    return array;\r\n}\r\nclass DataURLParts {\r\n    constructor(dataURL) {\r\n        this.base64 = false;\r\n        this.contentType = null;\r\n        const matches = dataURL.match(/^data:([^,]+)?,/);\r\n        if (matches === null) {\r\n            throw invalidFormat(StringFormat.DATA_URL, \"Must be formatted 'data:[<mediatype>][;base64],<data>\");\r\n        }\r\n        const middle = matches[1] || null;\r\n        if (middle != null) {\r\n            this.base64 = endsWith(middle, ';base64');\r\n            this.contentType = this.base64\r\n                ? middle.substring(0, middle.length - ';base64'.length)\r\n                : middle;\r\n        }\r\n        this.rest = dataURL.substring(dataURL.indexOf(',') + 1);\r\n    }\r\n}\r\nfunction dataURLBytes_(dataUrl) {\r\n    const parts = new DataURLParts(dataUrl);\r\n    if (parts.base64) {\r\n        return base64Bytes_(StringFormat.BASE64, parts.rest);\r\n    }\r\n    else {\r\n        return percentEncodedBytes_(parts.rest);\r\n    }\r\n}\r\nfunction dataURLContentType_(dataUrl) {\r\n    const parts = new DataURLParts(dataUrl);\r\n    return parts.contentType;\r\n}\r\nfunction endsWith(s, end) {\r\n    const longEnough = s.length >= end.length;\r\n    if (!longEnough) {\r\n        return false;\r\n    }\r\n    return s.substring(s.length - end.length) === end;\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * @param opt_elideCopy - If true, doesn't copy mutable input data\r\n *     (e.g. Uint8Arrays). Pass true only if you know the objects will not be\r\n *     modified after this blob's construction.\r\n *\r\n * @internal\r\n */\r\nclass FbsBlob {\r\n    constructor(data, elideCopy) {\r\n        let size = 0;\r\n        let blobType = '';\r\n        if (isNativeBlob(data)) {\r\n            this.data_ = data;\r\n            size = data.size;\r\n            blobType = data.type;\r\n        }\r\n        else if (data instanceof ArrayBuffer) {\r\n            if (elideCopy) {\r\n                this.data_ = new Uint8Array(data);\r\n            }\r\n            else {\r\n                this.data_ = new Uint8Array(data.byteLength);\r\n                this.data_.set(new Uint8Array(data));\r\n            }\r\n            size = this.data_.length;\r\n        }\r\n        else if (data instanceof Uint8Array) {\r\n            if (elideCopy) {\r\n                this.data_ = data;\r\n            }\r\n            else {\r\n                this.data_ = new Uint8Array(data.length);\r\n                this.data_.set(data);\r\n            }\r\n            size = data.length;\r\n        }\r\n        this.size_ = size;\r\n        this.type_ = blobType;\r\n    }\r\n    size() {\r\n        return this.size_;\r\n    }\r\n    type() {\r\n        return this.type_;\r\n    }\r\n    slice(startByte, endByte) {\r\n        if (isNativeBlob(this.data_)) {\r\n            const realBlob = this.data_;\r\n            const sliced = sliceBlob(realBlob, startByte, endByte);\r\n            if (sliced === null) {\r\n                return null;\r\n            }\r\n            return new FbsBlob(sliced);\r\n        }\r\n        else {\r\n            const slice = new Uint8Array(this.data_.buffer, startByte, endByte - startByte);\r\n            return new FbsBlob(slice, true);\r\n        }\r\n    }\r\n    static getBlob(...args) {\r\n        if (isNativeBlobDefined()) {\r\n            const blobby = args.map((val) => {\r\n                if (val instanceof FbsBlob) {\r\n                    return val.data_;\r\n                }\r\n                else {\r\n                    return val;\r\n                }\r\n            });\r\n            return new FbsBlob(getBlob$1.apply(null, blobby));\r\n        }\r\n        else {\r\n            const uint8Arrays = args.map((val) => {\r\n                if (isString(val)) {\r\n                    return dataFromString(StringFormat.RAW, val).data;\r\n                }\r\n                else {\r\n                    // Blobs don't exist, so this has to be a Uint8Array.\r\n                    return val.data_;\r\n                }\r\n            });\r\n            let finalLength = 0;\r\n            uint8Arrays.forEach((array) => {\r\n                finalLength += array.byteLength;\r\n            });\r\n            const merged = new Uint8Array(finalLength);\r\n            let index = 0;\r\n            uint8Arrays.forEach((array) => {\r\n                for (let i = 0; i < array.length; i++) {\r\n                    merged[index++] = array[i];\r\n                }\r\n            });\r\n            return new FbsBlob(merged, true);\r\n        }\r\n    }\r\n    uploadData() {\r\n        return this.data_;\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Returns the Object resulting from parsing the given JSON, or null if the\r\n * given string does not represent a JSON object.\r\n */\r\nfunction jsonObjectOrNull(s) {\r\n    let obj;\r\n    try {\r\n        obj = JSON.parse(s);\r\n    }\r\n    catch (e) {\r\n        return null;\r\n    }\r\n    if (isNonArrayObject(obj)) {\r\n        return obj;\r\n    }\r\n    else {\r\n        return null;\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * @fileoverview Contains helper methods for manipulating paths.\r\n */\r\n/**\r\n * @return Null if the path is already at the root.\r\n */\r\nfunction parent(path) {\r\n    if (path.length === 0) {\r\n        return null;\r\n    }\r\n    const index = path.lastIndexOf('/');\r\n    if (index === -1) {\r\n        return '';\r\n    }\r\n    const newPath = path.slice(0, index);\r\n    return newPath;\r\n}\r\nfunction child(path, childPath) {\r\n    const canonicalChildPath = childPath\r\n        .split('/')\r\n        .filter(component => component.length > 0)\r\n        .join('/');\r\n    if (path.length === 0) {\r\n        return canonicalChildPath;\r\n    }\r\n    else {\r\n        return path + '/' + canonicalChildPath;\r\n    }\r\n}\r\n/**\r\n * Returns the last component of a path.\r\n * '/foo/bar' -> 'bar'\r\n * '/foo/bar/baz/' -> 'baz/'\r\n * '/a' -> 'a'\r\n */\r\nfunction lastComponent(path) {\r\n    const index = path.lastIndexOf('/', path.length - 2);\r\n    if (index === -1) {\r\n        return path;\r\n    }\r\n    else {\r\n        return path.slice(index + 1);\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nfunction noXform_(metadata, value) {\r\n    return value;\r\n}\r\nclass Mapping {\r\n    constructor(server, local, writable, xform) {\r\n        this.server = server;\r\n        this.local = local || server;\r\n        this.writable = !!writable;\r\n        this.xform = xform || noXform_;\r\n    }\r\n}\r\nlet mappings_ = null;\r\nfunction xformPath(fullPath) {\r\n    if (!isString(fullPath) || fullPath.length < 2) {\r\n        return fullPath;\r\n    }\r\n    else {\r\n        return lastComponent(fullPath);\r\n    }\r\n}\r\nfunction getMappings() {\r\n    if (mappings_) {\r\n        return mappings_;\r\n    }\r\n    const mappings = [];\r\n    mappings.push(new Mapping('bucket'));\r\n    mappings.push(new Mapping('generation'));\r\n    mappings.push(new Mapping('metageneration'));\r\n    mappings.push(new Mapping('name', 'fullPath', true));\r\n    function mappingsXformPath(_metadata, fullPath) {\r\n        return xformPath(fullPath);\r\n    }\r\n    const nameMapping = new Mapping('name');\r\n    nameMapping.xform = mappingsXformPath;\r\n    mappings.push(nameMapping);\r\n    /**\r\n     * Coerces the second param to a number, if it is defined.\r\n     */\r\n    function xformSize(_metadata, size) {\r\n        if (size !== undefined) {\r\n            return Number(size);\r\n        }\r\n        else {\r\n            return size;\r\n        }\r\n    }\r\n    const sizeMapping = new Mapping('size');\r\n    sizeMapping.xform = xformSize;\r\n    mappings.push(sizeMapping);\r\n    mappings.push(new Mapping('timeCreated'));\r\n    mappings.push(new Mapping('updated'));\r\n    mappings.push(new Mapping('md5Hash', null, true));\r\n    mappings.push(new Mapping('cacheControl', null, true));\r\n    mappings.push(new Mapping('contentDisposition', null, true));\r\n    mappings.push(new Mapping('contentEncoding', null, true));\r\n    mappings.push(new Mapping('contentLanguage', null, true));\r\n    mappings.push(new Mapping('contentType', null, true));\r\n    mappings.push(new Mapping('metadata', 'customMetadata', true));\r\n    mappings_ = mappings;\r\n    return mappings_;\r\n}\r\nfunction addRef(metadata, service) {\r\n    function generateRef() {\r\n        const bucket = metadata['bucket'];\r\n        const path = metadata['fullPath'];\r\n        const loc = new Location(bucket, path);\r\n        return service._makeStorageReference(loc);\r\n    }\r\n    Object.defineProperty(metadata, 'ref', { get: generateRef });\r\n}\r\nfunction fromResource(service, resource, mappings) {\r\n    const metadata = {};\r\n    metadata['type'] = 'file';\r\n    const len = mappings.length;\r\n    for (let i = 0; i < len; i++) {\r\n        const mapping = mappings[i];\r\n        metadata[mapping.local] = mapping.xform(metadata, resource[mapping.server]);\r\n    }\r\n    addRef(metadata, service);\r\n    return metadata;\r\n}\r\nfunction fromResourceString(service, resourceString, mappings) {\r\n    const obj = jsonObjectOrNull(resourceString);\r\n    if (obj === null) {\r\n        return null;\r\n    }\r\n    const resource = obj;\r\n    return fromResource(service, resource, mappings);\r\n}\r\nfunction downloadUrlFromResourceString(metadata, resourceString, host, protocol) {\r\n    const obj = jsonObjectOrNull(resourceString);\r\n    if (obj === null) {\r\n        return null;\r\n    }\r\n    if (!isString(obj['downloadTokens'])) {\r\n        // This can happen if objects are uploaded through GCS and retrieved\r\n        // through list, so we don't want to throw an Error.\r\n        return null;\r\n    }\r\n    const tokens = obj['downloadTokens'];\r\n    if (tokens.length === 0) {\r\n        return null;\r\n    }\r\n    const encode = encodeURIComponent;\r\n    const tokensList = tokens.split(',');\r\n    const urls = tokensList.map((token) => {\r\n        const bucket = metadata['bucket'];\r\n        const path = metadata['fullPath'];\r\n        const urlPart = '/b/' + encode(bucket) + '/o/' + encode(path);\r\n        const base = makeUrl(urlPart, host, protocol);\r\n        const queryString = makeQueryString({\r\n            alt: 'media',\r\n            token\r\n        });\r\n        return base + queryString;\r\n    });\r\n    return urls[0];\r\n}\r\nfunction toResourceString(metadata, mappings) {\r\n    const resource = {};\r\n    const len = mappings.length;\r\n    for (let i = 0; i < len; i++) {\r\n        const mapping = mappings[i];\r\n        if (mapping.writable) {\r\n            resource[mapping.server] = metadata[mapping.local];\r\n        }\r\n    }\r\n    return JSON.stringify(resource);\r\n}\n\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nconst PREFIXES_KEY = 'prefixes';\r\nconst ITEMS_KEY = 'items';\r\nfunction fromBackendResponse(service, bucket, resource) {\r\n    const listResult = {\r\n        prefixes: [],\r\n        items: [],\r\n        nextPageToken: resource['nextPageToken']\r\n    };\r\n    if (resource[PREFIXES_KEY]) {\r\n        for (const path of resource[PREFIXES_KEY]) {\r\n            const pathWithoutTrailingSlash = path.replace(/\\/$/, '');\r\n            const reference = service._makeStorageReference(new Location(bucket, pathWithoutTrailingSlash));\r\n            listResult.prefixes.push(reference);\r\n        }\r\n    }\r\n    if (resource[ITEMS_KEY]) {\r\n        for (const item of resource[ITEMS_KEY]) {\r\n            const reference = service._makeStorageReference(new Location(bucket, item['name']));\r\n            listResult.items.push(reference);\r\n        }\r\n    }\r\n    return listResult;\r\n}\r\nfunction fromResponseString(service, bucket, resourceString) {\r\n    const obj = jsonObjectOrNull(resourceString);\r\n    if (obj === null) {\r\n        return null;\r\n    }\r\n    const resource = obj;\r\n    return fromBackendResponse(service, bucket, resource);\r\n}\n\n/**\r\n * Contains a fully specified request.\r\n *\r\n * @param I - the type of the backend's network response.\r\n * @param O - the output response type used by the rest of the SDK.\r\n */\r\nclass RequestInfo {\r\n    constructor(url, method, \r\n    /**\r\n     * Returns the value with which to resolve the request's promise. Only called\r\n     * if the request is successful. Throw from this function to reject the\r\n     * returned Request's promise with the thrown error.\r\n     * Note: The XhrIo passed to this function may be reused after this callback\r\n     * returns. Do not keep a reference to it in any way.\r\n     */\r\n    handler, timeout) {\r\n        this.url = url;\r\n        this.method = method;\r\n        this.handler = handler;\r\n        this.timeout = timeout;\r\n        this.urlParams = {};\r\n        this.headers = {};\r\n        this.body = null;\r\n        this.errorHandler = null;\r\n        /**\r\n         * Called with the current number of bytes uploaded and total size (-1 if not\r\n         * computable) of the request body (i.e. used to report upload progress).\r\n         */\r\n        this.progressCallback = null;\r\n        this.successCodes = [200];\r\n        this.additionalRetryCodes = [];\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Throws the UNKNOWN StorageError if cndn is false.\r\n */\r\nfunction handlerCheck(cndn) {\r\n    if (!cndn) {\r\n        throw unknown();\r\n    }\r\n}\r\nfunction metadataHandler(service, mappings) {\r\n    function handler(xhr, text) {\r\n        const metadata = fromResourceString(service, text, mappings);\r\n        handlerCheck(metadata !== null);\r\n        return metadata;\r\n    }\r\n    return handler;\r\n}\r\nfunction listHandler(service, bucket) {\r\n    function handler(xhr, text) {\r\n        const listResult = fromResponseString(service, bucket, text);\r\n        handlerCheck(listResult !== null);\r\n        return listResult;\r\n    }\r\n    return handler;\r\n}\r\nfunction downloadUrlHandler(service, mappings) {\r\n    function handler(xhr, text) {\r\n        const metadata = fromResourceString(service, text, mappings);\r\n        handlerCheck(metadata !== null);\r\n        return downloadUrlFromResourceString(metadata, text, service.host, service._protocol);\r\n    }\r\n    return handler;\r\n}\r\nfunction sharedErrorHandler(location) {\r\n    function errorHandler(xhr, err) {\r\n        let newErr;\r\n        if (xhr.getStatus() === 401) {\r\n            if (\r\n            // This exact message string is the only consistent part of the\r\n            // server's error response that identifies it as an App Check error.\r\n            xhr.getErrorText().includes('Firebase App Check token is invalid')) {\r\n                newErr = unauthorizedApp();\r\n            }\r\n            else {\r\n                newErr = unauthenticated();\r\n            }\r\n        }\r\n        else {\r\n            if (xhr.getStatus() === 402) {\r\n                newErr = quotaExceeded(location.bucket);\r\n            }\r\n            else {\r\n                if (xhr.getStatus() === 403) {\r\n                    newErr = unauthorized(location.path);\r\n                }\r\n                else {\r\n                    newErr = err;\r\n                }\r\n            }\r\n        }\r\n        newErr.status = xhr.getStatus();\r\n        newErr.serverResponse = err.serverResponse;\r\n        return newErr;\r\n    }\r\n    return errorHandler;\r\n}\r\nfunction objectErrorHandler(location) {\r\n    const shared = sharedErrorHandler(location);\r\n    function errorHandler(xhr, err) {\r\n        let newErr = shared(xhr, err);\r\n        if (xhr.getStatus() === 404) {\r\n            newErr = objectNotFound(location.path);\r\n        }\r\n        newErr.serverResponse = err.serverResponse;\r\n        return newErr;\r\n    }\r\n    return errorHandler;\r\n}\r\nfunction getMetadata$2(service, location, mappings) {\r\n    const urlPart = location.fullServerUrl();\r\n    const url = makeUrl(urlPart, service.host, service._protocol);\r\n    const method = 'GET';\r\n    const timeout = service.maxOperationRetryTime;\r\n    const requestInfo = new RequestInfo(url, method, metadataHandler(service, mappings), timeout);\r\n    requestInfo.errorHandler = objectErrorHandler(location);\r\n    return requestInfo;\r\n}\r\nfunction list$2(service, location, delimiter, pageToken, maxResults) {\r\n    const urlParams = {};\r\n    if (location.isRoot) {\r\n        urlParams['prefix'] = '';\r\n    }\r\n    else {\r\n        urlParams['prefix'] = location.path + '/';\r\n    }\r\n    if (delimiter && delimiter.length > 0) {\r\n        urlParams['delimiter'] = delimiter;\r\n    }\r\n    if (pageToken) {\r\n        urlParams['pageToken'] = pageToken;\r\n    }\r\n    if (maxResults) {\r\n        urlParams['maxResults'] = maxResults;\r\n    }\r\n    const urlPart = location.bucketOnlyServerUrl();\r\n    const url = makeUrl(urlPart, service.host, service._protocol);\r\n    const method = 'GET';\r\n    const timeout = service.maxOperationRetryTime;\r\n    const requestInfo = new RequestInfo(url, method, listHandler(service, location.bucket), timeout);\r\n    requestInfo.urlParams = urlParams;\r\n    requestInfo.errorHandler = sharedErrorHandler(location);\r\n    return requestInfo;\r\n}\r\nfunction getBytes$1(service, location, maxDownloadSizeBytes) {\r\n    const urlPart = location.fullServerUrl();\r\n    const url = makeUrl(urlPart, service.host, service._protocol) + '?alt=media';\r\n    const method = 'GET';\r\n    const timeout = service.maxOperationRetryTime;\r\n    const requestInfo = new RequestInfo(url, method, (_, data) => data, timeout);\r\n    requestInfo.errorHandler = objectErrorHandler(location);\r\n    if (maxDownloadSizeBytes !== undefined) {\r\n        requestInfo.headers['Range'] = `bytes=0-${maxDownloadSizeBytes}`;\r\n        requestInfo.successCodes = [200 /* OK */, 206 /* Partial Content */];\r\n    }\r\n    return requestInfo;\r\n}\r\nfunction getDownloadUrl(service, location, mappings) {\r\n    const urlPart = location.fullServerUrl();\r\n    const url = makeUrl(urlPart, service.host, service._protocol);\r\n    const method = 'GET';\r\n    const timeout = service.maxOperationRetryTime;\r\n    const requestInfo = new RequestInfo(url, method, downloadUrlHandler(service, mappings), timeout);\r\n    requestInfo.errorHandler = objectErrorHandler(location);\r\n    return requestInfo;\r\n}\r\nfunction updateMetadata$2(service, location, metadata, mappings) {\r\n    const urlPart = location.fullServerUrl();\r\n    const url = makeUrl(urlPart, service.host, service._protocol);\r\n    const method = 'PATCH';\r\n    const body = toResourceString(metadata, mappings);\r\n    const headers = { 'Content-Type': 'application/json; charset=utf-8' };\r\n    const timeout = service.maxOperationRetryTime;\r\n    const requestInfo = new RequestInfo(url, method, metadataHandler(service, mappings), timeout);\r\n    requestInfo.headers = headers;\r\n    requestInfo.body = body;\r\n    requestInfo.errorHandler = objectErrorHandler(location);\r\n    return requestInfo;\r\n}\r\nfunction deleteObject$2(service, location) {\r\n    const urlPart = location.fullServerUrl();\r\n    const url = makeUrl(urlPart, service.host, service._protocol);\r\n    const method = 'DELETE';\r\n    const timeout = service.maxOperationRetryTime;\r\n    function handler(_xhr, _text) { }\r\n    const requestInfo = new RequestInfo(url, method, handler, timeout);\r\n    requestInfo.successCodes = [200, 204];\r\n    requestInfo.errorHandler = objectErrorHandler(location);\r\n    return requestInfo;\r\n}\r\nfunction determineContentType_(metadata, blob) {\r\n    return ((metadata && metadata['contentType']) ||\r\n        (blob && blob.type()) ||\r\n        'application/octet-stream');\r\n}\r\nfunction metadataForUpload_(location, blob, metadata) {\r\n    const metadataClone = Object.assign({}, metadata);\r\n    metadataClone['fullPath'] = location.path;\r\n    metadataClone['size'] = blob.size();\r\n    if (!metadataClone['contentType']) {\r\n        metadataClone['contentType'] = determineContentType_(null, blob);\r\n    }\r\n    return metadataClone;\r\n}\r\n/**\r\n * Prepare RequestInfo for uploads as Content-Type: multipart.\r\n */\r\nfunction multipartUpload(service, location, mappings, blob, metadata) {\r\n    const urlPart = location.bucketOnlyServerUrl();\r\n    const headers = {\r\n        'X-Goog-Upload-Protocol': 'multipart'\r\n    };\r\n    function genBoundary() {\r\n        let str = '';\r\n        for (let i = 0; i < 2; i++) {\r\n            str = str + Math.random().toString().slice(2);\r\n        }\r\n        return str;\r\n    }\r\n    const boundary = genBoundary();\r\n    headers['Content-Type'] = 'multipart/related; boundary=' + boundary;\r\n    const metadata_ = metadataForUpload_(location, blob, metadata);\r\n    const metadataString = toResourceString(metadata_, mappings);\r\n    const preBlobPart = '--' +\r\n        boundary +\r\n        '\\r\\n' +\r\n        'Content-Type: application/json; charset=utf-8\\r\\n\\r\\n' +\r\n        metadataString +\r\n        '\\r\\n--' +\r\n        boundary +\r\n        '\\r\\n' +\r\n        'Content-Type: ' +\r\n        metadata_['contentType'] +\r\n        '\\r\\n\\r\\n';\r\n    const postBlobPart = '\\r\\n--' + boundary + '--';\r\n    const body = FbsBlob.getBlob(preBlobPart, blob, postBlobPart);\r\n    if (body === null) {\r\n        throw cannotSliceBlob();\r\n    }\r\n    const urlParams = { name: metadata_['fullPath'] };\r\n    const url = makeUrl(urlPart, service.host, service._protocol);\r\n    const method = 'POST';\r\n    const timeout = service.maxUploadRetryTime;\r\n    const requestInfo = new RequestInfo(url, method, metadataHandler(service, mappings), timeout);\r\n    requestInfo.urlParams = urlParams;\r\n    requestInfo.headers = headers;\r\n    requestInfo.body = body.uploadData();\r\n    requestInfo.errorHandler = sharedErrorHandler(location);\r\n    return requestInfo;\r\n}\r\n/**\r\n * @param current The number of bytes that have been uploaded so far.\r\n * @param total The total number of bytes in the upload.\r\n * @param opt_finalized True if the server has finished the upload.\r\n * @param opt_metadata The upload metadata, should\r\n *     only be passed if opt_finalized is true.\r\n */\r\nclass ResumableUploadStatus {\r\n    constructor(current, total, finalized, metadata) {\r\n        this.current = current;\r\n        this.total = total;\r\n        this.finalized = !!finalized;\r\n        this.metadata = metadata || null;\r\n    }\r\n}\r\nfunction checkResumeHeader_(xhr, allowed) {\r\n    let status = null;\r\n    try {\r\n        status = xhr.getResponseHeader('X-Goog-Upload-Status');\r\n    }\r\n    catch (e) {\r\n        handlerCheck(false);\r\n    }\r\n    const allowedStatus = allowed || ['active'];\r\n    handlerCheck(!!status && allowedStatus.indexOf(status) !== -1);\r\n    return status;\r\n}\r\nfunction createResumableUpload(service, location, mappings, blob, metadata) {\r\n    const urlPart = location.bucketOnlyServerUrl();\r\n    const metadataForUpload = metadataForUpload_(location, blob, metadata);\r\n    const urlParams = { name: metadataForUpload['fullPath'] };\r\n    const url = makeUrl(urlPart, service.host, service._protocol);\r\n    const method = 'POST';\r\n    const headers = {\r\n        'X-Goog-Upload-Protocol': 'resumable',\r\n        'X-Goog-Upload-Command': 'start',\r\n        'X-Goog-Upload-Header-Content-Length': `${blob.size()}`,\r\n        'X-Goog-Upload-Header-Content-Type': metadataForUpload['contentType'],\r\n        'Content-Type': 'application/json; charset=utf-8'\r\n    };\r\n    const body = toResourceString(metadataForUpload, mappings);\r\n    const timeout = service.maxUploadRetryTime;\r\n    function handler(xhr) {\r\n        checkResumeHeader_(xhr);\r\n        let url;\r\n        try {\r\n            url = xhr.getResponseHeader('X-Goog-Upload-URL');\r\n        }\r\n        catch (e) {\r\n            handlerCheck(false);\r\n        }\r\n        handlerCheck(isString(url));\r\n        return url;\r\n    }\r\n    const requestInfo = new RequestInfo(url, method, handler, timeout);\r\n    requestInfo.urlParams = urlParams;\r\n    requestInfo.headers = headers;\r\n    requestInfo.body = body;\r\n    requestInfo.errorHandler = sharedErrorHandler(location);\r\n    return requestInfo;\r\n}\r\n/**\r\n * @param url From a call to fbs.requests.createResumableUpload.\r\n */\r\nfunction getResumableUploadStatus(service, location, url, blob) {\r\n    const headers = { 'X-Goog-Upload-Command': 'query' };\r\n    function handler(xhr) {\r\n        const status = checkResumeHeader_(xhr, ['active', 'final']);\r\n        let sizeString = null;\r\n        try {\r\n            sizeString = xhr.getResponseHeader('X-Goog-Upload-Size-Received');\r\n        }\r\n        catch (e) {\r\n            handlerCheck(false);\r\n        }\r\n        if (!sizeString) {\r\n            // null or empty string\r\n            handlerCheck(false);\r\n        }\r\n        const size = Number(sizeString);\r\n        handlerCheck(!isNaN(size));\r\n        return new ResumableUploadStatus(size, blob.size(), status === 'final');\r\n    }\r\n    const method = 'POST';\r\n    const timeout = service.maxUploadRetryTime;\r\n    const requestInfo = new RequestInfo(url, method, handler, timeout);\r\n    requestInfo.headers = headers;\r\n    requestInfo.errorHandler = sharedErrorHandler(location);\r\n    return requestInfo;\r\n}\r\n/**\r\n * Any uploads via the resumable upload API must transfer a number of bytes\r\n * that is a multiple of this number.\r\n */\r\nconst RESUMABLE_UPLOAD_CHUNK_SIZE = 256 * 1024;\r\n/**\r\n * @param url From a call to fbs.requests.createResumableUpload.\r\n * @param chunkSize Number of bytes to upload.\r\n * @param status The previous status.\r\n *     If not passed or null, we start from the beginning.\r\n * @throws fbs.Error If the upload is already complete, the passed in status\r\n *     has a final size inconsistent with the blob, or the blob cannot be sliced\r\n *     for upload.\r\n */\r\nfunction continueResumableUpload(location, service, url, blob, chunkSize, mappings, status, progressCallback) {\r\n    // TODO(andysoto): standardize on internal asserts\r\n    // assert(!(opt_status && opt_status.finalized));\r\n    const status_ = new ResumableUploadStatus(0, 0);\r\n    if (status) {\r\n        status_.current = status.current;\r\n        status_.total = status.total;\r\n    }\r\n    else {\r\n        status_.current = 0;\r\n        status_.total = blob.size();\r\n    }\r\n    if (blob.size() !== status_.total) {\r\n        throw serverFileWrongSize();\r\n    }\r\n    const bytesLeft = status_.total - status_.current;\r\n    let bytesToUpload = bytesLeft;\r\n    if (chunkSize > 0) {\r\n        bytesToUpload = Math.min(bytesToUpload, chunkSize);\r\n    }\r\n    const startByte = status_.current;\r\n    const endByte = startByte + bytesToUpload;\r\n    let uploadCommand = '';\r\n    if (bytesToUpload === 0) {\r\n        uploadCommand = 'finalize';\r\n    }\r\n    else if (bytesLeft === bytesToUpload) {\r\n        uploadCommand = 'upload, finalize';\r\n    }\r\n    else {\r\n        uploadCommand = 'upload';\r\n    }\r\n    const headers = {\r\n        'X-Goog-Upload-Command': uploadCommand,\r\n        'X-Goog-Upload-Offset': `${status_.current}`\r\n    };\r\n    const body = blob.slice(startByte, endByte);\r\n    if (body === null) {\r\n        throw cannotSliceBlob();\r\n    }\r\n    function handler(xhr, text) {\r\n        // TODO(andysoto): Verify the MD5 of each uploaded range:\r\n        // the 'x-range-md5' header comes back with status code 308 responses.\r\n        // We'll only be able to bail out though, because you can't re-upload a\r\n        // range that you previously uploaded.\r\n        const uploadStatus = checkResumeHeader_(xhr, ['active', 'final']);\r\n        const newCurrent = status_.current + bytesToUpload;\r\n        const size = blob.size();\r\n        let metadata;\r\n        if (uploadStatus === 'final') {\r\n            metadata = metadataHandler(service, mappings)(xhr, text);\r\n        }\r\n        else {\r\n            metadata = null;\r\n        }\r\n        return new ResumableUploadStatus(newCurrent, size, uploadStatus === 'final', metadata);\r\n    }\r\n    const method = 'POST';\r\n    const timeout = service.maxUploadRetryTime;\r\n    const requestInfo = new RequestInfo(url, method, handler, timeout);\r\n    requestInfo.headers = headers;\r\n    requestInfo.body = body.uploadData();\r\n    requestInfo.progressCallback = progressCallback || null;\r\n    requestInfo.errorHandler = sharedErrorHandler(location);\r\n    return requestInfo;\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * An event that is triggered on a task.\r\n * @internal\r\n */\r\nconst TaskEvent = {\r\n    /**\r\n     * For this event,\r\n     * <ul>\r\n     *   <li>The `next` function is triggered on progress updates and when the\r\n     *       task is paused/resumed with an `UploadTaskSnapshot` as the first\r\n     *       argument.</li>\r\n     *   <li>The `error` function is triggered if the upload is canceled or fails\r\n     *       for another reason.</li>\r\n     *   <li>The `complete` function is triggered if the upload completes\r\n     *       successfully.</li>\r\n     * </ul>\r\n     */\r\n    STATE_CHANGED: 'state_changed'\r\n};\r\n// type keys = keyof TaskState\r\n/**\r\n * Represents the current state of a running upload.\r\n * @internal\r\n */\r\nconst TaskState = {\r\n    /** The task is currently transferring data. */\r\n    RUNNING: 'running',\r\n    /** The task was paused by the user. */\r\n    PAUSED: 'paused',\r\n    /** The task completed successfully. */\r\n    SUCCESS: 'success',\r\n    /** The task was canceled. */\r\n    CANCELED: 'canceled',\r\n    /** The task failed with an error. */\r\n    ERROR: 'error'\r\n};\r\nfunction taskStateFromInternalTaskState(state) {\r\n    switch (state) {\r\n        case \"running\" /* InternalTaskState.RUNNING */:\r\n        case \"pausing\" /* InternalTaskState.PAUSING */:\r\n        case \"canceling\" /* InternalTaskState.CANCELING */:\r\n            return TaskState.RUNNING;\r\n        case \"paused\" /* InternalTaskState.PAUSED */:\r\n            return TaskState.PAUSED;\r\n        case \"success\" /* InternalTaskState.SUCCESS */:\r\n            return TaskState.SUCCESS;\r\n        case \"canceled\" /* InternalTaskState.CANCELED */:\r\n            return TaskState.CANCELED;\r\n        case \"error\" /* InternalTaskState.ERROR */:\r\n            return TaskState.ERROR;\r\n        default:\r\n            // TODO(andysoto): assert(false);\r\n            return TaskState.ERROR;\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nclass Observer {\r\n    constructor(nextOrObserver, error, complete) {\r\n        const asFunctions = isFunction(nextOrObserver) || error != null || complete != null;\r\n        if (asFunctions) {\r\n            this.next = nextOrObserver;\r\n            this.error = error !== null && error !== void 0 ? error : undefined;\r\n            this.complete = complete !== null && complete !== void 0 ? complete : undefined;\r\n        }\r\n        else {\r\n            const observer = nextOrObserver;\r\n            this.next = observer.next;\r\n            this.error = observer.error;\r\n            this.complete = observer.complete;\r\n        }\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Returns a function that invokes f with its arguments asynchronously as a\r\n * microtask, i.e. as soon as possible after the current script returns back\r\n * into browser code.\r\n */\r\n// eslint-disable-next-line @typescript-eslint/ban-types\r\nfunction async(f) {\r\n    return (...argsToForward) => {\r\n        // eslint-disable-next-line @typescript-eslint/no-floating-promises\r\n        Promise.resolve().then(() => f(...argsToForward));\r\n    };\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/** An override for the text-based Connection. Used in tests. */\r\nlet textFactoryOverride = null;\r\n/**\r\n * Network layer for browsers. We use this instead of goog.net.XhrIo because\r\n * goog.net.XhrIo is hyuuuuge and doesn't work in React Native on Android.\r\n */\r\nclass XhrConnection {\r\n    constructor() {\r\n        this.sent_ = false;\r\n        this.xhr_ = new XMLHttpRequest();\r\n        this.initXhr();\r\n        this.errorCode_ = ErrorCode.NO_ERROR;\r\n        this.sendPromise_ = new Promise(resolve => {\r\n            this.xhr_.addEventListener('abort', () => {\r\n                this.errorCode_ = ErrorCode.ABORT;\r\n                resolve();\r\n            });\r\n            this.xhr_.addEventListener('error', () => {\r\n                this.errorCode_ = ErrorCode.NETWORK_ERROR;\r\n                resolve();\r\n            });\r\n            this.xhr_.addEventListener('load', () => {\r\n                resolve();\r\n            });\r\n        });\r\n    }\r\n    send(url, method, body, headers) {\r\n        if (this.sent_) {\r\n            throw internalError('cannot .send() more than once');\r\n        }\r\n        this.sent_ = true;\r\n        this.xhr_.open(method, url, true);\r\n        if (headers !== undefined) {\r\n            for (const key in headers) {\r\n                if (headers.hasOwnProperty(key)) {\r\n                    this.xhr_.setRequestHeader(key, headers[key].toString());\r\n                }\r\n            }\r\n        }\r\n        if (body !== undefined) {\r\n            this.xhr_.send(body);\r\n        }\r\n        else {\r\n            this.xhr_.send();\r\n        }\r\n        return this.sendPromise_;\r\n    }\r\n    getErrorCode() {\r\n        if (!this.sent_) {\r\n            throw internalError('cannot .getErrorCode() before sending');\r\n        }\r\n        return this.errorCode_;\r\n    }\r\n    getStatus() {\r\n        if (!this.sent_) {\r\n            throw internalError('cannot .getStatus() before sending');\r\n        }\r\n        try {\r\n            return this.xhr_.status;\r\n        }\r\n        catch (e) {\r\n            return -1;\r\n        }\r\n    }\r\n    getResponse() {\r\n        if (!this.sent_) {\r\n            throw internalError('cannot .getResponse() before sending');\r\n        }\r\n        return this.xhr_.response;\r\n    }\r\n    getErrorText() {\r\n        if (!this.sent_) {\r\n            throw internalError('cannot .getErrorText() before sending');\r\n        }\r\n        return this.xhr_.statusText;\r\n    }\r\n    /** Aborts the request. */\r\n    abort() {\r\n        this.xhr_.abort();\r\n    }\r\n    getResponseHeader(header) {\r\n        return this.xhr_.getResponseHeader(header);\r\n    }\r\n    addUploadProgressListener(listener) {\r\n        if (this.xhr_.upload != null) {\r\n            this.xhr_.upload.addEventListener('progress', listener);\r\n        }\r\n    }\r\n    removeUploadProgressListener(listener) {\r\n        if (this.xhr_.upload != null) {\r\n            this.xhr_.upload.removeEventListener('progress', listener);\r\n        }\r\n    }\r\n}\r\nclass XhrTextConnection extends XhrConnection {\r\n    initXhr() {\r\n        this.xhr_.responseType = 'text';\r\n    }\r\n}\r\nfunction newTextConnection() {\r\n    return textFactoryOverride ? textFactoryOverride() : new XhrTextConnection();\r\n}\r\nclass XhrBytesConnection extends XhrConnection {\r\n    initXhr() {\r\n        this.xhr_.responseType = 'arraybuffer';\r\n    }\r\n}\r\nfunction newBytesConnection() {\r\n    return new XhrBytesConnection();\r\n}\r\nclass XhrBlobConnection extends XhrConnection {\r\n    initXhr() {\r\n        this.xhr_.responseType = 'blob';\r\n    }\r\n}\r\nfunction newBlobConnection() {\r\n    return new XhrBlobConnection();\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Represents a blob being uploaded. Can be used to pause/resume/cancel the\r\n * upload and manage callbacks for various events.\r\n * @internal\r\n */\r\nclass UploadTask {\r\n    /**\r\n     * @param ref - The firebaseStorage.Reference object this task came\r\n     *     from, untyped to avoid cyclic dependencies.\r\n     * @param blob - The blob to upload.\r\n     */\r\n    constructor(ref, blob, metadata = null) {\r\n        /**\r\n         * Number of bytes transferred so far.\r\n         */\r\n        this._transferred = 0;\r\n        this._needToFetchStatus = false;\r\n        this._needToFetchMetadata = false;\r\n        this._observers = [];\r\n        this._error = undefined;\r\n        this._uploadUrl = undefined;\r\n        this._request = undefined;\r\n        this._chunkMultiplier = 1;\r\n        this._resolve = undefined;\r\n        this._reject = undefined;\r\n        this._ref = ref;\r\n        this._blob = blob;\r\n        this._metadata = metadata;\r\n        this._mappings = getMappings();\r\n        this._resumable = this._shouldDoResumable(this._blob);\r\n        this._state = \"running\" /* InternalTaskState.RUNNING */;\r\n        this._errorHandler = error => {\r\n            this._request = undefined;\r\n            this._chunkMultiplier = 1;\r\n            if (error._codeEquals(StorageErrorCode.CANCELED)) {\r\n                this._needToFetchStatus = true;\r\n                this.completeTransitions_();\r\n            }\r\n            else {\r\n                const backoffExpired = this.isExponentialBackoffExpired();\r\n                if (isRetryStatusCode(error.status, [])) {\r\n                    if (backoffExpired) {\r\n                        error = retryLimitExceeded();\r\n                    }\r\n                    else {\r\n                        this.sleepTime = Math.max(this.sleepTime * 2, DEFAULT_MIN_SLEEP_TIME_MILLIS);\r\n                        this._needToFetchStatus = true;\r\n                        this.completeTransitions_();\r\n                        return;\r\n                    }\r\n                }\r\n                this._error = error;\r\n                this._transition(\"error\" /* InternalTaskState.ERROR */);\r\n            }\r\n        };\r\n        this._metadataErrorHandler = error => {\r\n            this._request = undefined;\r\n            if (error._codeEquals(StorageErrorCode.CANCELED)) {\r\n                this.completeTransitions_();\r\n            }\r\n            else {\r\n                this._error = error;\r\n                this._transition(\"error\" /* InternalTaskState.ERROR */);\r\n            }\r\n        };\r\n        this.sleepTime = 0;\r\n        this.maxSleepTime = this._ref.storage.maxUploadRetryTime;\r\n        this._promise = new Promise((resolve, reject) => {\r\n            this._resolve = resolve;\r\n            this._reject = reject;\r\n            this._start();\r\n        });\r\n        // Prevent uncaught rejections on the internal promise from bubbling out\r\n        // to the top level with a dummy handler.\r\n        this._promise.then(null, () => { });\r\n    }\r\n    isExponentialBackoffExpired() {\r\n        return this.sleepTime > this.maxSleepTime;\r\n    }\r\n    _makeProgressCallback() {\r\n        const sizeBefore = this._transferred;\r\n        return loaded => this._updateProgress(sizeBefore + loaded);\r\n    }\r\n    _shouldDoResumable(blob) {\r\n        return blob.size() > 256 * 1024;\r\n    }\r\n    _start() {\r\n        if (this._state !== \"running\" /* InternalTaskState.RUNNING */) {\r\n            // This can happen if someone pauses us in a resume callback, for example.\r\n            return;\r\n        }\r\n        if (this._request !== undefined) {\r\n            return;\r\n        }\r\n        if (this._resumable) {\r\n            if (this._uploadUrl === undefined) {\r\n                this._createResumable();\r\n            }\r\n            else {\r\n                if (this._needToFetchStatus) {\r\n                    this._fetchStatus();\r\n                }\r\n                else {\r\n                    if (this._needToFetchMetadata) {\r\n                        // Happens if we miss the metadata on upload completion.\r\n                        this._fetchMetadata();\r\n                    }\r\n                    else {\r\n                        this.pendingTimeout = setTimeout(() => {\r\n                            this.pendingTimeout = undefined;\r\n                            this._continueUpload();\r\n                        }, this.sleepTime);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        else {\r\n            this._oneShotUpload();\r\n        }\r\n    }\r\n    _resolveToken(callback) {\r\n        // eslint-disable-next-line @typescript-eslint/no-floating-promises\r\n        Promise.all([\r\n            this._ref.storage._getAuthToken(),\r\n            this._ref.storage._getAppCheckToken()\r\n        ]).then(([authToken, appCheckToken]) => {\r\n            switch (this._state) {\r\n                case \"running\" /* InternalTaskState.RUNNING */:\r\n                    callback(authToken, appCheckToken);\r\n                    break;\r\n                case \"canceling\" /* InternalTaskState.CANCELING */:\r\n                    this._transition(\"canceled\" /* InternalTaskState.CANCELED */);\r\n                    break;\r\n                case \"pausing\" /* InternalTaskState.PAUSING */:\r\n                    this._transition(\"paused\" /* InternalTaskState.PAUSED */);\r\n                    break;\r\n            }\r\n        });\r\n    }\r\n    // TODO(andysoto): assert false\r\n    _createResumable() {\r\n        this._resolveToken((authToken, appCheckToken) => {\r\n            const requestInfo = createResumableUpload(this._ref.storage, this._ref._location, this._mappings, this._blob, this._metadata);\r\n            const createRequest = this._ref.storage._makeRequest(requestInfo, newTextConnection, authToken, appCheckToken);\r\n            this._request = createRequest;\r\n            createRequest.getPromise().then((url) => {\r\n                this._request = undefined;\r\n                this._uploadUrl = url;\r\n                this._needToFetchStatus = false;\r\n                this.completeTransitions_();\r\n            }, this._errorHandler);\r\n        });\r\n    }\r\n    _fetchStatus() {\r\n        // TODO(andysoto): assert(this.uploadUrl_ !== null);\r\n        const url = this._uploadUrl;\r\n        this._resolveToken((authToken, appCheckToken) => {\r\n            const requestInfo = getResumableUploadStatus(this._ref.storage, this._ref._location, url, this._blob);\r\n            const statusRequest = this._ref.storage._makeRequest(requestInfo, newTextConnection, authToken, appCheckToken);\r\n            this._request = statusRequest;\r\n            statusRequest.getPromise().then(status => {\r\n                status = status;\r\n                this._request = undefined;\r\n                this._updateProgress(status.current);\r\n                this._needToFetchStatus = false;\r\n                if (status.finalized) {\r\n                    this._needToFetchMetadata = true;\r\n                }\r\n                this.completeTransitions_();\r\n            }, this._errorHandler);\r\n        });\r\n    }\r\n    _continueUpload() {\r\n        const chunkSize = RESUMABLE_UPLOAD_CHUNK_SIZE * this._chunkMultiplier;\r\n        const status = new ResumableUploadStatus(this._transferred, this._blob.size());\r\n        // TODO(andysoto): assert(this.uploadUrl_ !== null);\r\n        const url = this._uploadUrl;\r\n        this._resolveToken((authToken, appCheckToken) => {\r\n            let requestInfo;\r\n            try {\r\n                requestInfo = continueResumableUpload(this._ref._location, this._ref.storage, url, this._blob, chunkSize, this._mappings, status, this._makeProgressCallback());\r\n            }\r\n            catch (e) {\r\n                this._error = e;\r\n                this._transition(\"error\" /* InternalTaskState.ERROR */);\r\n                return;\r\n            }\r\n            const uploadRequest = this._ref.storage._makeRequest(requestInfo, newTextConnection, authToken, appCheckToken, \r\n            /*retry=*/ false // Upload requests should not be retried as each retry should be preceded by another query request. Which is handled in this file.\r\n            );\r\n            this._request = uploadRequest;\r\n            uploadRequest.getPromise().then((newStatus) => {\r\n                this._increaseMultiplier();\r\n                this._request = undefined;\r\n                this._updateProgress(newStatus.current);\r\n                if (newStatus.finalized) {\r\n                    this._metadata = newStatus.metadata;\r\n                    this._transition(\"success\" /* InternalTaskState.SUCCESS */);\r\n                }\r\n                else {\r\n                    this.completeTransitions_();\r\n                }\r\n            }, this._errorHandler);\r\n        });\r\n    }\r\n    _increaseMultiplier() {\r\n        const currentSize = RESUMABLE_UPLOAD_CHUNK_SIZE * this._chunkMultiplier;\r\n        // Max chunk size is 32M.\r\n        if (currentSize * 2 < 32 * 1024 * 1024) {\r\n            this._chunkMultiplier *= 2;\r\n        }\r\n    }\r\n    _fetchMetadata() {\r\n        this._resolveToken((authToken, appCheckToken) => {\r\n            const requestInfo = getMetadata$2(this._ref.storage, this._ref._location, this._mappings);\r\n            const metadataRequest = this._ref.storage._makeRequest(requestInfo, newTextConnection, authToken, appCheckToken);\r\n            this._request = metadataRequest;\r\n            metadataRequest.getPromise().then(metadata => {\r\n                this._request = undefined;\r\n                this._metadata = metadata;\r\n                this._transition(\"success\" /* InternalTaskState.SUCCESS */);\r\n            }, this._metadataErrorHandler);\r\n        });\r\n    }\r\n    _oneShotUpload() {\r\n        this._resolveToken((authToken, appCheckToken) => {\r\n            const requestInfo = multipartUpload(this._ref.storage, this._ref._location, this._mappings, this._blob, this._metadata);\r\n            const multipartRequest = this._ref.storage._makeRequest(requestInfo, newTextConnection, authToken, appCheckToken);\r\n            this._request = multipartRequest;\r\n            multipartRequest.getPromise().then(metadata => {\r\n                this._request = undefined;\r\n                this._metadata = metadata;\r\n                this._updateProgress(this._blob.size());\r\n                this._transition(\"success\" /* InternalTaskState.SUCCESS */);\r\n            }, this._errorHandler);\r\n        });\r\n    }\r\n    _updateProgress(transferred) {\r\n        const old = this._transferred;\r\n        this._transferred = transferred;\r\n        // A progress update can make the \"transferred\" value smaller (e.g. a\r\n        // partial upload not completed by server, after which the \"transferred\"\r\n        // value may reset to the value at the beginning of the request).\r\n        if (this._transferred !== old) {\r\n            this._notifyObservers();\r\n        }\r\n    }\r\n    _transition(state) {\r\n        if (this._state === state) {\r\n            return;\r\n        }\r\n        switch (state) {\r\n            case \"canceling\" /* InternalTaskState.CANCELING */:\r\n            case \"pausing\" /* InternalTaskState.PAUSING */:\r\n                // TODO(andysoto):\r\n                // assert(this.state_ === InternalTaskState.RUNNING ||\r\n                //        this.state_ === InternalTaskState.PAUSING);\r\n                this._state = state;\r\n                if (this._request !== undefined) {\r\n                    this._request.cancel();\r\n                }\r\n                else if (this.pendingTimeout) {\r\n                    clearTimeout(this.pendingTimeout);\r\n                    this.pendingTimeout = undefined;\r\n                    this.completeTransitions_();\r\n                }\r\n                break;\r\n            case \"running\" /* InternalTaskState.RUNNING */:\r\n                // TODO(andysoto):\r\n                // assert(this.state_ === InternalTaskState.PAUSED ||\r\n                //        this.state_ === InternalTaskState.PAUSING);\r\n                const wasPaused = this._state === \"paused\" /* InternalTaskState.PAUSED */;\r\n                this._state = state;\r\n                if (wasPaused) {\r\n                    this._notifyObservers();\r\n                    this._start();\r\n                }\r\n                break;\r\n            case \"paused\" /* InternalTaskState.PAUSED */:\r\n                // TODO(andysoto):\r\n                // assert(this.state_ === InternalTaskState.PAUSING);\r\n                this._state = state;\r\n                this._notifyObservers();\r\n                break;\r\n            case \"canceled\" /* InternalTaskState.CANCELED */:\r\n                // TODO(andysoto):\r\n                // assert(this.state_ === InternalTaskState.PAUSED ||\r\n                //        this.state_ === InternalTaskState.CANCELING);\r\n                this._error = canceled();\r\n                this._state = state;\r\n                this._notifyObservers();\r\n                break;\r\n            case \"error\" /* InternalTaskState.ERROR */:\r\n                // TODO(andysoto):\r\n                // assert(this.state_ === InternalTaskState.RUNNING ||\r\n                //        this.state_ === InternalTaskState.PAUSING ||\r\n                //        this.state_ === InternalTaskState.CANCELING);\r\n                this._state = state;\r\n                this._notifyObservers();\r\n                break;\r\n            case \"success\" /* InternalTaskState.SUCCESS */:\r\n                // TODO(andysoto):\r\n                // assert(this.state_ === InternalTaskState.RUNNING ||\r\n                //        this.state_ === InternalTaskState.PAUSING ||\r\n                //        this.state_ === InternalTaskState.CANCELING);\r\n                this._state = state;\r\n                this._notifyObservers();\r\n                break;\r\n        }\r\n    }\r\n    completeTransitions_() {\r\n        switch (this._state) {\r\n            case \"pausing\" /* InternalTaskState.PAUSING */:\r\n                this._transition(\"paused\" /* InternalTaskState.PAUSED */);\r\n                break;\r\n            case \"canceling\" /* InternalTaskState.CANCELING */:\r\n                this._transition(\"canceled\" /* InternalTaskState.CANCELED */);\r\n                break;\r\n            case \"running\" /* InternalTaskState.RUNNING */:\r\n                this._start();\r\n                break;\r\n        }\r\n    }\r\n    /**\r\n     * A snapshot of the current task state.\r\n     */\r\n    get snapshot() {\r\n        const externalState = taskStateFromInternalTaskState(this._state);\r\n        return {\r\n            bytesTransferred: this._transferred,\r\n            totalBytes: this._blob.size(),\r\n            state: externalState,\r\n            metadata: this._metadata,\r\n            task: this,\r\n            ref: this._ref\r\n        };\r\n    }\r\n    /**\r\n     * Adds a callback for an event.\r\n     * @param type - The type of event to listen for.\r\n     * @param nextOrObserver -\r\n     *     The `next` function, which gets called for each item in\r\n     *     the event stream, or an observer object with some or all of these three\r\n     *     properties (`next`, `error`, `complete`).\r\n     * @param error - A function that gets called with a `StorageError`\r\n     *     if the event stream ends due to an error.\r\n     * @param completed - A function that gets called if the\r\n     *     event stream ends normally.\r\n     * @returns\r\n     *     If only the event argument is passed, returns a function you can use to\r\n     *     add callbacks (see the examples above). If more than just the event\r\n     *     argument is passed, returns a function you can call to unregister the\r\n     *     callbacks.\r\n     */\r\n    on(type, nextOrObserver, error, completed) {\r\n        // Note: `type` isn't being used. Its type is also incorrect. TaskEvent should not be a string.\r\n        const observer = new Observer(nextOrObserver || undefined, error || undefined, completed || undefined);\r\n        this._addObserver(observer);\r\n        return () => {\r\n            this._removeObserver(observer);\r\n        };\r\n    }\r\n    /**\r\n     * This object behaves like a Promise, and resolves with its snapshot data\r\n     * when the upload completes.\r\n     * @param onFulfilled - The fulfillment callback. Promise chaining works as normal.\r\n     * @param onRejected - The rejection callback.\r\n     */\r\n    then(onFulfilled, onRejected) {\r\n        // These casts are needed so that TypeScript can infer the types of the\r\n        // resulting Promise.\r\n        return this._promise.then(onFulfilled, onRejected);\r\n    }\r\n    /**\r\n     * Equivalent to calling `then(null, onRejected)`.\r\n     */\r\n    catch(onRejected) {\r\n        return this.then(null, onRejected);\r\n    }\r\n    /**\r\n     * Adds the given observer.\r\n     */\r\n    _addObserver(observer) {\r\n        this._observers.push(observer);\r\n        this._notifyObserver(observer);\r\n    }\r\n    /**\r\n     * Removes the given observer.\r\n     */\r\n    _removeObserver(observer) {\r\n        const i = this._observers.indexOf(observer);\r\n        if (i !== -1) {\r\n            this._observers.splice(i, 1);\r\n        }\r\n    }\r\n    _notifyObservers() {\r\n        this._finishPromise();\r\n        const observers = this._observers.slice();\r\n        observers.forEach(observer => {\r\n            this._notifyObserver(observer);\r\n        });\r\n    }\r\n    _finishPromise() {\r\n        if (this._resolve !== undefined) {\r\n            let triggered = true;\r\n            switch (taskStateFromInternalTaskState(this._state)) {\r\n                case TaskState.SUCCESS:\r\n                    async(this._resolve.bind(null, this.snapshot))();\r\n                    break;\r\n                case TaskState.CANCELED:\r\n                case TaskState.ERROR:\r\n                    const toCall = this._reject;\r\n                    async(toCall.bind(null, this._error))();\r\n                    break;\r\n                default:\r\n                    triggered = false;\r\n                    break;\r\n            }\r\n            if (triggered) {\r\n                this._resolve = undefined;\r\n                this._reject = undefined;\r\n            }\r\n        }\r\n    }\r\n    _notifyObserver(observer) {\r\n        const externalState = taskStateFromInternalTaskState(this._state);\r\n        switch (externalState) {\r\n            case TaskState.RUNNING:\r\n            case TaskState.PAUSED:\r\n                if (observer.next) {\r\n                    async(observer.next.bind(observer, this.snapshot))();\r\n                }\r\n                break;\r\n            case TaskState.SUCCESS:\r\n                if (observer.complete) {\r\n                    async(observer.complete.bind(observer))();\r\n                }\r\n                break;\r\n            case TaskState.CANCELED:\r\n            case TaskState.ERROR:\r\n                if (observer.error) {\r\n                    async(observer.error.bind(observer, this._error))();\r\n                }\r\n                break;\r\n            default:\r\n                // TODO(andysoto): assert(false);\r\n                if (observer.error) {\r\n                    async(observer.error.bind(observer, this._error))();\r\n                }\r\n        }\r\n    }\r\n    /**\r\n     * Resumes a paused task. Has no effect on a currently running or failed task.\r\n     * @returns True if the operation took effect, false if ignored.\r\n     */\r\n    resume() {\r\n        const valid = this._state === \"paused\" /* InternalTaskState.PAUSED */ ||\r\n            this._state === \"pausing\" /* InternalTaskState.PAUSING */;\r\n        if (valid) {\r\n            this._transition(\"running\" /* InternalTaskState.RUNNING */);\r\n        }\r\n        return valid;\r\n    }\r\n    /**\r\n     * Pauses a currently running task. Has no effect on a paused or failed task.\r\n     * @returns True if the operation took effect, false if ignored.\r\n     */\r\n    pause() {\r\n        const valid = this._state === \"running\" /* InternalTaskState.RUNNING */;\r\n        if (valid) {\r\n            this._transition(\"pausing\" /* InternalTaskState.PAUSING */);\r\n        }\r\n        return valid;\r\n    }\r\n    /**\r\n     * Cancels a currently running or paused task. Has no effect on a complete or\r\n     * failed task.\r\n     * @returns True if the operation took effect, false if ignored.\r\n     */\r\n    cancel() {\r\n        const valid = this._state === \"running\" /* InternalTaskState.RUNNING */ ||\r\n            this._state === \"pausing\" /* InternalTaskState.PAUSING */;\r\n        if (valid) {\r\n            this._transition(\"canceling\" /* InternalTaskState.CANCELING */);\r\n        }\r\n        return valid;\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Provides methods to interact with a bucket in the Firebase Storage service.\r\n * @internal\r\n * @param _location - An fbs.location, or the URL at\r\n *     which to base this object, in one of the following forms:\r\n *         gs://<bucket>/<object-path>\r\n *         http[s]://firebasestorage.googleapis.com/\r\n *                     <api-version>/b/<bucket>/o/<object-path>\r\n *     Any query or fragment strings will be ignored in the http[s]\r\n *     format. If no value is passed, the storage object will use a URL based on\r\n *     the project ID of the base firebase.App instance.\r\n */\r\nclass Reference {\r\n    constructor(_service, location) {\r\n        this._service = _service;\r\n        if (location instanceof Location) {\r\n            this._location = location;\r\n        }\r\n        else {\r\n            this._location = Location.makeFromUrl(location, _service.host);\r\n        }\r\n    }\r\n    /**\r\n     * Returns the URL for the bucket and path this object references,\r\n     *     in the form gs://<bucket>/<object-path>\r\n     * @override\r\n     */\r\n    toString() {\r\n        return 'gs://' + this._location.bucket + '/' + this._location.path;\r\n    }\r\n    _newRef(service, location) {\r\n        return new Reference(service, location);\r\n    }\r\n    /**\r\n     * A reference to the root of this object's bucket.\r\n     */\r\n    get root() {\r\n        const location = new Location(this._location.bucket, '');\r\n        return this._newRef(this._service, location);\r\n    }\r\n    /**\r\n     * The name of the bucket containing this reference's object.\r\n     */\r\n    get bucket() {\r\n        return this._location.bucket;\r\n    }\r\n    /**\r\n     * The full path of this object.\r\n     */\r\n    get fullPath() {\r\n        return this._location.path;\r\n    }\r\n    /**\r\n     * The short name of this object, which is the last component of the full path.\r\n     * For example, if fullPath is 'full/path/image.png', name is 'image.png'.\r\n     */\r\n    get name() {\r\n        return lastComponent(this._location.path);\r\n    }\r\n    /**\r\n     * The `StorageService` instance this `StorageReference` is associated with.\r\n     */\r\n    get storage() {\r\n        return this._service;\r\n    }\r\n    /**\r\n     * A `StorageReference` pointing to the parent location of this `StorageReference`, or null if\r\n     * this reference is the root.\r\n     */\r\n    get parent() {\r\n        const newPath = parent(this._location.path);\r\n        if (newPath === null) {\r\n            return null;\r\n        }\r\n        const location = new Location(this._location.bucket, newPath);\r\n        return new Reference(this._service, location);\r\n    }\r\n    /**\r\n     * Utility function to throw an error in methods that do not accept a root reference.\r\n     */\r\n    _throwIfRoot(name) {\r\n        if (this._location.path === '') {\r\n            throw invalidRootOperation(name);\r\n        }\r\n    }\r\n}\r\n/**\r\n * Download the bytes at the object's location.\r\n * @returns A Promise containing the downloaded bytes.\r\n */\r\nfunction getBytesInternal(ref, maxDownloadSizeBytes) {\r\n    ref._throwIfRoot('getBytes');\r\n    const requestInfo = getBytes$1(ref.storage, ref._location, maxDownloadSizeBytes);\r\n    return ref.storage\r\n        .makeRequestWithTokens(requestInfo, newBytesConnection)\r\n        .then(bytes => maxDownloadSizeBytes !== undefined\r\n        ? // GCS may not honor the Range header for small files\r\n            bytes.slice(0, maxDownloadSizeBytes)\r\n        : bytes);\r\n}\r\n/**\r\n * Download the bytes at the object's location.\r\n * @returns A Promise containing the downloaded blob.\r\n */\r\nfunction getBlobInternal(ref, maxDownloadSizeBytes) {\r\n    ref._throwIfRoot('getBlob');\r\n    const requestInfo = getBytes$1(ref.storage, ref._location, maxDownloadSizeBytes);\r\n    return ref.storage\r\n        .makeRequestWithTokens(requestInfo, newBlobConnection)\r\n        .then(blob => maxDownloadSizeBytes !== undefined\r\n        ? // GCS may not honor the Range header for small files\r\n            blob.slice(0, maxDownloadSizeBytes)\r\n        : blob);\r\n}\r\n/**\r\n * Uploads data to this object's location.\r\n * The upload is not resumable.\r\n *\r\n * @param ref - StorageReference where data should be uploaded.\r\n * @param data - The data to upload.\r\n * @param metadata - Metadata for the newly uploaded data.\r\n * @returns A Promise containing an UploadResult\r\n */\r\nfunction uploadBytes$1(ref, data, metadata) {\r\n    ref._throwIfRoot('uploadBytes');\r\n    const requestInfo = multipartUpload(ref.storage, ref._location, getMappings(), new FbsBlob(data, true), metadata);\r\n    return ref.storage\r\n        .makeRequestWithTokens(requestInfo, newTextConnection)\r\n        .then(finalMetadata => {\r\n        return {\r\n            metadata: finalMetadata,\r\n            ref\r\n        };\r\n    });\r\n}\r\n/**\r\n * Uploads data to this object's location.\r\n * The upload can be paused and resumed, and exposes progress updates.\r\n * @public\r\n * @param ref - StorageReference where data should be uploaded.\r\n * @param data - The data to upload.\r\n * @param metadata - Metadata for the newly uploaded data.\r\n * @returns An UploadTask\r\n */\r\nfunction uploadBytesResumable$1(ref, data, metadata) {\r\n    ref._throwIfRoot('uploadBytesResumable');\r\n    return new UploadTask(ref, new FbsBlob(data), metadata);\r\n}\r\n/**\r\n * Uploads a string to this object's location.\r\n * The upload is not resumable.\r\n * @public\r\n * @param ref - StorageReference where string should be uploaded.\r\n * @param value - The string to upload.\r\n * @param format - The format of the string to upload.\r\n * @param metadata - Metadata for the newly uploaded string.\r\n * @returns A Promise containing an UploadResult\r\n */\r\nfunction uploadString$1(ref, value, format = StringFormat.RAW, metadata) {\r\n    ref._throwIfRoot('uploadString');\r\n    const data = dataFromString(format, value);\r\n    const metadataClone = Object.assign({}, metadata);\r\n    if (metadataClone['contentType'] == null && data.contentType != null) {\r\n        metadataClone['contentType'] = data.contentType;\r\n    }\r\n    return uploadBytes$1(ref, data.data, metadataClone);\r\n}\r\n/**\r\n * List all items (files) and prefixes (folders) under this storage reference.\r\n *\r\n * This is a helper method for calling list() repeatedly until there are\r\n * no more results. The default pagination size is 1000.\r\n *\r\n * Note: The results may not be consistent if objects are changed while this\r\n * operation is running.\r\n *\r\n * Warning: listAll may potentially consume too many resources if there are\r\n * too many results.\r\n * @public\r\n * @param ref - StorageReference to get list from.\r\n *\r\n * @returns A Promise that resolves with all the items and prefixes under\r\n *      the current storage reference. `prefixes` contains references to\r\n *      sub-directories and `items` contains references to objects in this\r\n *      folder. `nextPageToken` is never returned.\r\n */\r\nfunction listAll$1(ref) {\r\n    const accumulator = {\r\n        prefixes: [],\r\n        items: []\r\n    };\r\n    return listAllHelper(ref, accumulator).then(() => accumulator);\r\n}\r\n/**\r\n * Separated from listAll because async functions can't use \"arguments\".\r\n * @param ref\r\n * @param accumulator\r\n * @param pageToken\r\n */\r\nasync function listAllHelper(ref, accumulator, pageToken) {\r\n    const opt = {\r\n        // maxResults is 1000 by default.\r\n        pageToken\r\n    };\r\n    const nextPage = await list$1(ref, opt);\r\n    accumulator.prefixes.push(...nextPage.prefixes);\r\n    accumulator.items.push(...nextPage.items);\r\n    if (nextPage.nextPageToken != null) {\r\n        await listAllHelper(ref, accumulator, nextPage.nextPageToken);\r\n    }\r\n}\r\n/**\r\n * List items (files) and prefixes (folders) under this storage reference.\r\n *\r\n * List API is only available for Firebase Rules Version 2.\r\n *\r\n * GCS is a key-blob store. Firebase Storage imposes the semantic of '/'\r\n * delimited folder structure.\r\n * Refer to GCS's List API if you want to learn more.\r\n *\r\n * To adhere to Firebase Rules's Semantics, Firebase Storage does not\r\n * support objects whose paths end with \"/\" or contain two consecutive\r\n * \"/\"s. Firebase Storage List API will filter these unsupported objects.\r\n * list() may fail if there are too many unsupported objects in the bucket.\r\n * @public\r\n *\r\n * @param ref - StorageReference to get list from.\r\n * @param options - See ListOptions for details.\r\n * @returns A Promise that resolves with the items and prefixes.\r\n *      `prefixes` contains references to sub-folders and `items`\r\n *      contains references to objects in this folder. `nextPageToken`\r\n *      can be used to get the rest of the results.\r\n */\r\nfunction list$1(ref, options) {\r\n    if (options != null) {\r\n        if (typeof options.maxResults === 'number') {\r\n            validateNumber('options.maxResults', \r\n            /* minValue= */ 1, \r\n            /* maxValue= */ 1000, options.maxResults);\r\n        }\r\n    }\r\n    const op = options || {};\r\n    const requestInfo = list$2(ref.storage, ref._location, \r\n    /*delimiter= */ '/', op.pageToken, op.maxResults);\r\n    return ref.storage.makeRequestWithTokens(requestInfo, newTextConnection);\r\n}\r\n/**\r\n * A `Promise` that resolves with the metadata for this object. If this\r\n * object doesn't exist or metadata cannot be retreived, the promise is\r\n * rejected.\r\n * @public\r\n * @param ref - StorageReference to get metadata from.\r\n */\r\nfunction getMetadata$1(ref) {\r\n    ref._throwIfRoot('getMetadata');\r\n    const requestInfo = getMetadata$2(ref.storage, ref._location, getMappings());\r\n    return ref.storage.makeRequestWithTokens(requestInfo, newTextConnection);\r\n}\r\n/**\r\n * Updates the metadata for this object.\r\n * @public\r\n * @param ref - StorageReference to update metadata for.\r\n * @param metadata - The new metadata for the object.\r\n *     Only values that have been explicitly set will be changed. Explicitly\r\n *     setting a value to null will remove the metadata.\r\n * @returns A `Promise` that resolves\r\n *     with the new metadata for this object.\r\n *     See `firebaseStorage.Reference.prototype.getMetadata`\r\n */\r\nfunction updateMetadata$1(ref, metadata) {\r\n    ref._throwIfRoot('updateMetadata');\r\n    const requestInfo = updateMetadata$2(ref.storage, ref._location, metadata, getMappings());\r\n    return ref.storage.makeRequestWithTokens(requestInfo, newTextConnection);\r\n}\r\n/**\r\n * Returns the download URL for the given Reference.\r\n * @public\r\n * @returns A `Promise` that resolves with the download\r\n *     URL for this object.\r\n */\r\nfunction getDownloadURL$1(ref) {\r\n    ref._throwIfRoot('getDownloadURL');\r\n    const requestInfo = getDownloadUrl(ref.storage, ref._location, getMappings());\r\n    return ref.storage\r\n        .makeRequestWithTokens(requestInfo, newTextConnection)\r\n        .then(url => {\r\n        if (url === null) {\r\n            throw noDownloadURL();\r\n        }\r\n        return url;\r\n    });\r\n}\r\n/**\r\n * Deletes the object at this location.\r\n * @public\r\n * @param ref - StorageReference for object to delete.\r\n * @returns A `Promise` that resolves if the deletion succeeds.\r\n */\r\nfunction deleteObject$1(ref) {\r\n    ref._throwIfRoot('deleteObject');\r\n    const requestInfo = deleteObject$2(ref.storage, ref._location);\r\n    return ref.storage.makeRequestWithTokens(requestInfo, newTextConnection);\r\n}\r\n/**\r\n * Returns reference for object obtained by appending `childPath` to `ref`.\r\n *\r\n * @param ref - StorageReference to get child of.\r\n * @param childPath - Child path from provided ref.\r\n * @returns A reference to the object obtained by\r\n * appending childPath, removing any duplicate, beginning, or trailing\r\n * slashes.\r\n *\r\n */\r\nfunction _getChild$1(ref, childPath) {\r\n    const newPath = child(ref._location.path, childPath);\r\n    const location = new Location(ref._location.bucket, newPath);\r\n    return new Reference(ref.storage, location);\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nfunction isUrl(path) {\r\n    return /^[A-Za-z]+:\\/\\//.test(path);\r\n}\r\n/**\r\n * Returns a firebaseStorage.Reference for the given url.\r\n */\r\nfunction refFromURL(service, url) {\r\n    return new Reference(service, url);\r\n}\r\n/**\r\n * Returns a firebaseStorage.Reference for the given path in the default\r\n * bucket.\r\n */\r\nfunction refFromPath(ref, path) {\r\n    if (ref instanceof FirebaseStorageImpl) {\r\n        const service = ref;\r\n        if (service._bucket == null) {\r\n            throw noDefaultBucket();\r\n        }\r\n        const reference = new Reference(service, service._bucket);\r\n        if (path != null) {\r\n            return refFromPath(reference, path);\r\n        }\r\n        else {\r\n            return reference;\r\n        }\r\n    }\r\n    else {\r\n        // ref is a Reference\r\n        if (path !== undefined) {\r\n            return _getChild$1(ref, path);\r\n        }\r\n        else {\r\n            return ref;\r\n        }\r\n    }\r\n}\r\nfunction ref$1(serviceOrRef, pathOrUrl) {\r\n    if (pathOrUrl && isUrl(pathOrUrl)) {\r\n        if (serviceOrRef instanceof FirebaseStorageImpl) {\r\n            return refFromURL(serviceOrRef, pathOrUrl);\r\n        }\r\n        else {\r\n            throw invalidArgument('To use ref(service, url), the first argument must be a Storage instance.');\r\n        }\r\n    }\r\n    else {\r\n        return refFromPath(serviceOrRef, pathOrUrl);\r\n    }\r\n}\r\nfunction extractBucket(host, config) {\r\n    const bucketString = config === null || config === void 0 ? void 0 : config[CONFIG_STORAGE_BUCKET_KEY];\r\n    if (bucketString == null) {\r\n        return null;\r\n    }\r\n    return Location.makeFromBucketSpec(bucketString, host);\r\n}\r\nfunction connectStorageEmulator$1(storage, host, port, options = {}) {\r\n    storage.host = `${host}:${port}`;\r\n    storage._protocol = 'http';\r\n    const { mockUserToken } = options;\r\n    if (mockUserToken) {\r\n        storage._overrideAuthToken =\r\n            typeof mockUserToken === 'string'\r\n                ? mockUserToken\r\n                : createMockUserToken(mockUserToken, storage.app.options.projectId);\r\n    }\r\n}\r\n/**\r\n * A service that provides Firebase Storage Reference instances.\r\n * @param opt_url - gs:// url to a custom Storage Bucket\r\n *\r\n * @internal\r\n */\r\nclass FirebaseStorageImpl {\r\n    constructor(\r\n    /**\r\n     * FirebaseApp associated with this StorageService instance.\r\n     */\r\n    app, _authProvider, \r\n    /**\r\n     * @internal\r\n     */\r\n    _appCheckProvider, \r\n    /**\r\n     * @internal\r\n     */\r\n    _url, _firebaseVersion) {\r\n        this.app = app;\r\n        this._authProvider = _authProvider;\r\n        this._appCheckProvider = _appCheckProvider;\r\n        this._url = _url;\r\n        this._firebaseVersion = _firebaseVersion;\r\n        this._bucket = null;\r\n        /**\r\n         * This string can be in the formats:\r\n         * - host\r\n         * - host:port\r\n         */\r\n        this._host = DEFAULT_HOST;\r\n        this._protocol = 'https';\r\n        this._appId = null;\r\n        this._deleted = false;\r\n        this._maxOperationRetryTime = DEFAULT_MAX_OPERATION_RETRY_TIME;\r\n        this._maxUploadRetryTime = DEFAULT_MAX_UPLOAD_RETRY_TIME;\r\n        this._requests = new Set();\r\n        if (_url != null) {\r\n            this._bucket = Location.makeFromBucketSpec(_url, this._host);\r\n        }\r\n        else {\r\n            this._bucket = extractBucket(this._host, this.app.options);\r\n        }\r\n    }\r\n    /**\r\n     * The host string for this service, in the form of `host` or\r\n     * `host:port`.\r\n     */\r\n    get host() {\r\n        return this._host;\r\n    }\r\n    set host(host) {\r\n        this._host = host;\r\n        if (this._url != null) {\r\n            this._bucket = Location.makeFromBucketSpec(this._url, host);\r\n        }\r\n        else {\r\n            this._bucket = extractBucket(host, this.app.options);\r\n        }\r\n    }\r\n    /**\r\n     * The maximum time to retry uploads in milliseconds.\r\n     */\r\n    get maxUploadRetryTime() {\r\n        return this._maxUploadRetryTime;\r\n    }\r\n    set maxUploadRetryTime(time) {\r\n        validateNumber('time', \r\n        /* minValue=*/ 0, \r\n        /* maxValue= */ Number.POSITIVE_INFINITY, time);\r\n        this._maxUploadRetryTime = time;\r\n    }\r\n    /**\r\n     * The maximum time to retry operations other than uploads or downloads in\r\n     * milliseconds.\r\n     */\r\n    get maxOperationRetryTime() {\r\n        return this._maxOperationRetryTime;\r\n    }\r\n    set maxOperationRetryTime(time) {\r\n        validateNumber('time', \r\n        /* minValue=*/ 0, \r\n        /* maxValue= */ Number.POSITIVE_INFINITY, time);\r\n        this._maxOperationRetryTime = time;\r\n    }\r\n    async _getAuthToken() {\r\n        if (this._overrideAuthToken) {\r\n            return this._overrideAuthToken;\r\n        }\r\n        const auth = this._authProvider.getImmediate({ optional: true });\r\n        if (auth) {\r\n            const tokenData = await auth.getToken();\r\n            if (tokenData !== null) {\r\n                return tokenData.accessToken;\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n    async _getAppCheckToken() {\r\n        const appCheck = this._appCheckProvider.getImmediate({ optional: true });\r\n        if (appCheck) {\r\n            const result = await appCheck.getToken();\r\n            // TODO: What do we want to do if there is an error getting the token?\r\n            // Context: appCheck.getToken() will never throw even if an error happened. In the error case, a dummy token will be\r\n            // returned along with an error field describing the error. In general, we shouldn't care about the error condition and just use\r\n            // the token (actual or dummy) to send requests.\r\n            return result.token;\r\n        }\r\n        return null;\r\n    }\r\n    /**\r\n     * Stop running requests and prevent more from being created.\r\n     */\r\n    _delete() {\r\n        if (!this._deleted) {\r\n            this._deleted = true;\r\n            this._requests.forEach(request => request.cancel());\r\n            this._requests.clear();\r\n        }\r\n        return Promise.resolve();\r\n    }\r\n    /**\r\n     * Returns a new firebaseStorage.Reference object referencing this StorageService\r\n     * at the given Location.\r\n     */\r\n    _makeStorageReference(loc) {\r\n        return new Reference(this, loc);\r\n    }\r\n    /**\r\n     * @param requestInfo - HTTP RequestInfo object\r\n     * @param authToken - Firebase auth token\r\n     */\r\n    _makeRequest(requestInfo, requestFactory, authToken, appCheckToken, retry = true) {\r\n        if (!this._deleted) {\r\n            const request = makeRequest(requestInfo, this._appId, authToken, appCheckToken, requestFactory, this._firebaseVersion, retry);\r\n            this._requests.add(request);\r\n            // Request removes itself from set when complete.\r\n            request.getPromise().then(() => this._requests.delete(request), () => this._requests.delete(request));\r\n            return request;\r\n        }\r\n        else {\r\n            return new FailRequest(appDeleted());\r\n        }\r\n    }\r\n    async makeRequestWithTokens(requestInfo, requestFactory) {\r\n        const [authToken, appCheckToken] = await Promise.all([\r\n            this._getAuthToken(),\r\n            this._getAppCheckToken()\r\n        ]);\r\n        return this._makeRequest(requestInfo, requestFactory, authToken, appCheckToken).getPromise();\r\n    }\r\n}\n\nconst name = \"@firebase/storage\";\nconst version = \"0.12.1\";\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Type constant for Firebase Storage.\r\n */\r\nconst STORAGE_TYPE = 'storage';\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Downloads the data at the object's location. Returns an error if the object\r\n * is not found.\r\n *\r\n * To use this functionality, you have to whitelist your app's origin in your\r\n * Cloud Storage bucket. See also\r\n * https://cloud.google.com/storage/docs/configuring-cors\r\n *\r\n * @public\r\n * @param ref - StorageReference where data should be downloaded.\r\n * @param maxDownloadSizeBytes - If set, the maximum allowed size in bytes to\r\n * retrieve.\r\n * @returns A Promise containing the object's bytes\r\n */\r\nfunction getBytes(ref, maxDownloadSizeBytes) {\r\n    ref = getModularInstance(ref);\r\n    return getBytesInternal(ref, maxDownloadSizeBytes);\r\n}\r\n/**\r\n * Uploads data to this object's location.\r\n * The upload is not resumable.\r\n * @public\r\n * @param ref - {@link StorageReference} where data should be uploaded.\r\n * @param data - The data to upload.\r\n * @param metadata - Metadata for the data to upload.\r\n * @returns A Promise containing an UploadResult\r\n */\r\nfunction uploadBytes(ref, data, metadata) {\r\n    ref = getModularInstance(ref);\r\n    return uploadBytes$1(ref, data, metadata);\r\n}\r\n/**\r\n * Uploads a string to this object's location.\r\n * The upload is not resumable.\r\n * @public\r\n * @param ref - {@link StorageReference} where string should be uploaded.\r\n * @param value - The string to upload.\r\n * @param format - The format of the string to upload.\r\n * @param metadata - Metadata for the string to upload.\r\n * @returns A Promise containing an UploadResult\r\n */\r\nfunction uploadString(ref, value, format, metadata) {\r\n    ref = getModularInstance(ref);\r\n    return uploadString$1(ref, value, format, metadata);\r\n}\r\n/**\r\n * Uploads data to this object's location.\r\n * The upload can be paused and resumed, and exposes progress updates.\r\n * @public\r\n * @param ref - {@link StorageReference} where data should be uploaded.\r\n * @param data - The data to upload.\r\n * @param metadata - Metadata for the data to upload.\r\n * @returns An UploadTask\r\n */\r\nfunction uploadBytesResumable(ref, data, metadata) {\r\n    ref = getModularInstance(ref);\r\n    return uploadBytesResumable$1(ref, data, metadata);\r\n}\r\n/**\r\n * A `Promise` that resolves with the metadata for this object. If this\r\n * object doesn't exist or metadata cannot be retreived, the promise is\r\n * rejected.\r\n * @public\r\n * @param ref - {@link StorageReference} to get metadata from.\r\n */\r\nfunction getMetadata(ref) {\r\n    ref = getModularInstance(ref);\r\n    return getMetadata$1(ref);\r\n}\r\n/**\r\n * Updates the metadata for this object.\r\n * @public\r\n * @param ref - {@link StorageReference} to update metadata for.\r\n * @param metadata - The new metadata for the object.\r\n *     Only values that have been explicitly set will be changed. Explicitly\r\n *     setting a value to null will remove the metadata.\r\n * @returns A `Promise` that resolves with the new metadata for this object.\r\n */\r\nfunction updateMetadata(ref, metadata) {\r\n    ref = getModularInstance(ref);\r\n    return updateMetadata$1(ref, metadata);\r\n}\r\n/**\r\n * List items (files) and prefixes (folders) under this storage reference.\r\n *\r\n * List API is only available for Firebase Rules Version 2.\r\n *\r\n * GCS is a key-blob store. Firebase Storage imposes the semantic of '/'\r\n * delimited folder structure.\r\n * Refer to GCS's List API if you want to learn more.\r\n *\r\n * To adhere to Firebase Rules's Semantics, Firebase Storage does not\r\n * support objects whose paths end with \"/\" or contain two consecutive\r\n * \"/\"s. Firebase Storage List API will filter these unsupported objects.\r\n * list() may fail if there are too many unsupported objects in the bucket.\r\n * @public\r\n *\r\n * @param ref - {@link StorageReference} to get list from.\r\n * @param options - See {@link ListOptions} for details.\r\n * @returns A `Promise` that resolves with the items and prefixes.\r\n *      `prefixes` contains references to sub-folders and `items`\r\n *      contains references to objects in this folder. `nextPageToken`\r\n *      can be used to get the rest of the results.\r\n */\r\nfunction list(ref, options) {\r\n    ref = getModularInstance(ref);\r\n    return list$1(ref, options);\r\n}\r\n/**\r\n * List all items (files) and prefixes (folders) under this storage reference.\r\n *\r\n * This is a helper method for calling list() repeatedly until there are\r\n * no more results. The default pagination size is 1000.\r\n *\r\n * Note: The results may not be consistent if objects are changed while this\r\n * operation is running.\r\n *\r\n * Warning: `listAll` may potentially consume too many resources if there are\r\n * too many results.\r\n * @public\r\n * @param ref - {@link StorageReference} to get list from.\r\n *\r\n * @returns A `Promise` that resolves with all the items and prefixes under\r\n *      the current storage reference. `prefixes` contains references to\r\n *      sub-directories and `items` contains references to objects in this\r\n *      folder. `nextPageToken` is never returned.\r\n */\r\nfunction listAll(ref) {\r\n    ref = getModularInstance(ref);\r\n    return listAll$1(ref);\r\n}\r\n/**\r\n * Returns the download URL for the given {@link StorageReference}.\r\n * @public\r\n * @param ref - {@link StorageReference} to get the download URL for.\r\n * @returns A `Promise` that resolves with the download\r\n *     URL for this object.\r\n */\r\nfunction getDownloadURL(ref) {\r\n    ref = getModularInstance(ref);\r\n    return getDownloadURL$1(ref);\r\n}\r\n/**\r\n * Deletes the object at this location.\r\n * @public\r\n * @param ref - {@link StorageReference} for object to delete.\r\n * @returns A `Promise` that resolves if the deletion succeeds.\r\n */\r\nfunction deleteObject(ref) {\r\n    ref = getModularInstance(ref);\r\n    return deleteObject$1(ref);\r\n}\r\nfunction ref(serviceOrRef, pathOrUrl) {\r\n    serviceOrRef = getModularInstance(serviceOrRef);\r\n    return ref$1(serviceOrRef, pathOrUrl);\r\n}\r\n/**\r\n * @internal\r\n */\r\nfunction _getChild(ref, childPath) {\r\n    return _getChild$1(ref, childPath);\r\n}\r\n/**\r\n * Gets a {@link FirebaseStorage} instance for the given Firebase app.\r\n * @public\r\n * @param app - Firebase app to get {@link FirebaseStorage} instance for.\r\n * @param bucketUrl - The gs:// url to your Firebase Storage Bucket.\r\n * If not passed, uses the app's default Storage Bucket.\r\n * @returns A {@link FirebaseStorage} instance.\r\n */\r\nfunction getStorage(app = getApp(), bucketUrl) {\r\n    app = getModularInstance(app);\r\n    const storageProvider = _getProvider(app, STORAGE_TYPE);\r\n    const storageInstance = storageProvider.getImmediate({\r\n        identifier: bucketUrl\r\n    });\r\n    const emulator = getDefaultEmulatorHostnameAndPort('storage');\r\n    if (emulator) {\r\n        connectStorageEmulator(storageInstance, ...emulator);\r\n    }\r\n    return storageInstance;\r\n}\r\n/**\r\n * Modify this {@link FirebaseStorage} instance to communicate with the Cloud Storage emulator.\r\n *\r\n * @param storage - The {@link FirebaseStorage} instance\r\n * @param host - The emulator host (ex: localhost)\r\n * @param port - The emulator port (ex: 5001)\r\n * @param options - Emulator options. `options.mockUserToken` is the mock auth\r\n * token to use for unit testing Security Rules.\r\n * @public\r\n */\r\nfunction connectStorageEmulator(storage, host, port, options = {}) {\r\n    connectStorageEmulator$1(storage, host, port, options);\r\n}\n\n/**\r\n * @license\r\n * Copyright 2021 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Downloads the data at the object's location. Returns an error if the object\r\n * is not found.\r\n *\r\n * To use this functionality, you have to whitelist your app's origin in your\r\n * Cloud Storage bucket. See also\r\n * https://cloud.google.com/storage/docs/configuring-cors\r\n *\r\n * This API is not available in Node.\r\n *\r\n * @public\r\n * @param ref - StorageReference where data should be downloaded.\r\n * @param maxDownloadSizeBytes - If set, the maximum allowed size in bytes to\r\n * retrieve.\r\n * @returns A Promise that resolves with a Blob containing the object's bytes\r\n */\r\nfunction getBlob(ref, maxDownloadSizeBytes) {\r\n    ref = getModularInstance(ref);\r\n    return getBlobInternal(ref, maxDownloadSizeBytes);\r\n}\r\n/**\r\n * Downloads the data at the object's location. Raises an error event if the\r\n * object is not found.\r\n *\r\n * This API is only available in Node.\r\n *\r\n * @public\r\n * @param ref - StorageReference where data should be downloaded.\r\n * @param maxDownloadSizeBytes - If set, the maximum allowed size in bytes to\r\n * retrieve.\r\n * @returns A stream with the object's data as bytes\r\n */\r\nfunction getStream(ref, maxDownloadSizeBytes) {\r\n    throw new Error('getStream() is only supported by NodeJS builds');\r\n}\n\n/**\r\n * Cloud Storage for Firebase\r\n *\r\n * @packageDocumentation\r\n */\r\nfunction factory(container, { instanceIdentifier: url }) {\r\n    const app = container.getProvider('app').getImmediate();\r\n    const authProvider = container.getProvider('auth-internal');\r\n    const appCheckProvider = container.getProvider('app-check-internal');\r\n    return new FirebaseStorageImpl(app, authProvider, appCheckProvider, url, SDK_VERSION);\r\n}\r\nfunction registerStorage() {\r\n    _registerComponent(new Component(STORAGE_TYPE, factory, \"PUBLIC\" /* ComponentType.PUBLIC */).setMultipleInstances(true));\r\n    //RUNTIME_ENV will be replaced during the compilation to \"node\" for nodejs and an empty string for browser\r\n    registerVersion(name, version, '');\r\n    // BUILD_TARGET will be replaced by values like esm5, esm2017, cjs5, etc during the compilation\r\n    registerVersion(name, version, 'esm2017');\r\n}\r\nregisterStorage();\n\nexport { StorageError, StorageErrorCode, StringFormat, FbsBlob as _FbsBlob, Location as _Location, TaskEvent as _TaskEvent, TaskState as _TaskState, UploadTask as _UploadTask, dataFromString as _dataFromString, _getChild, invalidArgument as _invalidArgument, invalidRootOperation as _invalidRootOperation, connectStorageEmulator, deleteObject, getBlob, getBytes, getDownloadURL, getMetadata, getStorage, getStream, list, listAll, ref, updateMetadata, uploadBytes, uploadBytesResumable, uploadString };\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}